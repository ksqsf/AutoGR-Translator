Problems:
1. [ERR] unknown cond (unknown from (index == 2) || (index == 5) || (index == 6))
2. [ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
3. SELECTs with JOINs, causing
   [ERR] unknown cond (! (invoke (unknown from data.get(1).get(0)) equals [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} NULL)]))


Reading analyzer config from /Users/kaima/src/translator/config/HealthPlus.yml
- Table: BloodGroupingRh
  tst_bloodG_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  bloodGroup; String; [DEFAULT, NULL]
  rhesusD; String; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: LipidTest
  tst_li_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  cholestrolHDL; String; [DEFAULT, NULL]
  cholestrolLDL; String; [DEFAULT, NULL]
  triglycerides; String; [DEFAULT, NULL]
  totalCholestrolLDLHDLratio; String; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: LiverFunctionTest
  tst_liver_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  totalProtein; Real; [DEFAULT, NULL]
  albumin; Real; [DEFAULT, NULL]
  globulin; Real; [DEFAULT, NULL]
  totalBilirubin; Real; [DEFAULT, NULL]
  directBilirubin; Real; [DEFAULT, NULL]
  sgotast; Real; [DEFAULT, NULL]
  sgptalt; Real; [DEFAULT, NULL]
  alkalinePhospates; Real; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: RenalFunctionTest
  tst_renal_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  creatinine; Real; [DEFAULT, NULL]
  urea; Real; [DEFAULT, NULL]
  totalBilirubin; Real; [DEFAULT, NULL]
  directBilirubin; Real; [DEFAULT, NULL]
  sgotast; Real; [DEFAULT, NULL]
  sgptalt; Real; [DEFAULT, NULL]
  alkalinePhospates; Real; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: SeriumCreatinePhosphokinase
  tst_SCP_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  hiv12ELISA; String; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: SeriumCreatinePhosphokinaseTotal
  tst_SCPT_id; String; [NOT, NULL, DEFAULT, '']
  test_id; String; [DEFAULT, NULL]
  prescription_id; String; [DEFAULT, NULL]
  cpkTotal; Int; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: UrineFullReport
  tst_ur_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  appearance; String; [DEFAULT, NULL]
  sgRefractometer; String; [DEFAULT, NULL]
  ph; Real; [DEFAULT, NULL]
  protein; String; [DEFAULT, NULL]
  glucose; String; [DEFAULT, NULL]
  ketoneBodies; String; [DEFAULT, NULL]
  bilirubin; String; [DEFAULT, NULL]
  urobilirubin; String; [DEFAULT, NULL]
  contrifugedDepositsphaseContrastMicroscopy; String; [DEFAULT, NULL]
  pusCells; String; [DEFAULT, NULL]
  redCells; String; [DEFAULT, NULL]
  epithelialCells; String; [DEFAULT, NULL]
  casts; String; [DEFAULT, NULL]
  cristals; String; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: appointment
  appointment_id; String; [NOT, NULL, DEFAULT, '']
  date; Datetime; [DEFAULT, NULL]
  info; String; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
  bill_id; String; [DEFAULT, NULL]
  slmc_reg_no; String; [DEFAULT, NULL]
  cancelled; Int; [DEFAULT, NULL]
- Table: bill
  bill_id; String; [NOT, NULL, DEFAULT, '']
  bill_date; Datetime; [DEFAULT, NULL]
  doctor_fee; Int; [DEFAULT, NULL]
  hospital_fee; Int; [DEFAULT, NULL]
  pharmacy_fee; Int; [DEFAULT, NULL]
  laboratory_fee; Int; [DEFAULT, NULL]
  appointment_fee; Int; [DEFAULT, NULL]
  vat; Int; [DEFAULT, NULL]
  discount; Int; [DEFAULT, NULL]
  total; Int; [DEFAULT, NULL]
  payment_method; String; [DEFAULT, NULL]
  consultant_id; String; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
  refund; Int; [DEFAULT, NULL]
- Table: completeBloodCount
  tst_CBC_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  totalWhiteCellCount; Int; [DEFAULT, NULL]
  differentialCount; Int; [DEFAULT, NULL]
  neutrophils; Int; [DEFAULT, NULL]
  lymphocytes; Int; [DEFAULT, NULL]
  monocytes; Int; [DEFAULT, NULL]
  eosonophils; Int; [DEFAULT, NULL]
  basophils; Int; [DEFAULT, NULL]
  haemoglobin; Real; [DEFAULT, NULL]
  redBloodCells; Real; [DEFAULT, NULL]
  meanCellVolume; Real; [DEFAULT, NULL]
  haematocrit; Real; [DEFAULT, NULL]
  meanCellHaemoglobin; Real; [DEFAULT, NULL]
  mchConcentration; Real; [DEFAULT, NULL]
  redCellsDistributionWidth; Real; [DEFAULT, NULL]
  plateletCount; Int; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: diagnose_history
  diagnostic_id; String; [NOT, NULL, DEFAULT, '']
  patient_id; String; [DEFAULT, NULL]
  diagnose; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  consultant_id; String; [DEFAULT, NULL]
  prescription_id; String; [DEFAULT, NULL]
- Table: doctor
  slmc_reg_no; String; [NOT, NULL, DEFAULT, '']
  user_id; String; [DEFAULT, NULL]
  education; String; [DEFAULT, NULL]
  training; String; [DEFAULT, NULL]
  experienced_areas; String; [DEFAULT, NULL]
  experience; String; [DEFAULT, NULL]
  achievements; String; [DEFAULT, NULL]
  channelling_fee; Int; [DEFAULT, NULL]
- Table: doctor_availability
  time_slot_id; String; [NOT, NULL, DEFAULT, '']
  slmc_reg_no; String; [DEFAULT, NULL]
  day; Int; [DEFAULT, NULL]
  time_slot; String; [DEFAULT, NULL]
  current_week_appointments; Int; [DEFAULT, NULL]
  next_week_appointments; Int; [DEFAULT, NULL]
- Table: drug
  drug_id; String; [NOT, NULL, DEFAULT, '']
  drug_name; String; [DEFAULT, NULL]
  dangerous_drug; Int; [DEFAULT, NULL]
- Table: drug_brand_names
  brand_id; String; [NOT, NULL, DEFAULT, '']
  brand_name; String; [DEFAULT, NULL]
  generic_name; String; [DEFAULT, NULL]
  drug_type; String; [DEFAULT, NULL]
  drug_unit; String; [DEFAULT, NULL]
  unit_price; Int; [DEFAULT, NULL]
- Table: lab_appointment
  lab_appointment_id; String; [NOT, NULL, DEFAULT, '']
  test_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  info; String; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
  bill_id; String; [DEFAULT, NULL]
  lab_assistant_id; String; [DEFAULT, NULL]
  cancelled; Int; [DEFAULT, NULL]
  doctor_id; String; [DEFAULT, NULL]
- Table: lab_appointment_timetable
  app_id; String; [NOT, NULL, DEFAULT, '']
  app_test_id; String; [DEFAULT, NULL]
  app_day; Int; [DEFAULT, NULL]
  time_slot; String; [DEFAULT, NULL]
  current_week_appointments; Int; [DEFAULT, NULL]
  next_week_appointments; Int; [DEFAULT, NULL]
- Table: lab_assistant
  lab_assistant_id; String; [NOT, NULL, DEFAULT, '']
  user_id; String; [DEFAULT, NULL]
  education; String; [DEFAULT, NULL]
  training; String; [DEFAULT, NULL]
  experience; String; [DEFAULT, NULL]
  achievements; String; [DEFAULT, NULL]
- Table: lab_test
  test_id; String; [NOT, NULL, DEFAULT, '']
  test_name; String; [DEFAULT, NULL]
  test_description; String; [DEFAULT, NULL]
  test_fee; Int; [DEFAULT, NULL]
- Table: medical_history
  history_id; String; [NOT, NULL, DEFAULT, '']
  patient_id; String; [DEFAULT, NULL]
  doctor_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  history; String; [DEFAULT, NULL]
- Table: patient
  patient_id; String; [NOT, NULL, DEFAULT, '']
  person_id; String; [DEFAULT, NULL]
  drug_allergies_and_reactions; String; [DEFAULT, NULL]
- Table: patient_message_receive
  message_id; String; [NOT, NULL, DEFAULT, '']
  receiver; String; [DEFAULT, NULL]
  sender; String; [DEFAULT, NULL]
  subject; String; [DEFAULT, NULL]
  message; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: patient_message_send
  message_id; String; [NOT, NULL, DEFAULT, '']
  receiver; String; [DEFAULT, NULL]
  sender; String; [DEFAULT, NULL]
  email; String; [DEFAULT, NULL]
  message; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: patient_useraccount
  patient_id; String; [NOT, NULL, DEFAULT, '']
  person_id; String; [DEFAULT, NULL]
  username; String; [DEFAULT, NULL]
  password; String; [DEFAULT, NULL]
- Table: person
  person_id; String; [NOT, NULL, DEFAULT, '']
  user_id; String; [DEFAULT, NULL]
  nic; String; [DEFAULT, NULL]
  gender; String; [DEFAULT, NULL]
  date_of_birth; Datetime; [DEFAULT, NULL]
  address; String; [DEFAULT, NULL]
  mobile; String; [DEFAULT, NULL]
  first_name; String; [DEFAULT, NULL]
  last_name; String; [DEFAULT, NULL]
  email; String; [DEFAULT, NULL]
  nationality; String; [DEFAULT, NULL]
  religion; String; [DEFAULT, NULL]
- Table: pharmacist
  pharmacist_id; String; [NOT, NULL, DEFAULT, '']
  user_id; String; [DEFAULT, NULL]
  education; String; [DEFAULT, NULL]
  training; String; [DEFAULT, NULL]
  experience; String; [DEFAULT, NULL]
  achievements; String; [DEFAULT, NULL]
- Table: pharmacy_history
  history_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  bill_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  no_of_drugs; Int; [DEFAULT, NULL]
  excluded; String; [DEFAULT, NULL]
- Table: pharmacy_stock
  stock_id; String; [NOT, NULL, DEFAULT, '']
  drug_id; String; [DEFAULT, NULL]
  brand_id; String; [DEFAULT, NULL]
  stock; Int; [DEFAULT, NULL]
  remaining_quantity; Int; [DEFAULT, NULL]
  manufac_date; Datetime; [DEFAULT, NULL]
  exp_date; Datetime; [DEFAULT, NULL]
  supplier_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: prescription
  prescription_id; String; [NOT, NULL, DEFAULT, '']
  patient_id; String; [DEFAULT, NULL]
  consultant_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  drugs_dose; String; [DEFAULT, NULL]
  tests; String; [DEFAULT, NULL]
- Table: refund
  refund_id; String; [NOT, NULL, DEFAULT, '']
  bill_id; String; [DEFAULT, NULL]
  payment_type; String; [DEFAULT, NULL]
  reason; String; [DEFAULT, NULL]
  amount; Int; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: signup
  id; Int; [NOT, NULL, AUTO_INCREMENT]
  fname; String; [NOT, NULL]
  lname; String; [DEFAULT, NULL]
  nic; String; [DEFAULT, NULL]
  address; String; [DEFAULT, NULL]
  contact; Int; [DEFAULT, NULL]
  email; String; [DEFAULT, NULL]
  gender; String; [DEFAULT, NULL]
  dob; String; [DEFAULT, NULL]
  religion; String; [DEFAULT, NULL]
  nationality; String; [DEFAULT, NULL]
  maritalstatus; String; [DEFAULT, NULL]
  medicalhistory; String; [DEFAULT, NULL]
  username; String; [DEFAULT, NULL]
  password; String; [DEFAULT, NULL]
- Table: suppliers
  supplier_id; String; [DEFAULT, NULL]
  supplier_name; String; [DEFAULT, NULL]
- Table: sys_user
  person_id; String; [DEFAULT, NULL]
  user_id; String; [NOT, NULL, DEFAULT, '']
  user_name; String; [DEFAULT, NULL]
  user_type; String; [DEFAULT, NULL]
  other_info; String; [DEFAULT, NULL]
  password; String; [DEFAULT, NULL]
  online; Int; [DEFAULT, NULL]
  login; Datetime; [DEFAULT, NULL]
  logout; Datetime; [DEFAULT, NULL]
  profile_pic; String; [DEFAULT, 'p2.png']
  suspend; Int; [DEFAULT, NULL]
- Table: tempappointment
  id; Int; [NOT, NULL, AUTO_INCREMENT]
  doctor_id; String; [DEFAULT, NULL]
  time; Datetime; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
- Table: tmp_bill
  tmp_bill_id; String; [NOT, NULL, DEFAULT, '']
  doctor_fee; Int; [DEFAULT, NULL]
  hospital_fee; Int; [DEFAULT, NULL]
  pharmacy_fee; Int; [DEFAULT, NULL]
  laboratory_fee; Int; [DEFAULT, NULL]
  appointment_fee; Int; [DEFAULT, NULL]
  vat; Int; [DEFAULT, NULL]
  discount; Int; [DEFAULT, NULL]
  consultant_id; String; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
- Table: user_message
  message_id; String; [NOT, NULL, DEFAULT, '']
  reciver; String; [DEFAULT, NULL]
  sender; String; [DEFAULT, NULL]
  subject; String; [DEFAULT, NULL]
  message; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  rd; Int; [DEFAULT, '0']
- Table: website_messages
  id; Int; [NOT, NULL, AUTO_INCREMENT]
  first_name; String; [DEFAULT, NULL]
  last_name; String; [DEFAULT, NULL]
  email; String; [DEFAULT, NULL]
  message; String; [DEFAULT, NULL]
Intergraph: NewMessageController.java
Intergraph: AllMessages.java
Intergraph: DoctorDetail.java
Intergraph: SettingsController.java
Intergraph: Appointment.java
Intergraph: UserOptionPopOverController.java
Intergraph: SysUserController.java
Intergraph: PopupAskController.java
Intergraph: AdminMessageController.java
Intergraph: AllAppointmentsController.java
Intergraph: Validate.java
Intergraph: LabReport.java
Intergraph: WarningController.java
Intergraph: Availability.java
Intergraph: Doctor.java
Intergraph: Pharmacist.java
Intergraph: Drug.java
Intergraph: ReadMessageController.java
Intergraph: Bill.java
Intergraph: PharmacistController.java
Intergraph: Prescription.java
Intergraph: AllMessagesController.java
Intergraph: PrescriptionListController.java
Intergraph: Message.java
Intergraph: ReceptionistController.java
Intergraph: LabAssistant.java
Intergraph: Admin.java
Intergraph: BillPreviewController.java
Intergraph: LabReportPreviewController.java
Intergraph: ReportsController.java
Intergraph: PopoverController.java
Intergraph: ErrorController.java
Intergraph: AddNewDrugController.java
[WARN] ignore manuDate.getValue() due to UnsolvedSymbolException{context='null', name='We are unable to find the method declaration corresponding to manuDate.getValue()', cause='null'}
[WARN] ignore expDate.getValue() due to UnsolvedSymbolException{context='null', name='We are unable to find the method declaration corresponding to expDate.getValue()', cause='null'}
Intergraph: LogoutController.java
Intergraph: Refund.java
Intergraph: LoginController.java
Intergraph: AdminController.java
Intergraph: RefundController.java
Intergraph: LabAssistantController.java
Intergraph: NewUserController.java
Intergraph: UserAccountController.java
Intergraph: AppointmentSuccessController.java
Intergraph: User.java
Intergraph: Receptionist.java
Intergraph: PatientAccountSuccessController.java
Intergraph: CurrentUserSummaryController.java
Intergraph: Cashier.java
Intergraph: UserAccount.java
Intergraph: SuccessIndicatorController.java
Intergraph: Popover2Controller.java
Intergraph: MainApp.java
Intergraph: NewDoctorTimeSlotController.java
Intergraph: CashierController.java
Intergraph: DoctorController.java
Intergraph: DatabaseOperator.java
Analyzing com.hms.hms_test_2.NewMessageController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing com.hms.hms_test_2.NewMessageController.loadUserNames() hasBody=true
Analyzing com.hms.hms_test_2.NewMessageController.getName() hasBody=true
Analyzing com.hms.hms_test_2.NewMessageController.clear() hasBody=true
Analyzing com.hms.hms_test_2.NewMessageController.send() hasBody=true
Analyzing com.hms.hms_test_2.NewMessageController.closeEditor() hasBody=true
Analyzing com.hms.hms_test_2.NewMessageController.load(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.NewMessageController.showSuccessIndicator() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setImage(javafx.scene.image.ImageView) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getImage() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setImage2(javafx.scene.image.ImageView) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getImage2() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setSring(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getString() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setSender(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getSender() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setMessage(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getMessage() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setDate(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getDate() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setSubject(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getSubject() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setType(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getType() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setName(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getName() hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.setID(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessages.getID() hasBody=true
Analyzing Receptionist.DoctorDetail.getDoctorID() hasBody=true
Analyzing Receptionist.DoctorDetail.setDoctorID(java.lang.String) hasBody=true
Analyzing Receptionist.DoctorDetail.getDoctorName() hasBody=true
Analyzing Receptionist.DoctorDetail.setDoctorName(java.lang.String) hasBody=true
Analyzing Receptionist.DoctorDetail.getArea() hasBody=true
Analyzing Receptionist.DoctorDetail.setArea(java.lang.String) hasBody=true
Analyzing Receptionist.DoctorDetail.getAvailability() hasBody=true
Analyzing Receptionist.DoctorDetail.setAvailability(java.lang.String) hasBody=true
Analyzing Receptionist.DoctorDetail.getDays() hasBody=true
Analyzing Receptionist.DoctorDetail.setDays(java.lang.String) hasBody=true
Analyzing Admin.SettingsController.loadConfigFile() hasBody=true
Analyzing Admin.SettingsController.checkConnection() hasBody=true
Analyzing Admin.SettingsController.showPasswordPopup() hasBody=true
Analyzing Admin.SettingsController.makeBackup() hasBody=true
Analyzing Admin.SettingsController.editDatabaseInfo() hasBody=true
Analyzing Admin.SettingsController.restart() hasBody=true
Analyzing Admin.SettingsController.closeViewAccounts(javafx.event.ActionEvent) hasBody=true
Analyzing Admin.SettingsController.showSuccessIndicator() hasBody=true
Analyzing Doctor.Appointment.getStartTime() hasBody=true
Analyzing Doctor.Appointment.setStartTime(java.util.GregorianCalendar) hasBody=true
Analyzing Doctor.Appointment.getEndTime() hasBody=true
Analyzing Doctor.Appointment.setEndTime(java.util.GregorianCalendar) hasBody=true
Analyzing Admin.UserOptionPopOverController.fillAreaChart() hasBody=true
Analyzing Admin.SysUserController.loadInfo() hasBody=true
Analyzing Admin.SysUserController.suspend() hasBody=true
Analyzing Admin.SysUserController.resetPassword() hasBody=true
Analyzing Admin.SysUserController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Admin.SysUserController.closeEditor() hasBody=true
Analyzing Admin.SysUserController.load() hasBody=true
Analyzing Admin.SysUserController.showSuccessIndicator() hasBody=true
Analyzing com.hms.hms_test_2.PopupAskController.yes() hasBody=true
Analyzing com.hms.hms_test_2.PopupAskController.no() hasBody=true
Analyzing com.hms.hms_test_2.PopupAskController.message(java.lang.String) hasBody=true
Analyzing Admin.AdminMessageController.setPaceholders() hasBody=true
Analyzing Receptionist.AllAppointmentsController.search() hasBody=true
Analyzing Receptionist.AllAppointmentsController.bindSuggestions() hasBody=true
Analyzing Receptionist.AllAppointmentsController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Receptionist.AllAppointmentsController.clear() hasBody=true
Analyzing Receptionist.AllAppointmentsController.closeEditor() hasBody=true
Analyzing Receptionist.AllAppointmentsController.loadDoctorNames() hasBody=true
Analyzing Receptionist.AllAppointmentsController.load() hasBody=true
Analyzing com.hms.hms_test_2.Validate.NIC(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.Validate.mobile(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.Validate.patientID(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.Validate.email(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.Validate.testID(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.Validate.checkInt(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.Validate.appointmentID(java.lang.String) hasBody=true
Analyzing LabAssistant.LabReport.getConstituent() hasBody=true
Analyzing LabAssistant.LabReport.setConstituent(java.lang.String) hasBody=true
Analyzing LabAssistant.LabReport.getResult() hasBody=true
Analyzing LabAssistant.LabReport.setResult(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.WarningController.addMessage(java.lang.String) hasBody=true
Analyzing Doctor.Availability.getDate() hasBody=true
Analyzing Doctor.Availability.setDate(java.lang.String) hasBody=true
Analyzing Doctor.Availability.getTime() hasBody=true
Analyzing Doctor.Availability.setTime(java.lang.String) hasBody=true
Analyzing Doctor.Availability.getId() hasBody=true
Analyzing Doctor.Availability.setId(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getUsername() hasBody=true
Analyzing Doctor.Doctor.getProfileInfo() hasBody=true
Analyzing Doctor.Doctor.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.updateDoctorInfo(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.doctorTimeTable() hasBody=true
Analyzing Doctor.Doctor.removeDoctorTime(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.removeDoctorTime(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.doctorTimeTableAddSlot(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getAppointments() hasBody=true
Analyzing Doctor.Doctor.getTestResults(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getTestResults(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getPatientInfo(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.searchByName(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getAllNames() hasBody=true
Analyzing Doctor.Doctor.diagnose(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.bill(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getLabFee(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.allergies(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.prescribe(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getDrugInfo() hasBody=true
Analyzing Doctor.Doctor.getDrugGenericInfo() hasBody=true
Analyzing Doctor.Doctor.getDrugBrandInfo(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getPatientAttendence(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getTodayAppointments() hasBody=true
Analyzing Doctor.Doctor.nameSuggestor(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getTestInfo() hasBody=true
Analyzing Doctor.Doctor.getLabPatientInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getProfileInfo() hasBody=true
Analyzing Pharmacist.Pharmacist.getPrescriptionInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getPrescribedDoc(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getpharmacyHistory(int) hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getAllNames() hasBody=true
Analyzing Pharmacist.Pharmacist.addNewDrug(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.addNewStock(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getStockInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getStockSummary() hasBody=true
Analyzing Pharmacist.Pharmacist.getStockSummary2() hasBody=true
Analyzing Pharmacist.Pharmacist.getSupplierSummary() hasBody=true
Analyzing Pharmacist.Pharmacist.getSupplierNames() hasBody=true
Analyzing Pharmacist.Pharmacist.getSupplierNames2() hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugPrices() hasBody=true
Analyzing Pharmacist.Pharmacist.getGenericNames() hasBody=true
Analyzing Pharmacist.Pharmacist.getBrandNames(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugGenericInfo() hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugNames() hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugAmounts(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugStockID(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.reduceStock(int, java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.checkForGenName(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.addNewDrug2(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.checkForBrandName(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.addNewBrand(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.checkForSupplierName(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.addNewSupplier(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.updateStock(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.updatePharmacistInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.bill(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getName() hasBody=true
Analyzing Pharmacist.Drug.setName(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getType() hasBody=true
Analyzing Pharmacist.Drug.setType(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getUnit() hasBody=true
Analyzing Pharmacist.Drug.setUnit(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getPrice() hasBody=true
Analyzing Pharmacist.Drug.setPrice(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getAmount() hasBody=true
Analyzing Pharmacist.Drug.setAmount(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getSuppliers() hasBody=true
Analyzing Pharmacist.Drug.setSuppliers(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.ReadMessageController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing com.hms.hms_test_2.ReadMessageController.closeEditor() hasBody=true
Analyzing com.hms.hms_test_2.ReadMessageController.delete() hasBody=true
Analyzing com.hms.hms_test_2.ReadMessageController.reply() hasBody=true
Analyzing com.hms.hms_test_2.ReadMessageController.previousMessage() hasBody=true
Analyzing com.hms.hms_test_2.ReadMessageController.nextMessage() hasBody=true
Analyzing com.hms.hms_test_2.ReadMessageController.fillMessage() hasBody=true
Analyzing com.hms.hms_test_2.ReadMessageController.showSuccessIndicator() hasBody=true
Analyzing Cashier.Bill.getPatientID() hasBody=true
Analyzing Cashier.Bill.setPatientID(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getDate() hasBody=true
Analyzing Cashier.Bill.setDate(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getDoctor() hasBody=true
Analyzing Cashier.Bill.setDoctor(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getHospital() hasBody=true
Analyzing Cashier.Bill.setHospital(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getPharmacy() hasBody=true
Analyzing Cashier.Bill.setPharmacy(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getLaboratory() hasBody=true
Analyzing Cashier.Bill.setLaboratory(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getAppointment() hasBody=true
Analyzing Cashier.Bill.setAppointment(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getBill() hasBody=true
Analyzing Cashier.Bill.setBill(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getBillID() hasBody=true
Analyzing Cashier.Bill.setBillID(java.lang.String) hasBody=true
Analyzing Pharmacist.PharmacistController.searchPatient(javafx.event.ActionEvent) hasBody=true
Analyzing Pharmacist.PharmacistController.addNewDrug() hasBody=true
Analyzing Pharmacist.PharmacistController.fillListSelection(java.util.ArrayList<java.util.ArrayList<java.lang.String>>) hasBody=true
Analyzing Pharmacist.PharmacistController.genericNameSelect() hasBody=true
Analyzing Pharmacist.PharmacistController.claculatePharmacyBill() hasBody=true
Analyzing Pharmacist.PharmacistController.loadNameList() hasBody=true
Analyzing Pharmacist.PharmacistController.convertToID() hasBody=true
Analyzing Pharmacist.PharmacistController.issueBill() hasBody=true
Analyzing Pharmacist.PharmacistController.clearPrescription() hasBody=true
Analyzing Pharmacist.PharmacistController.createStockPage(int) hasBody=true
Analyzing Pharmacist.PharmacistController.createStockPagination(int) hasBody=true
Analyzing Pharmacist.PharmacistController.makeStockTable() hasBody=true
Analyzing Pharmacist.PharmacistController.fillPieChart() hasBody=true
Analyzing Pharmacist.PharmacistController.fillBarChart() hasBody=true
Analyzing Pharmacist.PharmacistController.editProfilePic() hasBody=true
Analyzing Pharmacist.PharmacistController.showUser() hasBody=true
Analyzing Pharmacist.PharmacistController.loadProfileImage() hasBody=true
Analyzing Pharmacist.PharmacistController.showAllMessages() hasBody=true
Analyzing Pharmacist.PharmacistController.loadProfileData() hasBody=true
Analyzing Pharmacist.PharmacistController.editBasicInfo() hasBody=true
Analyzing Pharmacist.PharmacistController.editPharmacistInfo() hasBody=true
Analyzing Pharmacist.PharmacistController.editUserInfo() hasBody=true
Analyzing Pharmacist.PharmacistController.editPasswordInfo() hasBody=true
Analyzing Pharmacist.PharmacistController.showSuccessIndicator() hasBody=true
Analyzing Pharmacist.PharmacistController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Pharmacist.PharmacistController.logout() hasBody=true
Analyzing Pharmacist.PharmacistController.setPaceholders() hasBody=true
Analyzing Pharmacist.PharmacistController.showPopup(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Pharmacist.PharmacistController.validatePatientID() hasBody=true
Analyzing Pharmacist.PharmacistController.validateEmail() hasBody=true
Analyzing Pharmacist.PharmacistController.validateMobile() hasBody=true
Analyzing Pharmacist.PharmacistController.validateNIC() hasBody=true
Analyzing Pharmacist.PharmacistController.validatePatientNIC() hasBody=true
Analyzing Pharmacist.PharmacistController.addFocusListener() hasBody=true
Analyzing LabAssistant.Prescription.getPrescID() hasBody=true
Analyzing LabAssistant.Prescription.setPrescID(java.lang.String) hasBody=true
Analyzing LabAssistant.Prescription.getDate() hasBody=true
Analyzing LabAssistant.Prescription.setDate(java.lang.String) hasBody=true
Analyzing LabAssistant.Prescription.getDoctor() hasBody=true
Analyzing LabAssistant.Prescription.setDoctor(java.lang.String) hasBody=true
Analyzing LabAssistant.Prescription.getPrescription() hasBody=true
Analyzing LabAssistant.Prescription.setPrescription(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.AllMessagesController.loadMessages() hasBody=true
Analyzing com.hms.hms_test_2.AllMessagesController.newMessage() hasBody=true
Analyzing com.hms.hms_test_2.AllMessagesController.showMessage() hasBody=true
Analyzing LabAssistant.PrescriptionListController.fillTableData(java.util.ArrayList<java.util.ArrayList<java.lang.String>>, LabAssistant.LabAssistantController) hasBody=true
Analyzing LabAssistant.PrescriptionListController.LoadPrescriptionInfo() hasBody=true
Analyzing LabAssistant.PrescriptionListController.close() hasBody=true
Analyzing Doctor.Message.getSender() hasBody=true
Analyzing Doctor.Message.setSender(java.lang.String) hasBody=true
Analyzing Doctor.Message.getSubject() hasBody=true
Analyzing Doctor.Message.setSubject(java.lang.String) hasBody=true
Analyzing Doctor.Message.getMessage() hasBody=true
Analyzing Doctor.Message.setMessage(java.lang.String) hasBody=true
Analyzing Receptionist.ReceptionistController.fillLineChart() hasBody=true
Analyzing Receptionist.ReceptionistController.createPage(int) hasBody=true
Analyzing Receptionist.ReceptionistController.createPagination(int) hasBody=true
Analyzing Receptionist.ReceptionistController.makeSummaryTable() hasBody=true
Analyzing Receptionist.ReceptionistController.fillCurrentDoctors() hasBody=true
Analyzing Receptionist.ReceptionistController.patientSearch() hasBody=true
Analyzing Receptionist.ReceptionistController.showPopup(javafx.collections.ObservableList<java.lang.String>) hasBody=true
Analyzing Receptionist.ReceptionistController.showDays() hasBody=true
Analyzing Receptionist.ReceptionistController.addNewPatientToQue() hasBody=true
Analyzing Receptionist.ReceptionistController.reduceQue() hasBody=true
Analyzing Receptionist.ReceptionistController.patientAdd() hasBody=true
Analyzing Receptionist.ReceptionistController.loadNameList() hasBody=true
Analyzing Receptionist.ReceptionistController.patientClear() hasBody=true
Analyzing Receptionist.ReceptionistController.selectAppointmentType() hasBody=true
Analyzing Receptionist.ReceptionistController.patientIDTextFilled() hasBody=true
Analyzing Receptionist.ReceptionistController.fillConsultationAreas() hasBody=true
Analyzing Receptionist.ReceptionistController.selectDoctors() hasBody=true
Analyzing Receptionist.ReceptionistController.selectDays() hasBody=true
Analyzing Receptionist.ReceptionistController.selectTime() hasBody=true
Analyzing Receptionist.ReceptionistController.clearAppointment() hasBody=true
Analyzing Receptionist.ReceptionistController.makeAppointment() hasBody=true
Analyzing Receptionist.ReceptionistController.searchAppointment() hasBody=true
Analyzing Receptionist.ReceptionistController.showAppointments() hasBody=true
Analyzing Receptionist.ReceptionistController.cancelAppointment() hasBody=true
Analyzing Receptionist.ReceptionistController.appCancelClear() hasBody=true
Analyzing Receptionist.ReceptionistController.Anonymous-0079051f-2345-4ba5-8d91-a5ec66bb6713.call(javafx.scene.control.DatePicker) hasBody=true
Analyzing Receptionist.ReceptionistController.setDates() hasBody=true
Analyzing Receptionist.ReceptionistController.loadProfileData() hasBody=true
Analyzing Receptionist.ReceptionistController.editBasicInfo() hasBody=true
Analyzing Receptionist.ReceptionistController.editUserInfo() hasBody=true
Analyzing Receptionist.ReceptionistController.editPasswordInfo() hasBody=true
Analyzing Receptionist.ReceptionistController.showAllMessages() hasBody=true
Analyzing Receptionist.ReceptionistController.showUser() hasBody=true
Analyzing Receptionist.ReceptionistController.editProfilePic() hasBody=true
Analyzing Receptionist.ReceptionistController.loadProfileImage() hasBody=true
Analyzing Receptionist.ReceptionistController.showAppointmentSuccessIndicator(java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.ReceptionistController.showPatientAccountSuccessIndicator(java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.ReceptionistController.showSuccessIndicator() hasBody=true
Analyzing Receptionist.ReceptionistController.logout() hasBody=true
Analyzing Receptionist.ReceptionistController.setPaceholders() hasBody=true
Analyzing Receptionist.ReceptionistController.showPopup(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Receptionist.ReceptionistController.validatePatientID() hasBody=true
Analyzing Receptionist.ReceptionistController.validatePatientID2() hasBody=true
Analyzing Receptionist.ReceptionistController.validateAppointmentID() hasBody=true
Analyzing Receptionist.ReceptionistController.validateEmail() hasBody=true
Analyzing Receptionist.ReceptionistController.validateMobile() hasBody=true
Analyzing Receptionist.ReceptionistController.validateNIC() hasBody=true
Analyzing Receptionist.ReceptionistController.validateEmail2() hasBody=true
Analyzing Receptionist.ReceptionistController.validateMobile2() hasBody=true
Analyzing Receptionist.ReceptionistController.validateNIC2() hasBody=true
Analyzing LabAssistant.LabAssistant.getProfileInfo() hasBody=true
Analyzing LabAssistant.LabAssistant.updateProfileInfo(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.updateLabAssistantInfo(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.updateAccountInfo(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getLabTestNames() hasBody=true
Analyzing LabAssistant.LabAssistant.getLabTestInfo(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getPatientDetails(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getPrescriptions(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.lastMonthsAppointments() hasBody=true
Analyzing LabAssistant.LabAssistant.lastMonthsReports(int) hasBody=true
Analyzing LabAssistant.LabAssistant.getAppointments() hasBody=true
Analyzing LabAssistant.LabAssistant.getTodayAppointments() hasBody=true
Analyzing LabAssistant.LabAssistant.UrineFullReport(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.LipidTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.BloodGroupingTest(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.completeBloodCount(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.RenalFunctionTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.SeriumCreatinePhosphokinaseTotal(java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.SeriumCreatinePhosphokinase(java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.liverFunctionTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getUrineFullReport(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getLipidTestReport(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getBloodGroupingRh(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getCompleteBloodCount(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getLiverFunctionTest(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getRenalFunctionTest(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getSeriumCreatinePhosphokinaseTotal(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getSeriumCreatinePhosphokinase(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getPatientInfo(java.lang.String) hasBody=true
Analyzing Admin.Admin.getUsername() hasBody=true
Analyzing Admin.Admin.getProfileInfo() hasBody=true
Analyzing Admin.Admin.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Admin.Admin.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Admin.Admin.createNewUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.getDatabaseInfo() hasBody=true
Analyzing Admin.Admin.getUserInfo(java.lang.String) hasBody=true
Analyzing Admin.Admin.getPersonInfo() hasBody=true
Analyzing Admin.Admin.getOnlineInfo() hasBody=true
Analyzing Admin.Admin.getOnlineInfo2() hasBody=true
Analyzing Admin.Admin.getSysUserCount(java.lang.String) hasBody=true
Analyzing Admin.Admin.getPatientCount() hasBody=true
Analyzing Admin.Admin.getAllPatientCount() hasBody=true
Analyzing Admin.Admin.getOnlineCount() hasBody=true
Analyzing Admin.Admin.checkConnection() hasBody=true
Analyzing Admin.Admin.export(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.getSchemaSize(java.lang.String) hasBody=true
Analyzing Admin.Admin.getDirectorySize(java.lang.String) hasBody=true
Analyzing Admin.Admin.getPatientAttendence(java.lang.String) hasBody=true
Analyzing Admin.Admin.getDoctorNames() hasBody=true
Analyzing Admin.Admin.lastMonthsReports(int) hasBody=true
Analyzing Admin.Admin.getDocAppointments() hasBody=true
Analyzing Admin.Admin.getLabAppointments() hasBody=true
Analyzing Admin.Admin.getCancelledDocAppointments() hasBody=true
Analyzing Admin.Admin.getCancelledLabAppointments() hasBody=true
Analyzing Admin.Admin.getStockSummary() hasBody=true
Analyzing Admin.Admin.getDrugGenericInfo() hasBody=true
Analyzing Admin.Admin.getDrugNames() hasBody=true
Analyzing Admin.Admin.getDrugAmounts(java.lang.String) hasBody=true
Analyzing Admin.Admin.getSupplierNames() hasBody=true
Analyzing Admin.Admin.getSupplierSummary() hasBody=true
Analyzing Admin.Admin.lastTotalIncome(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.pharmacyIncome(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.laboratoryIncome(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.appointmentIncome(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.getSysUser(java.lang.String) hasBody=true
Analyzing Admin.Admin.suspendUser(java.lang.String) hasBody=true
Analyzing Admin.Admin.unsuspendUser(java.lang.String) hasBody=true
Analyzing Admin.Admin.getsuspendUser() hasBody=true
Analyzing Admin.Admin.getActiveUser() hasBody=true
Analyzing Admin.Admin.getSuspendedUsers() hasBody=true
Analyzing Admin.Admin.resetPassword(java.lang.String) hasBody=true
Analyzing Cashier.BillPreviewController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Cashier.BillPreviewController.fillBillPreview(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabReportPreviewController.setData(java.util.ArrayList<java.util.ArrayList<java.lang.String>>, java.lang.String) hasBody=true
Analyzing LabAssistant.LabReportPreviewController.closeViewAccounts(javafx.event.ActionEvent) hasBody=true
Analyzing Admin.ReportsController.fillPatientAttendence(java.lang.String) hasBody=true
Analyzing Admin.ReportsController.patientAttendencefromCombo() hasBody=true
Analyzing Admin.ReportsController.fillPieChart(int) hasBody=true
Analyzing Admin.ReportsController.fillReportsCombo() hasBody=true
Analyzing Admin.ReportsController.fillAppointmentChart(java.lang.String) hasBody=true
Analyzing Admin.ReportsController.fillAppointments() hasBody=true
Analyzing Admin.ReportsController.fillCancelledAppointmentChart(java.lang.String) hasBody=true
Analyzing Admin.ReportsController.fillCancelledAppointments() hasBody=true
Analyzing Admin.ReportsController.fillStockChart() hasBody=true
Analyzing Admin.ReportsController.genericNameSelect() hasBody=true
Analyzing Admin.ReportsController.fillSupplierChart() hasBody=true
Analyzing Admin.ReportsController.selectSupplierChart() hasBody=true
Analyzing Admin.ReportsController.fillTotalIncomeBarGraph(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.ReportsController.getIncome() hasBody=true
Analyzing Admin.ReportsController.fillIcome(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.ReportsController.showIncomeGraph() hasBody=true
Analyzing Admin.ReportsController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Admin.ReportsController.closeEditor() hasBody=true
Analyzing Admin.ReportsController.showSuccessIndicator() hasBody=true
Analyzing Doctor.PopoverController.fillBrandList(java.util.ArrayList<java.lang.String>, java.lang.String) hasBody=true
Analyzing Doctor.PopoverController.selectBrand(javafx.scene.input.KeyEvent) hasBody=true
Analyzing Doctor.PopoverController.close() hasBody=true
Analyzing com.hms.hms_test_2.ErrorController.addMessage(java.lang.String) hasBody=true
Analyzing Pharmacist.AddNewDrugController.loadGenericNames() hasBody=true
Analyzing Pharmacist.AddNewDrugController.showBrandNames() hasBody=true
Analyzing Pharmacist.AddNewDrugController.showDrugType() hasBody=true
Analyzing Pharmacist.AddNewDrugController.showDrugUnit() hasBody=true
Analyzing Pharmacist.AddNewDrugController.showDrugPrice() hasBody=true
Analyzing Pharmacist.AddNewDrugController.stockDetails() hasBody=true
Analyzing Pharmacist.AddNewDrugController.addNewStock() hasBody=true
[WARN] ignore manuDate.getValue() due to UnsolvedSymbolException{context='null', name='We are unable to find the method declaration corresponding to manuDate.getValue()', cause='null'}
[WARN] ignore expDate.getValue() due to UnsolvedSymbolException{context='null', name='We are unable to find the method declaration corresponding to expDate.getValue()', cause='null'}
Analyzing Pharmacist.AddNewDrugController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Pharmacist.AddNewDrugController.closeEditor() hasBody=true
Analyzing Pharmacist.AddNewDrugController.showSuccessIndicator() hasBody=true
Analyzing com.hms.hms_test_2.LogoutController.logout() hasBody=true
Analyzing com.hms.hms_test_2.LogoutController.cancel() hasBody=true
Analyzing com.hms.hms_test_2.LogoutController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Cashier.Refund.getPatientID() hasBody=true
Analyzing Cashier.Refund.setPatientID(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getDate() hasBody=true
Analyzing Cashier.Refund.setDate(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getBillID() hasBody=true
Analyzing Cashier.Refund.setBillID(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getService() hasBody=true
Analyzing Cashier.Refund.setService(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getBill() hasBody=true
Analyzing Cashier.Refund.setBill(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getRefund() hasBody=true
Analyzing Cashier.Refund.setRefund(javafx.scene.image.ImageView) hasBody=true
Analyzing com.hms.hms_test_2.LoginController.login() hasBody=true
Analyzing com.hms.hms_test_2.LoginController.loadDoctor(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.LoginController.loadPharmacist(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.LoginController.loadReceptionist(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.LoginController.loadCashier(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.LoginController.loadAdmin(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.LoginController.loadLabAssistant(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.LoginController.showPopup(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Admin.AdminController.filldatabaseStorageChart(java.lang.String) hasBody=true
Analyzing Admin.AdminController.showUsersChart() hasBody=true
Analyzing Admin.AdminController.loadTheme() hasBody=true
Analyzing Admin.AdminController.showPopup(javafx.scene.control.Label, java.util.ArrayList<java.util.ArrayList<java.lang.String>>) hasBody=true
Analyzing Admin.AdminController.showManual() hasBody=true
Analyzing Admin.AdminController.viewDoctorAccounts() hasBody=true
Analyzing Admin.AdminController.viewLabAccounts() hasBody=true
Analyzing Admin.AdminController.viewPharmacistAccounts() hasBody=true
Analyzing Admin.AdminController.viewCashierAccounts() hasBody=true
Analyzing Admin.AdminController.viewReceptionistAccounts() hasBody=true
Analyzing Admin.AdminController.viewPatientAccounts() hasBody=true
Analyzing Admin.AdminController.viewOnlineAccounts() hasBody=true
Analyzing Admin.AdminController.showSettings() hasBody=true
Analyzing Admin.AdminController.showReports() hasBody=true
Analyzing Admin.AdminController.getDoctorReg() hasBody=true
Analyzing Admin.AdminController.showPopup2(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Admin.AdminController.validateUserMobile() hasBody=true
Analyzing Admin.AdminController.validateUserNIC() hasBody=true
Analyzing Admin.AdminController.closeNotifications() hasBody=true
Analyzing Admin.AdminController.createUser(javafx.event.ActionEvent) hasBody=true
Analyzing Admin.AdminController.closeUserWindow(javafx.event.ActionEvent) hasBody=true
Analyzing Admin.AdminController.loadDatabaseInfo() hasBody=true
Analyzing Admin.AdminController.checkConnection() hasBody=true
Analyzing Admin.AdminController.showPasswordPopup() hasBody=true
Analyzing Admin.AdminController.makeBackup() hasBody=true
Analyzing Admin.AdminController.loadUsers() hasBody=true
Analyzing Admin.AdminController.getName() hasBody=true
Analyzing Admin.AdminController.searchUser() hasBody=true
Analyzing Admin.AdminController.clearUserSearch() hasBody=true
Analyzing Admin.AdminController.clearNewUser() hasBody=true
Analyzing Admin.AdminController.fillOnlineUsers() hasBody=true
Analyzing Admin.AdminController.fillStorageInfo() hasBody=true
Analyzing Admin.AdminController.fillAccountCounts() hasBody=true
Analyzing Admin.AdminController.showSuspended() hasBody=true
Analyzing Admin.AdminController.getSuspendedInfo() hasBody=true
Analyzing Admin.AdminController.showUser() hasBody=true
Analyzing Admin.AdminController.editProfilePic() hasBody=true
Analyzing Admin.AdminController.loadProfileImage() hasBody=true
Analyzing Admin.AdminController.showAllMessages() hasBody=true
Analyzing Admin.AdminController.loadProfileData() hasBody=true
Analyzing Admin.AdminController.editBasicInfo() hasBody=true
Analyzing Admin.AdminController.editUserInfo() hasBody=true
Analyzing Admin.AdminController.editPasswordInfo() hasBody=true
Analyzing Admin.AdminController.setPaceholders() hasBody=true
Analyzing Admin.AdminController.showSuccessIndicator() hasBody=true
Analyzing Admin.AdminController.logout() hasBody=true
Analyzing Admin.AdminController.showDocPopup() hasBody=true
Analyzing Admin.AdminController.showLabPopup() hasBody=true
Analyzing Admin.AdminController.showPharmacistPopup() hasBody=true
Analyzing Admin.AdminController.showCashierPopup() hasBody=true
Analyzing Admin.AdminController.showReceptionistPopup() hasBody=true
Analyzing Admin.AdminController.showPatientPopup() hasBody=true
Analyzing Admin.AdminController.hide() hasBody=true
Analyzing Admin.AdminController.showPopup(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Admin.AdminController.validateEmail() hasBody=true
Analyzing Admin.AdminController.validateMobile() hasBody=true
Analyzing Admin.AdminController.validateNIC() hasBody=true
Analyzing Admin.AdminController.addFocusListener() hasBody=true
Analyzing Cashier.RefundController.fillRefundTable() hasBody=true
Analyzing Cashier.RefundController.getRefundInfo() hasBody=true
Analyzing Cashier.RefundController.closeRefundTable() hasBody=true
Analyzing LabAssistant.LabAssistantController.fillPieChart() hasBody=true
Analyzing LabAssistant.LabAssistantController.setTabsDisabled() hasBody=true
Analyzing LabAssistant.LabAssistantController.showReport(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistantController.searchAppointment() hasBody=true
Analyzing LabAssistant.LabAssistantController.serachTypeChanged() hasBody=true
Analyzing LabAssistant.LabAssistantController.clear() hasBody=true
Analyzing LabAssistant.LabAssistantController.fillPrescriptionInfo(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistantController.fillLabAppiontments() hasBody=true
Analyzing LabAssistant.LabAssistantController.fillTodayAppointments() hasBody=true
Analyzing LabAssistant.LabAssistantController.setAppointments() hasBody=true
Analyzing LabAssistant.LabAssistantController.savePathalogyTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.clearPathalogyTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.saveLipidTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.clearLipidTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.saveBloodGroupTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.clearBloodGroupTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.saveCompleteBlood() hasBody=true
Analyzing LabAssistant.LabAssistantController.clearCompleteBlood() hasBody=true
Analyzing LabAssistant.LabAssistantController.saveRenalTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.clearRenalTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.saveCreatineTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.clearCreatineTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.saveHIV() hasBody=true
Analyzing LabAssistant.LabAssistantController.clearHIV() hasBody=true
Analyzing LabAssistant.LabAssistantController.saveLiverFunctionTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.clearLiverFunctionTest() hasBody=true
Analyzing LabAssistant.LabAssistantController.showUser() hasBody=true
Analyzing LabAssistant.LabAssistantController.editProfilePic() hasBody=true
Analyzing LabAssistant.LabAssistantController.loadProfileImage() hasBody=true
Analyzing LabAssistant.LabAssistantController.showAllMessages() hasBody=true
Analyzing LabAssistant.LabAssistantController.loadProfileData() hasBody=true
Analyzing LabAssistant.LabAssistantController.editBasicInfo() hasBody=true
Analyzing LabAssistant.LabAssistantController.editLabInfo() hasBody=true
Analyzing LabAssistant.LabAssistantController.editUserInfo() hasBody=true
Analyzing LabAssistant.LabAssistantController.addFocusListener() hasBody=true
Analyzing LabAssistant.LabAssistantController.editPasswordInfo() hasBody=true
Analyzing LabAssistant.LabAssistantController.showSuccessIndicator() hasBody=true
Analyzing LabAssistant.LabAssistantController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing LabAssistant.LabAssistantController.logout() hasBody=true
Analyzing LabAssistant.LabAssistantController.setPaceholders() hasBody=true
Analyzing LabAssistant.LabAssistantController.showErrorPopup(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Admin.NewUserController.loadData(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.NewUserController.closeUserWindow(javafx.event.ActionEvent) hasBody=true
Analyzing Admin.UserAccountController.loadUsers(java.util.ArrayList<java.util.ArrayList<java.lang.String>>, java.lang.String) hasBody=true
Analyzing Admin.UserAccountController.userDetail(int) hasBody=true
Analyzing Admin.UserAccountController.sendMsg1() hasBody=true
Analyzing Admin.UserAccountController.sendMsg2() hasBody=true
Analyzing Admin.UserAccountController.sendMsg3() hasBody=true
Analyzing Admin.UserAccountController.sendMsg4() hasBody=true
Analyzing Admin.UserAccountController.createUserDetailPagination(int) hasBody=true
Analyzing Admin.UserAccountController.fillUserDetail(java.util.ArrayList<java.util.ArrayList<java.lang.String>>) hasBody=true
Analyzing Admin.UserAccountController.closeViewAccounts(javafx.event.ActionEvent) hasBody=true
Analyzing Receptionist.AppointmentSuccessController.fillAppointmentData(java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.AppointmentSuccessController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing com.hms.hms_test_2.User.checkUser(java.lang.String, java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.saveLogin(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.saveLogout(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.sendMessage(java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.getMessages() hasBody=true
Analyzing com.hms.hms_test_2.User.deleteMessage(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.getProfilePic() hasBody=true
Analyzing com.hms.hms_test_2.User.getProfilePic(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.setProfilePic(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.getName(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.getUserNameAndID() hasBody=true
Analyzing com.hms.hms_test_2.User.getCurrentUserNameAndID() hasBody=true
Analyzing com.hms.hms_test_2.User.setMessageRead(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.User.getMessageSenderInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getProfileInfo() hasBody=true
Analyzing Receptionist.Receptionist.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDoctorTimeTable() hasBody=true
Analyzing Receptionist.Receptionist.getPatientInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.setPatientInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.updatePatientInfo(java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getLabTestInfo() hasBody=true
Analyzing Receptionist.Receptionist.getAppointments() hasBody=true
Analyzing Receptionist.Receptionist.makeAppointment(java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.makeLabAppointment(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.doctorAppointmentAvailableTime(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDoctorSummary() hasBody=true
Analyzing Receptionist.Receptionist.getCurrentlyAvailableDoctors() hasBody=true
Analyzing Receptionist.Receptionist.getConsultationAreas() hasBody=true
Analyzing Receptionist.Receptionist.getDoctor(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDoctors() hasBody=true
Analyzing Receptionist.Receptionist.getAvailableDays(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getLabAvailableDays(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getLabAvailableTimeSlots(java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getLabTestID(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getAvailableTime(java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.cancelAppointment(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getAppointmentDetails(java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.refund(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.cancelLabAppointment(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getAppointmentDetails(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDoctorDetails() hasBody=true
Analyzing Receptionist.Receptionist.getLabAppointmentDetails(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDocAppointments() hasBody=true
Analyzing Receptionist.Receptionist.getLabAppointments() hasBody=true
Analyzing Receptionist.Receptionist.getAllNames() hasBody=true
Analyzing Receptionist.PatientAccountSuccessController.fillPatientData(java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.PatientAccountSuccessController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing com.hms.hms_test_2.CurrentUserSummaryController.fillUser() hasBody=true
Analyzing com.hms.hms_test_2.CurrentUserSummaryController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing com.hms.hms_test_2.CurrentUserSummaryController.load() hasBody=true
Analyzing Cashier.Cashier.getProfileInfo() hasBody=true
Analyzing Cashier.Cashier.bill(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getAllNames() hasBody=true
Analyzing Cashier.Cashier.removeFromTempBill(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getBillInfo(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.refund(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getWaitingRefunds() hasBody=true
Analyzing Cashier.Cashier.makeRefund(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getNoOfRefunds() hasBody=true
Analyzing Cashier.Cashier.getPaymentHistory(int) hasBody=true
Analyzing Cashier.Cashier.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getPatientDetails(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getDoctorName(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getCancelledDocAppointments() hasBody=true
Analyzing Cashier.Cashier.getCancelledLabAppointments() hasBody=true
Analyzing Admin.UserAccount.setUser(java.lang.String) hasBody=true
Analyzing Admin.UserAccount.setLastLogin(java.lang.String) hasBody=true
Analyzing Admin.UserAccount.setOnline(java.lang.String) hasBody=true
Analyzing Admin.UserAccount.getUser() hasBody=true
Analyzing Admin.UserAccount.getLastLogin() hasBody=true
Analyzing Admin.UserAccount.getOnline() hasBody=true
Analyzing com.hms.hms_test_2.SuccessIndicatorController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Receptionist.Popover2Controller.fillDaysList(javafx.collections.ObservableList<java.lang.String>) hasBody=true
Analyzing Receptionist.Popover2Controller.closePopUp() hasBody=true
Analyzing com.hms.hms_test_2.MainApp.start(javafx.stage.Stage) hasBody=true
Analyzing com.hms.hms_test_2.MainApp.main(java.lang.String[]) hasBody=true
Analyzing Doctor.NewDoctorTimeSlotController.saveSuccessExit(javafx.event.ActionEvent) hasBody=true
Analyzing Doctor.NewDoctorTimeSlotController.closeEditor() hasBody=true
Analyzing Doctor.NewDoctorTimeSlotController.showSuccessIndicator() hasBody=true
Analyzing Doctor.NewDoctorTimeSlotController.save() hasBody=true
Analyzing Cashier.CashierController.fillLineChart() hasBody=true
Analyzing Cashier.CashierController.showRefundTable() hasBody=true
Analyzing Cashier.CashierController.loadNameList() hasBody=true
Analyzing Cashier.CashierController.convertToID() hasBody=true
Analyzing Cashier.CashierController.searchPatientBill() hasBody=true
Analyzing Cashier.CashierController.clearBill() hasBody=true
Analyzing Cashier.CashierController.issueBill() hasBody=true
Analyzing Cashier.CashierController.loadRefunds() hasBody=true
Analyzing Cashier.CashierController.fillPaymentHistory() hasBody=true
Analyzing Cashier.CashierController.getSelectedRow() hasBody=true
Analyzing Cashier.CashierController.createPage(int) hasBody=true
Analyzing Cashier.CashierController.createPagination(int) hasBody=true
Analyzing Cashier.CashierController.makeHistoryTable() hasBody=true
Analyzing Cashier.CashierController.editProfilePic() hasBody=true
Analyzing Cashier.CashierController.showUser() hasBody=true
Analyzing Cashier.CashierController.loadProfileImage() hasBody=true
Analyzing Cashier.CashierController.showAllMessages() hasBody=true
Analyzing Cashier.CashierController.loadProfileData() hasBody=true
Analyzing Cashier.CashierController.editBasicInfo() hasBody=true
Analyzing Cashier.CashierController.editUserInfo() hasBody=true
Analyzing Cashier.CashierController.editPasswordInfo() hasBody=true
Analyzing Cashier.CashierController.showSuccessIndicator() hasBody=true
Analyzing Cashier.CashierController.logout() hasBody=true
Analyzing Cashier.CashierController.setPaceholders() hasBody=true
Analyzing Cashier.CashierController.showPopup(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Cashier.CashierController.validatePatientID() hasBody=true
Analyzing Cashier.CashierController.validateEmail() hasBody=true
Analyzing Cashier.CashierController.validateMobile() hasBody=true
Analyzing Cashier.CashierController.validateNIC() hasBody=true
Analyzing Cashier.CashierController.validatePatientNIC() hasBody=true
Analyzing Cashier.CashierController.addFocusListener() hasBody=true
Analyzing Cashier.CashierController.showErrorPopup(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Doctor.DoctorController.setAppointments() hasBody=true
Analyzing Doctor.DoctorController.fillAreaChart() hasBody=true
Analyzing Doctor.DoctorController.setTodayAppointments() hasBody=true
Analyzing Doctor.DoctorController.searchNewPatientDoc(javafx.event.ActionEvent) hasBody=true
Analyzing Doctor.DoctorController.patientHistory(int) hasBody=true
Analyzing Doctor.DoctorController.createHistoryPagination(int) hasBody=true
Analyzing Doctor.DoctorController.fillPatientHistory(java.util.ArrayList<java.util.ArrayList<java.lang.String>>) hasBody=true
Analyzing Doctor.DoctorController.removeAllergy() hasBody=true
Analyzing Doctor.DoctorController.patientAllergies(int) hasBody=true
Analyzing Doctor.DoctorController.createAllergiesPagination(int) hasBody=true
Analyzing Doctor.DoctorController.fillPatientAllergies(java.util.ArrayList<java.util.ArrayList<java.lang.String>>) hasBody=true
Analyzing Doctor.DoctorController.addPatientAllergies() hasBody=true
Analyzing Doctor.DoctorController.savePatientAllergies() hasBody=true
Analyzing Doctor.DoctorController.searchPatientTestResults() hasBody=true
Analyzing Doctor.DoctorController.clearPatientTestResults() hasBody=true
Analyzing Doctor.DoctorController.loadDrugList() hasBody=true
Analyzing Doctor.DoctorController.loadTestList() hasBody=true
Analyzing Doctor.DoctorController.loadNameList() hasBody=true
Analyzing Doctor.DoctorController.convertToID() hasBody=true
Analyzing Doctor.DoctorController.checkForBrands() hasBody=true
Analyzing Doctor.DoctorController.addDrugtoPresc() hasBody=true
Analyzing Doctor.DoctorController.addTesttoPresc() hasBody=true
Analyzing Doctor.DoctorController.removeDrugPresc() hasBody=true
Analyzing Doctor.DoctorController.removeTestPresc() hasBody=true
Analyzing Doctor.DoctorController.clearPrescription() hasBody=true
Analyzing Doctor.DoctorController.clearPatient() hasBody=true
Analyzing Doctor.DoctorController.savePatientDiagnosis(javafx.event.ActionEvent) hasBody=true
Analyzing Doctor.DoctorController.showUser() hasBody=true
Analyzing Doctor.DoctorController.loadProfileData() hasBody=true
Analyzing Doctor.DoctorController.createPage(int) hasBody=true
Analyzing Doctor.DoctorController.createPagination(int) hasBody=true
Analyzing Doctor.DoctorController.MakeAvailabilityTable() hasBody=true
Analyzing Doctor.DoctorController.editBasicInfo() hasBody=true
Analyzing Doctor.DoctorController.showSuccessIndicator() hasBody=true
Analyzing Doctor.DoctorController.addTimeSlot() hasBody=true
Analyzing Doctor.DoctorController.removeTimeSlot() hasBody=true
Analyzing Doctor.DoctorController.editProfilePic() hasBody=true
Analyzing Doctor.DoctorController.loadProfileImage() hasBody=true
Analyzing Doctor.DoctorController.showAllMessages() hasBody=true
Analyzing Doctor.DoctorController.waitFor() hasBody=true
Analyzing Doctor.DoctorController.editDoctorInfo() hasBody=true
Analyzing Doctor.DoctorController.editUserInfo() hasBody=true
Analyzing Doctor.DoctorController.editPasswordInfo() hasBody=true
Analyzing Doctor.DoctorController.logout() hasBody=true
Analyzing Doctor.DoctorController.setPaceholders() hasBody=true
Analyzing Doctor.DoctorController.showPopup(java.lang.String, javafx.scene.control.TextField) hasBody=true
Analyzing Doctor.DoctorController.checkAmount() hasBody=true
Analyzing Doctor.DoctorController.validatePatientID() hasBody=true
Analyzing Doctor.DoctorController.validateEmail() hasBody=true
Analyzing Doctor.DoctorController.validateMobile() hasBody=true
Analyzing Doctor.DoctorController.validateNIC() hasBody=true
Analyzing Doctor.DoctorController.validatePatientNIC() hasBody=true
Analyzing Doctor.DoctorController.addFocusListener() hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.connect(java.lang.String, java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.close() hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.createDatabase(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.showDatabases() hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.useDatabse(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.createTable(java.lang.String, java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.showTables() hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.showTableMetaData(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.addTableRow(java.lang.String, java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.deleteTableRow(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.deleteTableRow(java.lang.String, java.lang.String, int) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.showTableData(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.showTableData(java.lang.String, java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.showTableData(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.customSelection(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.customInsertion(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.customDeletion(java.lang.String) hasBody=true
Analyzing com.hms.hms_test_2.DatabaseOperator.deleteTable(java.lang.String) hasBody=true
Finished
* Effectual method Doctor.Doctor.doctorTimeTableAddSlot(java.lang.String, java.lang.String)
* Effectual method Doctor.Doctor.prescribe(java.lang.String, java.lang.String, java.lang.String)
* Effectual method Doctor.Doctor.removeDoctorTime(java.lang.String, java.lang.String)
* Effectual method Doctor.Doctor.removeDoctorTime(java.lang.String)
* Effectual method Doctor.NewDoctorTimeSlotController.save()
* Effectual method Doctor.DoctorController.savePatientDiagnosis(javafx.event.ActionEvent)
* Effectual method Doctor.DoctorController.removeTimeSlot()
* Effectual method Doctor.Doctor.updateProfileInfo(java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free info
after introduce null
[DBG] Run path 4133: [OutEdge(next=4054, label=), OutEdge(next=4066, label=), OutEdge(next=4073, label=), OutEdge(next=4080, label=), OutEdge(next=4093, label=), OutEdge(next=4100, label=), OutEdge(next=4107, label=), OutEdge(next=4114, label=), OutEdge(next=4109, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[1]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.slmcRegNo
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = (SELECT user_id FROM doctor WHERE slmc_reg_no = ')) (unknown from this.slmcRegNo)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} '));))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v1]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = (SELECT user_id FROM doctor WHERE slmc_reg_no = '[[v2|this.slmcRegNo]]'));, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(db doctor.user_id {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})})})
* Effectual method Doctor.Doctor.updateDoctorInfo(java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free info
after introduce null
[DBG] Run path 4233: [OutEdge(next=4154, label=), OutEdge(next=4166, label=), OutEdge(next=4173, label=), OutEdge(next=4180, label=), OutEdge(next=4193, label=), OutEdge(next=4200, label=), OutEdge(next=4207, label=), OutEdge(next=4214, label=), OutEdge(next=4209, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.slmcRegNo
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE doctor SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE slmc_reg_no = ')) (unknown from this.slmcRegNo)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE doctor SET [[v3]] WHERE slmc_reg_no = '[[v4|this.slmcRegNo]]';, values={})
[DBG] add atom (UPDATE doctor {doctor.education=(free freshEducation), doctor.training=(free freshTraining), doctor.experienced_areas=(free freshExperienced_areas), doctor.experience=(free freshExperience), doctor.achievements=(free freshAchievements), doctor.channelling_fee=(free freshChannelling_fee)} {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})
* Effectual method Doctor.Doctor.updateAccountInfo(java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free info
after introduce null
[DBG] Run path 4340: [OutEdge(next=4261, label=), OutEdge(next=4273, label=), OutEdge(next=4280, label=), OutEdge(next=4287, label=), OutEdge(next=4300, label=), OutEdge(next=4307, label=), OutEdge(next=4314, label=), OutEdge(next=4321, label=), OutEdge(next=4316, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.slmcRegNo
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE user_id = (SELECT user_id FROM doctor WHERE slmc_reg_no = ')) (unknown from this.slmcRegNo)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v5]] WHERE user_id = (SELECT user_id FROM doctor WHERE slmc_reg_no = '[[v6|this.slmcRegNo]]');, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(db doctor.user_id {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})})
* Effectual method Doctor.Doctor.diagnose(java.lang.String, java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free diagnostic
-free patientID
after introduce null
[DBG] Run path 5614: [OutEdge(next=5458, label=), OutEdge(next=5470, label=), OutEdge(next=5465, label=), OutEdge(next=5489, label=), OutEdge(next=5496, label=), OutEdge(next=5503, label=), OutEdge(next=5510, label=), OutEdge(next=5523, label=), OutEdge(next=5524, label=!(i < historyID.length())), OutEdge(next=5525, label=), OutEdge(next=5567, label=), OutEdge(next=5568, label=!(tmpID2.length() < 4)), OutEdge(next=5569, label=), OutEdge(next=5593, label=), OutEdge(next=5600, label=), OutEdge(next=5607, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT history_id FROM medical_history WHERE history_id = (SELECT MAX(history_id) FROM medical_history);)
[WARN] scope is complex: super.dbOperator.customSelection(sql).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT history_id FROM medical_history WHERE history_id = (SELECT MAX(history_id) FROM medical_history);, values={})
customSelection: (resultset SELECT history_id FROM medical_history WHERE history_id = (SELECT history_id FROM medical_history))
[DBG] Var historyID = (db medical_history.history_id {medical_history.history_id=(db medical_history.history_id {})})
[DBG] Var tmpID = (invoke (db medical_history.history_id {medical_history.history_id=(db medical_history.history_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 5524 at !(i < historyID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db medical_history.history_id {medical_history.history_id=(db medical_history.history_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db medical_history.history_id {medical_history.history_id=(db medical_history.history_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 5568 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[WARN] scope is complex: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
[WARN] scope is complex: Calendar.getInstance().getTime()
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.slmcRegNo
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO medical_history VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} his) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (unknown from this.slmcRegNo)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free diagnostic)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ')))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO medical_history VALUES ('his[[tmpID2]]','[[patientID]]','[[v7|this.slmcRegNo]]','[[v8]]','[[diagnostic]]'), values={})
[DBG] add atom (INSERT medical_history {medical_history.history_id=(free freshTmpID2), medical_history.patient_id=(free patientID), medical_history.doctor_id=(free freshThis_slmcRegNo), medical_history.date=(free freshV8), medical_history.history=(free diagnostic)})
* Effectual method Doctor.Doctor.bill(java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free billInfo
-free patientID
-free labFee
after introduce null
[DBG] Run path 5713: [OutEdge(next=5642, label=), OutEdge(next=5654, label=), OutEdge(next=5649, label=), OutEdge(next=5673, label=), OutEdge(next=5680, label=), OutEdge(next=5675, label=), OutEdge(next=5699, label=), OutEdge(next=5706, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql3 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var tmpID2 = (null from tmpID2)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]')
[DBG] Var sql = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET laboratory_fee = ') (free labFee)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = '[[labFee]]' WHERE tmp_bill_id = '[[?9]]';, values={9=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(free labFee)} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free billInfo
-free patientID
-free labFee
after introduce null
[DBG] Run path 5977: [OutEdge(next=5642, label=), OutEdge(next=5654, label=), OutEdge(next=5649, label=), OutEdge(next=5673, label=), OutEdge(next=5680, label=), OutEdge(next=5675, label=), OutEdge(next=5699, label=), OutEdge(next=5706, label=), OutEdge(next=5713, label=ex(java.lang.ClassNotFoundException super.dbOperator.customInsertion(sql))), OutEdge(next=5690, label=catch(java.lang.Exception e)), OutEdge(next=5714, label=), OutEdge(next=5726, label=), OutEdge(next=5733, label=), OutEdge(next=5740, label=), OutEdge(next=5747, label=), OutEdge(next=5760, label=), OutEdge(next=5761, label=!(i < billID.length())), OutEdge(next=5762, label=), OutEdge(next=5804, label=), OutEdge(next=5805, label=!(tmpID2.length() < 4)), OutEdge(next=5806, label=), OutEdge(next=5830, label=), OutEdge(next=5837, label=), OutEdge(next=5844, label=), OutEdge(next=5851, label=), OutEdge(next=5858, label=), OutEdge(next=5865, label=!(index > 0)), OutEdge(next=5866, label=), OutEdge(next=5897, label=), OutEdge(next=5898, label=!(index < 3)), OutEdge(next=5899, label=), OutEdge(next=5923, label=), OutEdge(next=5924, label=!(index < 3)), OutEdge(next=5925, label=), OutEdge(next=5949, label=), OutEdge(next=5956, label=), OutEdge(next=5963, label=), OutEdge(next=5970, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql3 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var tmpID2 = (null from tmpID2)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]')
[DBG] Var sql = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET laboratory_fee = ') (free labFee)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = '[[labFee]]' WHERE tmp_bill_id = '[[?10]]';, values={10=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(free labFee)} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[WARN] unknown label: ex(java.lang.ClassNotFoundException super.dbOperator.customInsertion(sql)), assuming to be true
[WARN] unknown label: catch(java.lang.Exception e), assuming to be true
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT tmp_bill_id FROM tmp_bill))
[DBG] Var billID = (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})})
[DBG] Var tmpID = (invoke (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 5761 at !(i < billID.length())
[loop] new loop 5805 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free billInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO tmp_bill () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO tmp_bill () VALUES ();, values={})
[DBG] add atom (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})
* Effectual method Doctor.Doctor.allergies(java.lang.String, java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free allergies
-free patientID
after introduce null
[DBG] Run path 6109: [OutEdge(next=6071, label=), OutEdge(next=6083, label=), OutEdge(next=6078, label=), OutEdge(next=6102, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql0 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = ') (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]')
[DBG] Var data = (resultset SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]')
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free allergies
-free patientID
after introduce null
[DBG] Run path 6137: [OutEdge(next=6071, label=), OutEdge(next=6083, label=), OutEdge(next=6078, label=), OutEdge(next=6102, label=), OutEdge(next=6109, label=), OutEdge(next=6116, label=), OutEdge(next=6123, label=), OutEdge(next=6130, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql0 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = ') (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]')
[DBG] Var data = (resultset SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var currentAllergies = (db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE patient SET drug_allergies_and_reactions = ') (db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE patient_id = ')) (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE patient SET drug_allergies_and_reactions = '[[?11]]' WHERE patient_id = '[[patientID]]';, values={11=(db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})})
[DBG] add atom (UPDATE patient {patient.drug_allergies_and_reactions=(db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})} {patient.patient_id=(free patientID)})
* Effectual method Pharmacist.Pharmacist.addNewDrug(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free drugInfo
after introduce null
[DBG] Run path 7938: [OutEdge(next=7656, label=), OutEdge(next=7668, label=), OutEdge(next=7663, label=), OutEdge(next=7687, label=), OutEdge(next=7694, label=), OutEdge(next=7701, label=), OutEdge(next=7708, label=), OutEdge(next=7721, label=), OutEdge(next=7722, label=!(i < drugID.length())), OutEdge(next=7723, label=), OutEdge(next=7765, label=), OutEdge(next=7766, label=!(tmpID2.length() < 4)), OutEdge(next=7767, label=), OutEdge(next=7791, label=), OutEdge(next=7798, label=), OutEdge(next=7805, label=), OutEdge(next=7812, label=), OutEdge(next=7819, label=), OutEdge(next=7826, label=!(index > 0)), OutEdge(next=7827, label=), OutEdge(next=7858, label=), OutEdge(next=7859, label=!(index < 3)), OutEdge(next=7860, label=), OutEdge(next=7884, label=), OutEdge(next=7885, label=!(index < 3)), OutEdge(next=7886, label=), OutEdge(next=7910, label=), OutEdge(next=7917, label=), OutEdge(next=7924, label=), OutEdge(next=7931, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT drug_id FROM drug WHERE drug_id = (SELECT MAX(drug_id) FROM drug);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT drug_id FROM drug WHERE drug_id = (SELECT MAX(drug_id) FROM drug);, values={})
customSelection: (resultset SELECT drug_id FROM drug WHERE drug_id = (SELECT drug_id FROM drug))
[DBG] Var drugID = (db drug.drug_id {drug.drug_id=(db drug.drug_id {})})
[DBG] Var tmpID = (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 1)
[loop] new loop 7722 at !(i < drugID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 1), (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 7766 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free drugInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO drug () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO drug () VALUES ();, values={})
[DBG] add atom (INSERT drug {drug.drug_id=(free freshInsertValue), drug.drug_name=(free freshInsertValue1), drug.dangerous_drug=(free freshInsertValue2)})
* Effectual method Pharmacist.Pharmacist.addNewStock(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free stockInfo
after introduce null
[DBG] Run path 8255: [OutEdge(next=7966, label=), OutEdge(next=7978, label=), OutEdge(next=7973, label=), OutEdge(next=7997, label=), OutEdge(next=8004, label=), OutEdge(next=8011, label=), OutEdge(next=8018, label=), OutEdge(next=8031, label=), OutEdge(next=8032, label=!(i < stockID.length())), OutEdge(next=8033, label=), OutEdge(next=8075, label=), OutEdge(next=8076, label=!(tmpID2.length() < 4)), OutEdge(next=8077, label=), OutEdge(next=8101, label=), OutEdge(next=8108, label=), OutEdge(next=8115, label=), OutEdge(next=8122, label=), OutEdge(next=8129, label=), OutEdge(next=8136, label=!(index > 0)), OutEdge(next=8137, label=), OutEdge(next=8168, label=), OutEdge(next=8169, label=!((index == 2) || (index == 5) || (index == 6))), OutEdge(next=8170, label=), OutEdge(next=8194, label=), OutEdge(next=8195, label=!((index == 2) || (index == 5) || (index == 6))), OutEdge(next=8196, label=), OutEdge(next=8220, label=), OutEdge(next=8227, label=), OutEdge(next=8234, label=), OutEdge(next=8241, label=), OutEdge(next=8248, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT MAX(stock_id) FROM pharmacy_stock);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT MAX(stock_id) FROM pharmacy_stock);, values={})
customSelection: (resultset SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT stock_id FROM pharmacy_stock))
[DBG] Var stockID = (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})})
[DBG] Var tmpID = (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 8032 at !(i < stockID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 8076 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free stockInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 2)
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 5)
[WARN] Short-circuit semantics may be ignored
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 6)
[WARN] Short-circuit semantics may be ignored
[COND] condition: (index == 2) || (index == 5) || (index == 6)
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 2)
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 5)
[WARN] Short-circuit semantics may be ignored
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 6)
[WARN] Short-circuit semantics may be ignored
[COND] condition: (index == 2) || (index == 5) || (index == 6)
[WARN] unary operator POSTFIX_INCREMENT unsupported
[WARN] scope is complex: new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyyMMdd")
[WARN] scope is complex: Calendar.getInstance().getTime()
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyyMMdd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])])
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO pharmacy_stock () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO pharmacy_stock () VALUES ();, values={})
[DBG] add atom (INSERT pharmacy_stock {pharmacy_stock.stock_id=(free freshInsertValue), pharmacy_stock.drug_id=(free freshInsertValue1), pharmacy_stock.brand_id=(free freshInsertValue2), pharmacy_stock.stock=(free freshInsertValue3), pharmacy_stock.remaining_quantity=(free freshInsertValue4), pharmacy_stock.manufac_date=(free freshInsertValue5), pharmacy_stock.exp_date=(free freshInsertValue6), pharmacy_stock.supplier_id=(free freshInsertValue7), pharmacy_stock.date=(free freshInsertValue8)})
* Effectual method Pharmacist.Pharmacist.reduceStock(int, java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free qt
-free stkID
after introduce null
[DBG] Run path 9811: [OutEdge(next=9773, label=), OutEdge(next=9785, label=), OutEdge(next=9792, label=), OutEdge(next=9787, label=)]
[DBG] Var sql = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE pharmacy_stock SET remaining_quantity = remaining_quantity -) (free qt)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  WHERE stock_id = ')) (free stkID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE pharmacy_stock SET remaining_quantity = remaining_quantity -[[qt]] WHERE stock_id = '[[stkID]]';, values={})
[DBG] add atom (UPDATE pharmacy_stock {pharmacy_stock.remaining_quantity=(- (db pharmacy_stock.remaining_quantity null) (free qt))} {pharmacy_stock.stock_id=(free stkID)})
* Effectual method Pharmacist.Pharmacist.addNewDrug2(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free genName
after introduce null
[DBG] Run path 10100: [OutEdge(next=9912, label=), OutEdge(next=9924, label=), OutEdge(next=9931, label=), OutEdge(next=9926, label=), OutEdge(next=9950, label=), OutEdge(next=9957, label=), OutEdge(next=9964, label=), OutEdge(next=9971, label=), OutEdge(next=9984, label=), OutEdge(next=9985, label=!(i < drugID.length())), OutEdge(next=9986, label=), OutEdge(next=10028, label=), OutEdge(next=10029, label=!(tmpID2.length() < 4)), OutEdge(next=10030, label=), OutEdge(next=10054, label=), OutEdge(next=10061, label=), OutEdge(next=9933, label=), OutEdge(next=10074, label=), OutEdge(next=10081, label=), OutEdge(next=10076, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT drug_id FROM drug WHERE drug_id = (SELECT MAX(drug_id) FROM drug);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT drug_id FROM drug WHERE drug_id = (SELECT MAX(drug_id) FROM drug);, values={})
customSelection: (resultset SELECT drug_id FROM drug WHERE drug_id = (SELECT drug_id FROM drug))
[DBG] Var drugID = (db drug.drug_id {drug.drug_id=(db drug.drug_id {})})
[DBG] Var tmpID = (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 1)
[loop] new loop 9985 at !(i < drugID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 1), (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 10029 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO drug VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} d) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free genName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',0);))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO drug VALUES ('d[[tmpID2]]','[[genName]]',0);, values={})
[DBG] add atom (INSERT drug {drug.drug_id=(free freshTmpID2), drug.drug_name=(free genName), drug.dangerous_drug=(data null 0)})
* Effectual method Pharmacist.Pharmacist.addNewBrand(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free brandName
-free genName
-free type
-free unit
-free price
after introduce null
[DBG] Run path 10389: [OutEdge(next=10201, label=), OutEdge(next=10213, label=), OutEdge(next=10220, label=), OutEdge(next=10215, label=), OutEdge(next=10239, label=), OutEdge(next=10246, label=), OutEdge(next=10253, label=), OutEdge(next=10260, label=), OutEdge(next=10273, label=), OutEdge(next=10274, label=!(i < brandID.length())), OutEdge(next=10275, label=), OutEdge(next=10317, label=), OutEdge(next=10318, label=!(tmpID2.length() < 4)), OutEdge(next=10319, label=), OutEdge(next=10343, label=), OutEdge(next=10350, label=), OutEdge(next=10222, label=), OutEdge(next=10363, label=), OutEdge(next=10370, label=), OutEdge(next=10365, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT brand_id FROM drug_brand_names WHERE brand_id = (SELECT MAX(brand_id) FROM drug_brand_names);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT brand_id FROM drug_brand_names WHERE brand_id = (SELECT MAX(brand_id) FROM drug_brand_names);, values={})
customSelection: (resultset SELECT brand_id FROM drug_brand_names WHERE brand_id = (SELECT brand_id FROM drug_brand_names))
[DBG] Var brandID = (db drug_brand_names.brand_id {drug_brand_names.brand_id=(db drug_brand_names.brand_id {})})
[DBG] Var tmpID = (invoke (db drug_brand_names.brand_id {drug_brand_names.brand_id=(db drug_brand_names.brand_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 2)
[loop] new loop 10274 at !(i < brandID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db drug_brand_names.brand_id {drug_brand_names.brand_id=(db drug_brand_names.brand_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 2), (invoke (db drug_brand_names.brand_id {drug_brand_names.brand_id=(db drug_brand_names.brand_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 10318 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO drug_brand_names VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} br) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free brandName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free genName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free type)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free unit)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free price)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO drug_brand_names VALUES ('br[[tmpID2]]','[[brandName]]','[[genName]]','[[type]]','[[unit]]','[[price]]');, values={})
[DBG] add atom (INSERT drug_brand_names {drug_brand_names.brand_id=(free freshTmpID2), drug_brand_names.brand_name=(free brandName), drug_brand_names.generic_name=(free genName), drug_brand_names.drug_type=(free type), drug_brand_names.drug_unit=(free unit), drug_brand_names.unit_price=(free price)})
* Effectual method Pharmacist.Pharmacist.addNewSupplier(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free suppName
after introduce null
[DBG] Run path 10678: [OutEdge(next=10490, label=), OutEdge(next=10502, label=), OutEdge(next=10509, label=), OutEdge(next=10504, label=), OutEdge(next=10528, label=), OutEdge(next=10535, label=), OutEdge(next=10542, label=), OutEdge(next=10549, label=), OutEdge(next=10562, label=), OutEdge(next=10563, label=!(i < drugID.length())), OutEdge(next=10564, label=), OutEdge(next=10606, label=), OutEdge(next=10607, label=!(tmpID2.length() < 4)), OutEdge(next=10608, label=), OutEdge(next=10632, label=), OutEdge(next=10639, label=), OutEdge(next=10511, label=), OutEdge(next=10652, label=), OutEdge(next=10659, label=), OutEdge(next=10654, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT supplier_id FROM suppliers WHERE supplier_id = (SELECT MAX(supplier_id) FROM suppliers);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT supplier_id FROM suppliers WHERE supplier_id = (SELECT MAX(supplier_id) FROM suppliers);, values={})
customSelection: (resultset SELECT supplier_id FROM suppliers WHERE supplier_id = (SELECT supplier_id FROM suppliers))
[DBG] Var drugID = (db suppliers.supplier_id {suppliers.supplier_id=(db suppliers.supplier_id {})})
[DBG] Var tmpID = (invoke (db suppliers.supplier_id {suppliers.supplier_id=(db suppliers.supplier_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 10563 at !(i < drugID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db suppliers.supplier_id {suppliers.supplier_id=(db suppliers.supplier_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db suppliers.supplier_id {suppliers.supplier_id=(db suppliers.supplier_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 10607 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO suppliers VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} sup) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free suppName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO suppliers VALUES ('sup[[tmpID2]]','[[suppName]]');, values={})
[DBG] add atom (INSERT suppliers {suppliers.supplier_id=(free freshTmpID2), suppliers.supplier_name=(free suppName)})
* Effectual method Pharmacist.Pharmacist.updateStock(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free drugID
-free brandID
-free stock
-free manuDate
-free expDate
-free suppID
-free date
after introduce null
[DBG] Run path 10887: [OutEdge(next=10699, label=), OutEdge(next=10711, label=), OutEdge(next=10718, label=), OutEdge(next=10713, label=), OutEdge(next=10737, label=), OutEdge(next=10744, label=), OutEdge(next=10751, label=), OutEdge(next=10758, label=), OutEdge(next=10771, label=), OutEdge(next=10772, label=!(i < stockID.length())), OutEdge(next=10773, label=), OutEdge(next=10815, label=), OutEdge(next=10816, label=!(tmpID2.length() < 4)), OutEdge(next=10817, label=), OutEdge(next=10841, label=), OutEdge(next=10848, label=), OutEdge(next=10720, label=), OutEdge(next=10861, label=), OutEdge(next=10868, label=), OutEdge(next=10863, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT MAX(stock_id) FROM pharmacy_stock);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT MAX(stock_id) FROM pharmacy_stock);, values={})
customSelection: (resultset SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT stock_id FROM pharmacy_stock))
[DBG] Var stockID = (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})})
[DBG] Var tmpID = (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 10772 at !(i < stockID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 10816 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO pharmacy_stock VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} stk) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free drugID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free brandID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free stock)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free stock)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free manuDate)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free expDate)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free suppID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free date)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ')) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO pharmacy_stock VALUES ('stk[[tmpID2]]','[[drugID]]','[[brandID]]','[[stock]]','[[stock]]','[[manuDate]]','[[expDate]]','[[suppID]]','[[date]]');, values={})
[DBG] add atom (INSERT pharmacy_stock {pharmacy_stock.stock_id=(free freshTmpID2), pharmacy_stock.drug_id=(free drugID), pharmacy_stock.brand_id=(free brandID), pharmacy_stock.stock=(free stock), pharmacy_stock.remaining_quantity=(free stock), pharmacy_stock.manufac_date=(free manuDate), pharmacy_stock.exp_date=(free expDate), pharmacy_stock.supplier_id=(free suppID), pharmacy_stock.date=(free date)})
* Effectual method Pharmacist.Pharmacist.updateProfileInfo(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free info
after introduce null
[DBG] Run path 10987: [OutEdge(next=10908, label=), OutEdge(next=10920, label=), OutEdge(next=10927, label=), OutEdge(next=10934, label=), OutEdge(next=10947, label=), OutEdge(next=10954, label=), OutEdge(next=10961, label=), OutEdge(next=10968, label=), OutEdge(next=10963, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[1]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.username
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE person_id = (SELECT person_id FROM sys_user WHERE user_name = ')) (unknown from super.username)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v12]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_name = '[[v13|super.username]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_name=(free freshSuper_username)})})
* Effectual method Pharmacist.Pharmacist.updatePharmacistInfo(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free info
after introduce null
[DBG] Run path 11094: [OutEdge(next=11015, label=), OutEdge(next=11027, label=), OutEdge(next=11034, label=), OutEdge(next=11041, label=), OutEdge(next=11054, label=), OutEdge(next=11061, label=), OutEdge(next=11068, label=), OutEdge(next=11075, label=), OutEdge(next=11070, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.pharmacistID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE pharmacist SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE pharmacist_id = ')) (unknown from this.pharmacistID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE pharmacist SET [[v14]] WHERE pharmacist_id = '[[v15|this.pharmacistID]]';, values={})
[DBG] add atom (UPDATE pharmacist {pharmacist.education=(free freshEducation), pharmacist.training=(free freshTraining), pharmacist.experience=(free freshExperience), pharmacist.achievements=(free freshAchievements)} {pharmacist.pharmacist_id=(free freshThis_pharmacistID)})
* Effectual method Pharmacist.Pharmacist.updateAccountInfo(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free info
after introduce null
[DBG] Run path 11201: [OutEdge(next=11122, label=), OutEdge(next=11134, label=), OutEdge(next=11141, label=), OutEdge(next=11148, label=), OutEdge(next=11161, label=), OutEdge(next=11168, label=), OutEdge(next=11175, label=), OutEdge(next=11182, label=), OutEdge(next=11177, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE user_id = ')) (unknown from this.userID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v16]] WHERE user_id = '[[v17|this.userID]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method Pharmacist.Pharmacist.bill(java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free billInfo
-free patientID
-free pharmacyFee
after introduce null
[DBG] Run path 11300: [OutEdge(next=11229, label=), OutEdge(next=11241, label=), OutEdge(next=11236, label=), OutEdge(next=11260, label=), OutEdge(next=11267, label=), OutEdge(next=11262, label=), OutEdge(next=11286, label=), OutEdge(next=11293, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql3 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var tmpID2 = (null from tmpID2)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]')
[DBG] Var sql = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET pharmacy_fee = ') (free pharmacyFee)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET pharmacy_fee = '[[pharmacyFee]]' WHERE tmp_bill_id = '[[?18]]';, values={18=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.pharmacy_fee=(free pharmacyFee)} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free billInfo
-free patientID
-free pharmacyFee
after introduce null
[DBG] Run path 11589: [OutEdge(next=11229, label=), OutEdge(next=11241, label=), OutEdge(next=11236, label=), OutEdge(next=11260, label=), OutEdge(next=11267, label=), OutEdge(next=11262, label=), OutEdge(next=11286, label=), OutEdge(next=11293, label=), OutEdge(next=11300, label=ex(java.lang.ClassNotFoundException super.dbOperator.customInsertion(sql))), OutEdge(next=11277, label=catch(java.lang.Exception e)), OutEdge(next=11301, label=), OutEdge(next=11325, label=), OutEdge(next=11332, label=), OutEdge(next=11339, label=), OutEdge(next=11346, label=), OutEdge(next=11359, label=), OutEdge(next=11360, label=!(i < billID.length())), OutEdge(next=11361, label=), OutEdge(next=11403, label=), OutEdge(next=11404, label=!(tmpID2.length() < 4)), OutEdge(next=11405, label=), OutEdge(next=11429, label=), OutEdge(next=11308, label=), OutEdge(next=11449, label=), OutEdge(next=11456, label=), OutEdge(next=11463, label=), OutEdge(next=11470, label=), OutEdge(next=11477, label=!(index > 0)), OutEdge(next=11478, label=), OutEdge(next=11509, label=), OutEdge(next=11510, label=!(index < 3)), OutEdge(next=11511, label=), OutEdge(next=11535, label=), OutEdge(next=11536, label=!(index < 3)), OutEdge(next=11537, label=), OutEdge(next=11561, label=), OutEdge(next=11568, label=), OutEdge(next=11575, label=), OutEdge(next=11582, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql3 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var tmpID2 = (null from tmpID2)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]')
[DBG] Var sql = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET pharmacy_fee = ') (free pharmacyFee)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET pharmacy_fee = '[[pharmacyFee]]' WHERE tmp_bill_id = '[[?19]]';, values={19=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.pharmacy_fee=(free pharmacyFee)} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[WARN] unknown label: ex(java.lang.ClassNotFoundException super.dbOperator.customInsertion(sql)), assuming to be true
[WARN] unknown label: catch(java.lang.Exception e), assuming to be true
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT tmp_bill_id FROM tmp_bill))
[DBG] Var billID = (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})})
[DBG] Var tmpID = (invoke (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 11360 at !(i < billID.length())
[loop] new loop 11404 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free billInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO tmp_bill () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO tmp_bill () VALUES ();, values={})
[DBG] add atom (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})
* Effectual method LabAssistant.LabAssistant.updateProfileInfo(java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free info
after introduce null
[DBG] Run path 25491: [OutEdge(next=25412, label=), OutEdge(next=25424, label=), OutEdge(next=25431, label=), OutEdge(next=25438, label=), OutEdge(next=25451, label=), OutEdge(next=25458, label=), OutEdge(next=25465, label=), OutEdge(next=25472, label=), OutEdge(next=25467, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[1]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.username
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE person_id = (SELECT person_id FROM sys_user WHERE user_name = ')) (unknown from super.username)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v20]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_name = '[[v21|super.username]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_name=(free freshSuper_username)})})
* Effectual method LabAssistant.LabAssistant.updateLabAssistantInfo(java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free info
after introduce null
[DBG] Run path 25598: [OutEdge(next=25519, label=), OutEdge(next=25531, label=), OutEdge(next=25538, label=), OutEdge(next=25545, label=), OutEdge(next=25558, label=), OutEdge(next=25565, label=), OutEdge(next=25572, label=), OutEdge(next=25579, label=), OutEdge(next=25574, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.labAssistantID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_assistant SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE lab_assistant_id = ')) (unknown from this.labAssistantID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_assistant SET [[v22]] WHERE lab_assistant_id = '[[v23|this.labAssistantID]]';, values={})
[DBG] add atom (UPDATE lab_assistant {lab_assistant.education=(free freshEducation), lab_assistant.training=(free freshTraining), lab_assistant.experience=(free freshExperience), lab_assistant.achievements=(free freshAchievements)} {lab_assistant.lab_assistant_id=(free freshThis_labAssistantID)})
* Effectual method LabAssistant.LabAssistant.updateAccountInfo(java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free info
after introduce null
[DBG] Run path 25705: [OutEdge(next=25626, label=), OutEdge(next=25638, label=), OutEdge(next=25645, label=), OutEdge(next=25652, label=), OutEdge(next=25665, label=), OutEdge(next=25672, label=), OutEdge(next=25679, label=), OutEdge(next=25686, label=), OutEdge(next=25681, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE user_id = ')) (unknown from this.userID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v24]] WHERE user_id = '[[v25|this.userID]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method LabAssistant.LabAssistant.UrineFullReport(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id
-free appearance
-free sgRefractometer
-free ph
-free protein
-free glucose
-free ketoneBodies
-free bilirubin
-free urobilirubin
-free contrifugedDepositsphaseContrastMicroscopy
-free pusCells
-free redCells
-free epithelialCells
-free casts
-free cristals
after introduce null
[DBG] Run path 26682: [OutEdge(next=26494, label=), OutEdge(next=26506, label=), OutEdge(next=26513, label=), OutEdge(next=26508, label=), OutEdge(next=26532, label=), OutEdge(next=26539, label=), OutEdge(next=26546, label=), OutEdge(next=26553, label=), OutEdge(next=26566, label=), OutEdge(next=26567, label=!(i < repID.length())), OutEdge(next=26568, label=), OutEdge(next=26610, label=), OutEdge(next=26611, label=!(tmpID2.length() < 4)), OutEdge(next=26612, label=), OutEdge(next=26636, label=), OutEdge(next=26643, label=), OutEdge(next=26515, label=), OutEdge(next=26663, label=), OutEdge(next=26658, label=)]
[DBG] Var t = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tst_ur_id FROM UrineFullReport WHERE tst_ur_id = (SELECT MAX(tst_ur_id) FROM UrineFullReport);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_ur_id FROM UrineFullReport WHERE tst_ur_id = (SELECT MAX(tst_ur_id) FROM UrineFullReport);, values={})
customSelection: (resultset SELECT tst_ur_id FROM UrineFullReport WHERE tst_ur_id = (SELECT tst_ur_id FROM UrineFullReport))
[DBG] Var repID = (db UrineFullReport.tst_ur_id {UrineFullReport.tst_ur_id=(db UrineFullReport.tst_ur_id {})})
[DBG] Var tmpID = (invoke (db UrineFullReport.tst_ur_id {UrineFullReport.tst_ur_id=(db UrineFullReport.tst_ur_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 0)
[loop] new loop 26567 at !(i < repID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db UrineFullReport.tst_ur_id {UrineFullReport.tst_ur_id=(db UrineFullReport.tst_ur_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 2), (invoke (db UrineFullReport.tst_ur_id {UrineFullReport.tst_ur_id=(db UrineFullReport.tst_ur_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 26611 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO UrineFullReport(tst_ur_id, appointment_id, appearance,sgRefractometer,ph,protein,glucose,ketoneBodies,bilirubin,urobilirubin,contrifugedDepositsphaseContrastMicroscopy,pusCells,redCells,epithelialCells,casts,cristals,date) VALUES(') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ur) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free appointment_id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free appearance)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free sgRefractometer)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free ph)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free protein)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free glucose)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free ketoneBodies)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free bilirubin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free urobilirubin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free contrifugedDepositsphaseContrastMicroscopy)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free pusCells)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free redCells)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free epithelialCells)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free casts)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free cristals)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO UrineFullReport(tst_ur_id, appointment_id, appearance,sgRefractometer,ph,protein,glucose,ketoneBodies,bilirubin,urobilirubin,contrifugedDepositsphaseContrastMicroscopy,pusCells,redCells,epithelialCells,casts,cristals,date) VALUES('ur[[tmpID2]]','[[appointment_id]]','[[appearance]]','[[sgRefractometer]]','[[ph]]','[[protein]]','[[glucose]]','[[ketoneBodies]]','[[bilirubin]]','[[urobilirubin]]','[[contrifugedDepositsphaseContrastMicroscopy]]','[[pusCells]]','[[redCells]]','[[epithelialCells]]','[[casts]]','[[cristals]]',NOW()), values={})
[DBG] add atom (INSERT UrineFullReport {UrineFullReport.tst_ur_id=(free freshTmpID2), UrineFullReport.appointment_id=(free appointment_id), UrineFullReport.appearance=(free appearance), UrineFullReport.sgRefractometer=(free sgRefractometer), UrineFullReport.ph=(free ph), UrineFullReport.protein=(free protein), UrineFullReport.glucose=(free glucose), UrineFullReport.ketoneBodies=(free ketoneBodies), UrineFullReport.bilirubin=(free bilirubin), UrineFullReport.urobilirubin=(free urobilirubin), UrineFullReport.contrifugedDepositsphaseContrastMicroscopy=(free contrifugedDepositsphaseContrastMicroscopy), UrineFullReport.pusCells=(free pusCells), UrineFullReport.redCells=(free redCells), UrineFullReport.epithelialCells=(free epithelialCells), UrineFullReport.casts=(free casts), UrineFullReport.cristals=(free cristals), UrineFullReport.date=(free now)})
* Effectual method LabAssistant.LabAssistant.LipidTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id
-free cholestrolHDL
-free cholestrolLDL
-free triglycerides
-free totalCholestrolLDLHDLratio
after introduce null
[DBG] Run path 26898: [OutEdge(next=26703, label=), OutEdge(next=26715, label=), OutEdge(next=26722, label=), OutEdge(next=26717, label=), OutEdge(next=26741, label=), OutEdge(next=26748, label=), OutEdge(next=26755, label=), OutEdge(next=26762, label=), OutEdge(next=26775, label=), OutEdge(next=26776, label=!(i < repID.length())), OutEdge(next=26777, label=), OutEdge(next=26819, label=), OutEdge(next=26820, label=!(tmpID2.length() < 4)), OutEdge(next=26821, label=), OutEdge(next=26845, label=), OutEdge(next=26852, label=), OutEdge(next=26724, label=), OutEdge(next=26872, label=), OutEdge(next=26867, label=), OutEdge(next=26891, label=)]
[DBG] Var t = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tst_li_id FROM LipidTest WHERE tst_li_id = (SELECT MAX(tst_li_id) FROM LipidTest);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_li_id FROM LipidTest WHERE tst_li_id = (SELECT MAX(tst_li_id) FROM LipidTest);, values={})
customSelection: (resultset SELECT tst_li_id FROM LipidTest WHERE tst_li_id = (SELECT tst_li_id FROM LipidTest))
[DBG] Var repID = (db LipidTest.tst_li_id {LipidTest.tst_li_id=(db LipidTest.tst_li_id {})})
[DBG] Var tmpID = (invoke (db LipidTest.tst_li_id {LipidTest.tst_li_id=(db LipidTest.tst_li_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 0)
[loop] new loop 26776 at !(i < repID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db LipidTest.tst_li_id {LipidTest.tst_li_id=(db LipidTest.tst_li_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 2), (invoke (db LipidTest.tst_li_id {LipidTest.tst_li_id=(db LipidTest.tst_li_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 26820 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO LipidTest(tst_li_id , appointment_id, cholestrolHDL,cholestrolLDL,triglycerides,totalCholestrolLDLHDLratio,date) VALUE(') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} li) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free appointment_id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free cholestrolHDL)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free cholestrolLDL)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free triglycerides)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free totalCholestrolLDLHDLratio)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',NOW())))
[WARN] scope is complex: System.out.println(t)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO LipidTest(tst_li_id , appointment_id, cholestrolHDL,cholestrolLDL,triglycerides,totalCholestrolLDLHDLratio,date) VALUE('li[[tmpID2]]','[[appointment_id]]','[[cholestrolHDL]]','[[cholestrolLDL]]','[[triglycerides]]','[[totalCholestrolLDLHDLratio]]',NOW()), values={})
[DBG] add atom (INSERT LipidTest {LipidTest.tst_li_id=(free freshTmpID2), LipidTest.appointment_id=(free appointment_id), LipidTest.cholestrolHDL=(free cholestrolHDL), LipidTest.cholestrolLDL=(free cholestrolLDL), LipidTest.triglycerides=(free triglycerides), LipidTest.totalCholestrolLDLHDLratio=(free totalCholestrolLDLHDLratio), LipidTest.date=(free now)})
* Effectual method LabAssistant.LabAssistant.BloodGroupingTest(java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free app_id
-free bloodG
-free rhD
after introduce null
[DBG] Run path 27114: [OutEdge(next=26926, label=), OutEdge(next=26938, label=), OutEdge(next=26945, label=), OutEdge(next=26940, label=), OutEdge(next=26964, label=), OutEdge(next=26971, label=), OutEdge(next=26978, label=), OutEdge(next=26985, label=), OutEdge(next=26998, label=), OutEdge(next=26999, label=!(i < repID.length())), OutEdge(next=27000, label=), OutEdge(next=27042, label=), OutEdge(next=27043, label=!(tmpID2.length() < 4)), OutEdge(next=27044, label=), OutEdge(next=27068, label=), OutEdge(next=27075, label=), OutEdge(next=26947, label=), OutEdge(next=27095, label=), OutEdge(next=27090, label=)]
[DBG] Var t = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);, values={})
customSelection: (resultset SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT tst_bloodG_id FROM BloodGroupingRh))
[DBG] Var repID = (db BloodGroupingRh.tst_bloodG_id {BloodGroupingRh.tst_bloodG_id=(db BloodGroupingRh.tst_bloodG_id {})})
[DBG] Var tmpID = (invoke (db BloodGroupingRh.tst_bloodG_id {BloodGroupingRh.tst_bloodG_id=(db BloodGroupingRh.tst_bloodG_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 0)
[loop] new loop 26999 at !(i < repID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db BloodGroupingRh.tst_bloodG_id {BloodGroupingRh.tst_bloodG_id=(db BloodGroupingRh.tst_bloodG_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 2), (invoke (db BloodGroupingRh.tst_bloodG_id {BloodGroupingRh.tst_bloodG_id=(db BloodGroupingRh.tst_bloodG_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 27043 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO BloodGroupingRh(tst_bloodG_id, appointment_id, BloodGroup, rhesusD,date) VALUE(') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} bg) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free app_id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free bloodG)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free rhD)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO BloodGroupingRh(tst_bloodG_id, appointment_id, BloodGroup, rhesusD,date) VALUE('bg[[tmpID2]]','[[app_id]]','[[bloodG]]','[[rhD]]',NOW()), values={})
[DBG] add atom (INSERT BloodGroupingRh {BloodGroupingRh.tst_bloodG_id=(free freshTmpID2), BloodGroupingRh.appointment_id=(free app_id), BloodGroupingRh.bloodGroup=(free bloodG), BloodGroupingRh.rhesusD=(free rhD), BloodGroupingRh.date=(free now)})
* Effectual method LabAssistant.LabAssistant.completeBloodCount(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id
-free totalWhiteCellCount
-free differentialCount
-free neutrophils
-free lymphocytes
-free monocytes
-free eosonophils
-free basophils
-free haemoglobin
-free redBloodCells
-free meanCellVolume
-free haematocrit
-free meanCellHaemoglobin
-free mchConcentration
-free redCellsDistributionWidth
-free plateletCount
after introduce null
[DBG] Run path 27323: [OutEdge(next=27135, label=), OutEdge(next=27147, label=), OutEdge(next=27154, label=), OutEdge(next=27149, label=), OutEdge(next=27173, label=), OutEdge(next=27180, label=), OutEdge(next=27187, label=), OutEdge(next=27194, label=), OutEdge(next=27207, label=), OutEdge(next=27208, label=!(i < repID.length())), OutEdge(next=27209, label=), OutEdge(next=27251, label=), OutEdge(next=27252, label=!(tmpID2.length() < 4)), OutEdge(next=27253, label=), OutEdge(next=27277, label=), OutEdge(next=27284, label=), OutEdge(next=27156, label=), OutEdge(next=27304, label=), OutEdge(next=27299, label=)]
[DBG] Var t = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tst_CBC_id FROM completeBloodCount WHERE tst_CBC_id = (SELECT MAX(tst_CBC_id) FROM completeBloodCount);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_CBC_id FROM completeBloodCount WHERE tst_CBC_id = (SELECT MAX(tst_CBC_id) FROM completeBloodCount);, values={})
customSelection: (resultset SELECT tst_CBC_id FROM completeBloodCount WHERE tst_CBC_id = (SELECT tst_CBC_id FROM completeBloodCount))
[DBG] Var repID = (db completeBloodCount.tst_CBC_id {completeBloodCount.tst_CBC_id=(db completeBloodCount.tst_CBC_id {})})
[DBG] Var tmpID = (invoke (db completeBloodCount.tst_CBC_id {completeBloodCount.tst_CBC_id=(db completeBloodCount.tst_CBC_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 0)
[loop] new loop 27208 at !(i < repID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db completeBloodCount.tst_CBC_id {completeBloodCount.tst_CBC_id=(db completeBloodCount.tst_CBC_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db completeBloodCount.tst_CBC_id {completeBloodCount.tst_CBC_id=(db completeBloodCount.tst_CBC_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 27252 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO completeBloodCount(tst_CBC_id , appointment_id, totalWhiteCellCount,differentialCount,neutrophils,lymphocytes,monocytes,eosonophils,basophils,haemoglobin,redBloodCells,meanCellVolume,haematocrit,meanCellHaemoglobin, mchConcentration,redCellsDistributionWidth,plateletCount,date) VALUE(') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} cbc) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free appointment_id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free totalWhiteCellCount)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free differentialCount)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free neutrophils)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free lymphocytes)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free monocytes)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free eosonophils)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free basophils)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free haemoglobin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free redBloodCells)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free meanCellVolume)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free haematocrit)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free meanCellHaemoglobin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free mchConcentration)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free redCellsDistributionWidth)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free plateletCount)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO completeBloodCount(tst_CBC_id , appointment_id, totalWhiteCellCount,differentialCount,neutrophils,lymphocytes,monocytes,eosonophils,basophils,haemoglobin,redBloodCells,meanCellVolume,haematocrit,meanCellHaemoglobin, mchConcentration,redCellsDistributionWidth,plateletCount,date) VALUE('cbc[[tmpID2]]','[[appointment_id]]','[[totalWhiteCellCount]]','[[differentialCount]]','[[neutrophils]]','[[lymphocytes]]','[[monocytes]]','[[eosonophils]]','[[basophils]]','[[haemoglobin]]','[[redBloodCells]]','[[meanCellVolume]]','[[haematocrit]]','[[meanCellHaemoglobin]]','[[mchConcentration]]','[[redCellsDistributionWidth]]','[[plateletCount]]',NOW()), values={})
[DBG] add atom (INSERT completeBloodCount {completeBloodCount.tst_CBC_id=(free freshTmpID2), completeBloodCount.appointment_id=(free appointment_id), completeBloodCount.totalWhiteCellCount=(free totalWhiteCellCount), completeBloodCount.differentialCount=(free differentialCount), completeBloodCount.neutrophils=(free neutrophils), completeBloodCount.lymphocytes=(free lymphocytes), completeBloodCount.monocytes=(free monocytes), completeBloodCount.eosonophils=(free eosonophils), completeBloodCount.basophils=(free basophils), completeBloodCount.haemoglobin=(free haemoglobin), completeBloodCount.redBloodCells=(free redBloodCells), completeBloodCount.meanCellVolume=(free meanCellVolume), completeBloodCount.haematocrit=(free haematocrit), completeBloodCount.meanCellHaemoglobin=(free meanCellHaemoglobin), completeBloodCount.mchConcentration=(free mchConcentration), completeBloodCount.redCellsDistributionWidth=(free redCellsDistributionWidth), completeBloodCount.plateletCount=(free plateletCount), completeBloodCount.date=(free now)})
* Effectual method LabAssistant.LabAssistant.RenalFunctionTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id
-free creatinine
-free urea
-free totalBilirubin
-free directBilirubin
-free sgotast
-free sgptalt
-free alkalinePhospates
after introduce null
[DBG] Run path 27532: [OutEdge(next=27344, label=), OutEdge(next=27356, label=), OutEdge(next=27363, label=), OutEdge(next=27358, label=), OutEdge(next=27382, label=), OutEdge(next=27389, label=), OutEdge(next=27396, label=), OutEdge(next=27403, label=), OutEdge(next=27416, label=), OutEdge(next=27417, label=!(i < repID.length())), OutEdge(next=27418, label=), OutEdge(next=27460, label=), OutEdge(next=27461, label=!(tmpID2.length() < 4)), OutEdge(next=27462, label=), OutEdge(next=27486, label=), OutEdge(next=27493, label=), OutEdge(next=27365, label=), OutEdge(next=27513, label=), OutEdge(next=27508, label=)]
[DBG] Var t = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tst_renal_id FROM RenalFunctionTest WHERE tst_renal_id = (SELECT MAX(tst_renal_id) FROM RenalFunctionTest);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_renal_id FROM RenalFunctionTest WHERE tst_renal_id = (SELECT MAX(tst_renal_id) FROM RenalFunctionTest);, values={})
customSelection: (resultset SELECT tst_renal_id FROM RenalFunctionTest WHERE tst_renal_id = (SELECT tst_renal_id FROM RenalFunctionTest))
[DBG] Var repID = (db RenalFunctionTest.tst_renal_id {RenalFunctionTest.tst_renal_id=(db RenalFunctionTest.tst_renal_id {})})
[DBG] Var tmpID = (invoke (db RenalFunctionTest.tst_renal_id {RenalFunctionTest.tst_renal_id=(db RenalFunctionTest.tst_renal_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 0)
[loop] new loop 27417 at !(i < repID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db RenalFunctionTest.tst_renal_id {RenalFunctionTest.tst_renal_id=(db RenalFunctionTest.tst_renal_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 2), (invoke (db RenalFunctionTest.tst_renal_id {RenalFunctionTest.tst_renal_id=(db RenalFunctionTest.tst_renal_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 27461 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO RenalFunctionTest(tst_renal_id, appointment_id, creatinine,urea,totalBilirubin,directBilirubin,sgotast,sgptalt,alkalinePhospates,date) VALUE(') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} re) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free appointment_id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free creatinine)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free urea)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free totalBilirubin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free directBilirubin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free sgotast)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free sgptalt)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free alkalinePhospates)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO RenalFunctionTest(tst_renal_id, appointment_id, creatinine,urea,totalBilirubin,directBilirubin,sgotast,sgptalt,alkalinePhospates,date) VALUE('re[[tmpID2]]','[[appointment_id]]','[[creatinine]]','[[urea]]','[[totalBilirubin]]','[[directBilirubin]]','[[sgotast]]','[[sgptalt]]','[[alkalinePhospates]]',NOW()), values={})
[DBG] add atom (INSERT RenalFunctionTest {RenalFunctionTest.tst_renal_id=(free freshTmpID2), RenalFunctionTest.appointment_id=(free appointment_id), RenalFunctionTest.creatinine=(free creatinine), RenalFunctionTest.urea=(free urea), RenalFunctionTest.totalBilirubin=(free totalBilirubin), RenalFunctionTest.directBilirubin=(free directBilirubin), RenalFunctionTest.sgotast=(free sgotast), RenalFunctionTest.sgptalt=(free sgptalt), RenalFunctionTest.alkalinePhospates=(free alkalinePhospates), RenalFunctionTest.date=(free now)})
* Effectual method LabAssistant.LabAssistant.SeriumCreatinePhosphokinaseTotal(java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id
-free cpkTotal
after introduce null
[DBG] Run path 27741: [OutEdge(next=27553, label=), OutEdge(next=27565, label=), OutEdge(next=27572, label=), OutEdge(next=27567, label=), OutEdge(next=27591, label=), OutEdge(next=27598, label=), OutEdge(next=27605, label=), OutEdge(next=27612, label=), OutEdge(next=27625, label=), OutEdge(next=27626, label=!(i < repID.length())), OutEdge(next=27627, label=), OutEdge(next=27669, label=), OutEdge(next=27670, label=!(tmpID2.length() < 4)), OutEdge(next=27671, label=), OutEdge(next=27695, label=), OutEdge(next=27702, label=), OutEdge(next=27574, label=), OutEdge(next=27722, label=), OutEdge(next=27717, label=)]
[DBG] Var t = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tst_SCPT_id FROM SeriumCreatinePhosphokinaseTotal WHERE tst_SCPT_id = (SELECT MAX(tst_SCPT_id) FROM SeriumCreatinePhosphokinaseTotal);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_SCPT_id FROM SeriumCreatinePhosphokinaseTotal WHERE tst_SCPT_id = (SELECT MAX(tst_SCPT_id) FROM SeriumCreatinePhosphokinaseTotal);, values={})
customSelection: (resultset SELECT tst_SCPT_id FROM SeriumCreatinePhosphokinaseTotal WHERE tst_SCPT_id = (SELECT tst_SCPT_id FROM SeriumCreatinePhosphokinaseTotal))
[DBG] Var repID = (db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {})})
[DBG] Var tmpID = (invoke (db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 0)
[loop] new loop 27626 at !(i < repID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 4), (invoke (db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 27670 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO SeriumCreatinePhosphokinaseTotal(tst_SCPT_id, appointment_id, cpkTotal,date) VALUE(') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} scpt) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free appointment_id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free cpkTotal)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO SeriumCreatinePhosphokinaseTotal(tst_SCPT_id, appointment_id, cpkTotal,date) VALUE('scpt[[tmpID2]]','[[appointment_id]]','[[cpkTotal]]',NOW()), values={})
[DBG] add atom (INSERT SeriumCreatinePhosphokinaseTotal {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(free freshTmpID2), SeriumCreatinePhosphokinaseTotal.appointment_id=(free appointment_id), SeriumCreatinePhosphokinaseTotal.cpkTotal=(free cpkTotal), SeriumCreatinePhosphokinaseTotal.date=(free now)})
* Effectual method LabAssistant.LabAssistant.SeriumCreatinePhosphokinase(java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id
-free hiv12ELISA
after introduce null
[DBG] Run path 27950: [OutEdge(next=27762, label=), OutEdge(next=27774, label=), OutEdge(next=27781, label=), OutEdge(next=27776, label=), OutEdge(next=27800, label=), OutEdge(next=27807, label=), OutEdge(next=27814, label=), OutEdge(next=27821, label=), OutEdge(next=27834, label=), OutEdge(next=27835, label=!(i < repID.length())), OutEdge(next=27836, label=), OutEdge(next=27878, label=), OutEdge(next=27879, label=!(tmpID2.length() < 4)), OutEdge(next=27880, label=), OutEdge(next=27904, label=), OutEdge(next=27911, label=), OutEdge(next=27783, label=), OutEdge(next=27931, label=), OutEdge(next=27926, label=)]
[DBG] Var t = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tst_SCP_id FROM SeriumCreatinePhosphokinase WHERE tst_SCP_id = (SELECT MAX(tst_SCP_id) FROM SeriumCreatinePhosphokinase);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_SCP_id FROM SeriumCreatinePhosphokinase WHERE tst_SCP_id = (SELECT MAX(tst_SCP_id) FROM SeriumCreatinePhosphokinase);, values={})
customSelection: (resultset SELECT tst_SCP_id FROM SeriumCreatinePhosphokinase WHERE tst_SCP_id = (SELECT tst_SCP_id FROM SeriumCreatinePhosphokinase))
[DBG] Var repID = (db SeriumCreatinePhosphokinase.tst_SCP_id {SeriumCreatinePhosphokinase.tst_SCP_id=(db SeriumCreatinePhosphokinase.tst_SCP_id {})})
[DBG] Var tmpID = (invoke (db SeriumCreatinePhosphokinase.tst_SCP_id {SeriumCreatinePhosphokinase.tst_SCP_id=(db SeriumCreatinePhosphokinase.tst_SCP_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 0)
[loop] new loop 27835 at !(i < repID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db SeriumCreatinePhosphokinase.tst_SCP_id {SeriumCreatinePhosphokinase.tst_SCP_id=(db SeriumCreatinePhosphokinase.tst_SCP_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db SeriumCreatinePhosphokinase.tst_SCP_id {SeriumCreatinePhosphokinase.tst_SCP_id=(db SeriumCreatinePhosphokinase.tst_SCP_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 27879 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO SeriumCreatinePhosphokinase(tst_SCP_id, appointment_id, hiv12ELISA,date) VALUE(') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} scp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free appointment_id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free hiv12ELISA)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO SeriumCreatinePhosphokinase(tst_SCP_id, appointment_id, hiv12ELISA,date) VALUE('scp[[tmpID2]]','[[appointment_id]]','[[hiv12ELISA]]',NOW()), values={})
[DBG] add atom (INSERT SeriumCreatinePhosphokinase {SeriumCreatinePhosphokinase.tst_SCP_id=(free freshTmpID2), SeriumCreatinePhosphokinase.appointment_id=(free appointment_id), SeriumCreatinePhosphokinase.hiv12ELISA=(free hiv12ELISA), SeriumCreatinePhosphokinase.date=(free now)})
* Effectual method LabAssistant.LabAssistant.liverFunctionTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id
-free totalProtein
-free albumin
-free globulin
-free totalBilirubin
-free directBilirubin
-free sgotast
-free sgptalt
-free alkalinePhospates
after introduce null
[DBG] Run path 28159: [OutEdge(next=27971, label=), OutEdge(next=27983, label=), OutEdge(next=27990, label=), OutEdge(next=27985, label=), OutEdge(next=28009, label=), OutEdge(next=28016, label=), OutEdge(next=28023, label=), OutEdge(next=28030, label=), OutEdge(next=28043, label=), OutEdge(next=28044, label=!(i < repID.length())), OutEdge(next=28045, label=), OutEdge(next=28087, label=), OutEdge(next=28088, label=!(tmpID2.length() < 4)), OutEdge(next=28089, label=), OutEdge(next=28113, label=), OutEdge(next=28120, label=), OutEdge(next=27992, label=), OutEdge(next=28140, label=), OutEdge(next=28135, label=)]
[DBG] Var t = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var id = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tst_liver_id FROM LiverFunctionTest WHERE tst_liver_id = (SELECT MAX(tst_liver_id) FROM LiverFunctionTest);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_liver_id FROM LiverFunctionTest WHERE tst_liver_id = (SELECT MAX(tst_liver_id) FROM LiverFunctionTest);, values={})
customSelection: (resultset SELECT tst_liver_id FROM LiverFunctionTest WHERE tst_liver_id = (SELECT tst_liver_id FROM LiverFunctionTest))
[DBG] Var repID = (db LiverFunctionTest.tst_liver_id {LiverFunctionTest.tst_liver_id=(db LiverFunctionTest.tst_liver_id {})})
[DBG] Var tmpID = (invoke (db LiverFunctionTest.tst_liver_id {LiverFunctionTest.tst_liver_id=(db LiverFunctionTest.tst_liver_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 0)
[loop] new loop 28044 at !(i < repID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db LiverFunctionTest.tst_liver_id {LiverFunctionTest.tst_liver_id=(db LiverFunctionTest.tst_liver_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 2), (invoke (db LiverFunctionTest.tst_liver_id {LiverFunctionTest.tst_liver_id=(db LiverFunctionTest.tst_liver_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 28088 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO LiverFunctionTest(tst_liver_id, appointment_id, totalProtein,albumin,globulin,totalBilirubin,directBilirubin,sgotast,sgptalt,alkalinePhospates,date) VALUE(') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lv) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free appointment_id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free totalProtein)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free albumin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free globulin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free totalBilirubin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free directBilirubin)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free sgotast)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free sgptalt)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free alkalinePhospates)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO LiverFunctionTest(tst_liver_id, appointment_id, totalProtein,albumin,globulin,totalBilirubin,directBilirubin,sgotast,sgptalt,alkalinePhospates,date) VALUE('lv[[tmpID2]]','[[appointment_id]]','[[totalProtein]]','[[albumin]]','[[globulin]]','[[totalBilirubin]]','[[directBilirubin]]','[[sgotast]]','[[sgptalt]]','[[alkalinePhospates]]',NOW()), values={})
[DBG] add atom (INSERT LiverFunctionTest {LiverFunctionTest.tst_liver_id=(free freshTmpID2), LiverFunctionTest.appointment_id=(free appointment_id), LiverFunctionTest.totalProtein=(free totalProtein), LiverFunctionTest.albumin=(free albumin), LiverFunctionTest.globulin=(free globulin), LiverFunctionTest.totalBilirubin=(free totalBilirubin), LiverFunctionTest.directBilirubin=(free directBilirubin), LiverFunctionTest.sgotast=(free sgotast), LiverFunctionTest.sgptalt=(free sgptalt), LiverFunctionTest.alkalinePhospates=(free alkalinePhospates), LiverFunctionTest.date=(free now)})
* Effectual method Admin.Admin.updateProfileInfo(java.lang.String)
[DBG] Run class Admin.Admin
-free info
after introduce null
[DBG] Run path 29005: [OutEdge(next=28919, label=), OutEdge(next=28931, label=), OutEdge(next=28938, label=), OutEdge(next=28945, label=), OutEdge(next=28958, label=), OutEdge(next=28965, label=), OutEdge(next=28972, label=), OutEdge(next=28979, label=), OutEdge(next=28986, label=), OutEdge(next=28981, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[DBG] Var tmplen = (+ (invoke (unknown from tmpData[0]) length []) (data PrimitiveTypeUsage{name='int'} 1))
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = ')) (unknown from this.userID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v26]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '[[v27|this.userID]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})
* Effectual method Admin.Admin.updateAccountInfo(java.lang.String)
[DBG] Run class Admin.Admin
-free info
after introduce null
[DBG] Run path 29112: [OutEdge(next=29033, label=), OutEdge(next=29045, label=), OutEdge(next=29052, label=), OutEdge(next=29059, label=), OutEdge(next=29072, label=), OutEdge(next=29079, label=), OutEdge(next=29086, label=), OutEdge(next=29093, label=), OutEdge(next=29088, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE user_id = ')) (unknown from this.userID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v28]] WHERE user_id = '[[v29|this.userID]]');, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method Admin.Admin.createNewUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Admin.Admin
-free firstName
-free lastName
-free userType
-free nic
-free mobile
-free slmcReg
after introduce null
[DBG] Run path 29698: [OutEdge(next=29140, label=), OutEdge(next=29152, label=), OutEdge(next=29159, label=), OutEdge(next=29166, label=), OutEdge(next=29173, label=), OutEdge(next=29180, label=), OutEdge(next=29175, label=), OutEdge(next=29199, label=), OutEdge(next=29206, label=), OutEdge(next=29213, label=), OutEdge(next=29220, label=), OutEdge(next=29233, label=), OutEdge(next=29234, label=!(i < personID.length())), OutEdge(next=29235, label=), OutEdge(next=29277, label=), OutEdge(next=29278, label=!(tmpID2.length() < 5)), OutEdge(next=29279, label=), OutEdge(next=29303, label=), OutEdge(next=29310, label=), OutEdge(next=29182, label=), OutEdge(next=29342, label=), OutEdge(next=29349, label=), OutEdge(next=29356, label=), OutEdge(next=29363, label=), OutEdge(next=29376, label=), OutEdge(next=29377, label=!(i < userID.length())), OutEdge(next=29378, label=), OutEdge(next=29420, label=), OutEdge(next=29421, label=!(tmpID2.length() < 4)), OutEdge(next=29422, label=), OutEdge(next=29446, label=), OutEdge(next=29453, label=), OutEdge(next=29460, label=), OutEdge(next=29325, label=), OutEdge(next=29492, label=), OutEdge(next=29499, label=), OutEdge(next=29506, label=), OutEdge(next=29513, label=), OutEdge(next=29526, label=), OutEdge(next=29527, label=!(i < userID.length())), OutEdge(next=29528, label=), OutEdge(next=29570, label=), OutEdge(next=29571, label=!(tmpID2.length() < 3)), OutEdge(next=29572, label=), OutEdge(next=29596, label=), OutEdge(next=29603, label=), OutEdge(next=29610, label=), OutEdge(next=29475, label=), OutEdge(next=29630, label=), OutEdge(next=29637, label=), OutEdge(next=29644, label=), OutEdge(next=29651, label=), OutEdge(next=29658, label=), OutEdge(next=29665, label=), OutEdge(next=29672, label=), OutEdge(next=29679, label=), OutEdge(next=29674, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new ArrayList<String>()
[DBG] Var data = (unknown from new ArrayList<String>())
[DBG] Var personId = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var userId = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var userName = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[DBG] Var tmpID = (invoke (db person.person_id {person.person_id=(db person.person_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 29234 at !(i < personID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29278 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);, values={})
customSelection: (resultset SELECT user_id FROM sys_user WHERE user_id = (SELECT user_id FROM sys_user))
[DBG] Var userID = (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})})
[DBG] Var tmpID = (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 29377 at !(i < userID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (- (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29421 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);, values={})
customSelection: (resultset SELECT user_name FROM sys_user WHERE user_name = (SELECT user_name FROM sys_user))
[DBG] Var userID = (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})})
[DBG] Var tmpID = (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 29527 at !(i < userID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) substring [(data PrimitiveTypeUsage{name='int'} 4), (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29571 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[DBG] Var sql1 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free firstName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free lastName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free nic)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free mobile)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} u))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} user) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free userType)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ', '1234' );))
[DBG] Var sql3 = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET user_id = ') (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} u))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' WHERE person_id = ')) (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql4 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var doctorID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var labAssistantID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var pharmacistID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES ('hms[[tmpID2]]','[[firstName]]','[[lastName]]','[[nic]]','[[mobile]]');, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})
[DBG] Run class Admin.Admin
-free firstName
-free lastName
-free userType
-free nic
-free mobile
-free slmcReg
after introduce null
[DBG] Run path 29705: [OutEdge(next=29140, label=), OutEdge(next=29152, label=), OutEdge(next=29159, label=), OutEdge(next=29166, label=), OutEdge(next=29173, label=), OutEdge(next=29180, label=), OutEdge(next=29175, label=), OutEdge(next=29199, label=), OutEdge(next=29206, label=), OutEdge(next=29213, label=), OutEdge(next=29220, label=), OutEdge(next=29233, label=), OutEdge(next=29234, label=!(i < personID.length())), OutEdge(next=29235, label=), OutEdge(next=29277, label=), OutEdge(next=29278, label=!(tmpID2.length() < 5)), OutEdge(next=29279, label=), OutEdge(next=29303, label=), OutEdge(next=29310, label=), OutEdge(next=29182, label=), OutEdge(next=29342, label=), OutEdge(next=29349, label=), OutEdge(next=29356, label=), OutEdge(next=29363, label=), OutEdge(next=29376, label=), OutEdge(next=29377, label=!(i < userID.length())), OutEdge(next=29378, label=), OutEdge(next=29420, label=), OutEdge(next=29421, label=!(tmpID2.length() < 4)), OutEdge(next=29422, label=), OutEdge(next=29446, label=), OutEdge(next=29453, label=), OutEdge(next=29460, label=), OutEdge(next=29325, label=), OutEdge(next=29492, label=), OutEdge(next=29499, label=), OutEdge(next=29506, label=), OutEdge(next=29513, label=), OutEdge(next=29526, label=), OutEdge(next=29527, label=!(i < userID.length())), OutEdge(next=29528, label=), OutEdge(next=29570, label=), OutEdge(next=29571, label=!(tmpID2.length() < 3)), OutEdge(next=29572, label=), OutEdge(next=29596, label=), OutEdge(next=29603, label=), OutEdge(next=29610, label=), OutEdge(next=29475, label=), OutEdge(next=29630, label=), OutEdge(next=29637, label=), OutEdge(next=29644, label=), OutEdge(next=29651, label=), OutEdge(next=29658, label=), OutEdge(next=29665, label=), OutEdge(next=29672, label=), OutEdge(next=29679, label=), OutEdge(next=29674, label=), OutEdge(next=29698, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new ArrayList<String>()
[DBG] Var data = (unknown from new ArrayList<String>())
[DBG] Var personId = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var userId = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var userName = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[DBG] Var tmpID = (invoke (db person.person_id {person.person_id=(db person.person_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 29234 at !(i < personID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29278 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);, values={})
customSelection: (resultset SELECT user_id FROM sys_user WHERE user_id = (SELECT user_id FROM sys_user))
[DBG] Var userID = (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})})
[DBG] Var tmpID = (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 29377 at !(i < userID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (- (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29421 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);, values={})
customSelection: (resultset SELECT user_name FROM sys_user WHERE user_name = (SELECT user_name FROM sys_user))
[DBG] Var userID = (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})})
[DBG] Var tmpID = (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 29527 at !(i < userID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) substring [(data PrimitiveTypeUsage{name='int'} 4), (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29571 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[DBG] Var sql1 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free firstName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free lastName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free nic)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free mobile)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} u))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} user) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free userType)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ', '1234' );))
[DBG] Var sql3 = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET user_id = ') (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} u))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' WHERE person_id = ')) (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql4 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var doctorID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var labAssistantID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var pharmacistID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES ('hms[[tmpID2]]','[[firstName]]','[[lastName]]','[[nic]]','[[mobile]]');, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES ('hms[[tmpID2]]','hms[[tmpID2]]u','user[[tmpID2]]','[[userType]]', '1234' );, values={})
[DBG] add atom (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null '1234')})
[DBG] Run class Admin.Admin
-free firstName
-free lastName
-free userType
-free nic
-free mobile
-free slmcReg
after introduce null
[DBG] Run path 29712: [OutEdge(next=29140, label=), OutEdge(next=29152, label=), OutEdge(next=29159, label=), OutEdge(next=29166, label=), OutEdge(next=29173, label=), OutEdge(next=29180, label=), OutEdge(next=29175, label=), OutEdge(next=29199, label=), OutEdge(next=29206, label=), OutEdge(next=29213, label=), OutEdge(next=29220, label=), OutEdge(next=29233, label=), OutEdge(next=29234, label=!(i < personID.length())), OutEdge(next=29235, label=), OutEdge(next=29277, label=), OutEdge(next=29278, label=!(tmpID2.length() < 5)), OutEdge(next=29279, label=), OutEdge(next=29303, label=), OutEdge(next=29310, label=), OutEdge(next=29182, label=), OutEdge(next=29342, label=), OutEdge(next=29349, label=), OutEdge(next=29356, label=), OutEdge(next=29363, label=), OutEdge(next=29376, label=), OutEdge(next=29377, label=!(i < userID.length())), OutEdge(next=29378, label=), OutEdge(next=29420, label=), OutEdge(next=29421, label=!(tmpID2.length() < 4)), OutEdge(next=29422, label=), OutEdge(next=29446, label=), OutEdge(next=29453, label=), OutEdge(next=29460, label=), OutEdge(next=29325, label=), OutEdge(next=29492, label=), OutEdge(next=29499, label=), OutEdge(next=29506, label=), OutEdge(next=29513, label=), OutEdge(next=29526, label=), OutEdge(next=29527, label=!(i < userID.length())), OutEdge(next=29528, label=), OutEdge(next=29570, label=), OutEdge(next=29571, label=!(tmpID2.length() < 3)), OutEdge(next=29572, label=), OutEdge(next=29596, label=), OutEdge(next=29603, label=), OutEdge(next=29610, label=), OutEdge(next=29475, label=), OutEdge(next=29630, label=), OutEdge(next=29637, label=), OutEdge(next=29644, label=), OutEdge(next=29651, label=), OutEdge(next=29658, label=), OutEdge(next=29665, label=), OutEdge(next=29672, label=), OutEdge(next=29679, label=), OutEdge(next=29674, label=), OutEdge(next=29698, label=), OutEdge(next=29705, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new ArrayList<String>()
[DBG] Var data = (unknown from new ArrayList<String>())
[DBG] Var personId = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var userId = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var userName = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[DBG] Var tmpID = (invoke (db person.person_id {person.person_id=(db person.person_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 29234 at !(i < personID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29278 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);, values={})
customSelection: (resultset SELECT user_id FROM sys_user WHERE user_id = (SELECT user_id FROM sys_user))
[DBG] Var userID = (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})})
[DBG] Var tmpID = (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 29377 at !(i < userID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (- (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29421 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);, values={})
customSelection: (resultset SELECT user_name FROM sys_user WHERE user_name = (SELECT user_name FROM sys_user))
[DBG] Var userID = (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})})
[DBG] Var tmpID = (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 29527 at !(i < userID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) substring [(data PrimitiveTypeUsage{name='int'} 4), (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29571 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[DBG] Var sql1 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free firstName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free lastName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free nic)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free mobile)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} u))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} user) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free userType)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ', '1234' );))
[DBG] Var sql3 = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET user_id = ') (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} u))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' WHERE person_id = ')) (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql4 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var doctorID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var labAssistantID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var pharmacistID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES ('hms[[tmpID2]]','[[firstName]]','[[lastName]]','[[nic]]','[[mobile]]');, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES ('hms[[tmpID2]]','hms[[tmpID2]]u','user[[tmpID2]]','[[userType]]', '1234' );, values={})
[DBG] add atom (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null '1234')})
[WARN] scope is complex: super.dbOperator.customInsertion(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET user_id = 'hms[[tmpID2]]u' WHERE person_id = 'hms[[tmpID2]]';, values={})
[DBG] add atom (UPDATE person {person.user_id=(free freshTmpID25)} {person.person_id=(free freshTmpID24)})
[DBG] Run class Admin.Admin
-free firstName
-free lastName
-free userType
-free nic
-free mobile
-free slmcReg
after introduce null
[DBG] Run path 29731: [OutEdge(next=29140, label=), OutEdge(next=29152, label=), OutEdge(next=29159, label=), OutEdge(next=29166, label=), OutEdge(next=29173, label=), OutEdge(next=29180, label=), OutEdge(next=29175, label=), OutEdge(next=29199, label=), OutEdge(next=29206, label=), OutEdge(next=29213, label=), OutEdge(next=29220, label=), OutEdge(next=29233, label=), OutEdge(next=29234, label=!(i < personID.length())), OutEdge(next=29235, label=), OutEdge(next=29277, label=), OutEdge(next=29278, label=!(tmpID2.length() < 5)), OutEdge(next=29279, label=), OutEdge(next=29303, label=), OutEdge(next=29310, label=), OutEdge(next=29182, label=), OutEdge(next=29342, label=), OutEdge(next=29349, label=), OutEdge(next=29356, label=), OutEdge(next=29363, label=), OutEdge(next=29376, label=), OutEdge(next=29377, label=!(i < userID.length())), OutEdge(next=29378, label=), OutEdge(next=29420, label=), OutEdge(next=29421, label=!(tmpID2.length() < 4)), OutEdge(next=29422, label=), OutEdge(next=29446, label=), OutEdge(next=29453, label=), OutEdge(next=29460, label=), OutEdge(next=29325, label=), OutEdge(next=29492, label=), OutEdge(next=29499, label=), OutEdge(next=29506, label=), OutEdge(next=29513, label=), OutEdge(next=29526, label=), OutEdge(next=29527, label=!(i < userID.length())), OutEdge(next=29528, label=), OutEdge(next=29570, label=), OutEdge(next=29571, label=!(tmpID2.length() < 3)), OutEdge(next=29572, label=), OutEdge(next=29596, label=), OutEdge(next=29603, label=), OutEdge(next=29610, label=), OutEdge(next=29475, label=), OutEdge(next=29630, label=), OutEdge(next=29637, label=), OutEdge(next=29644, label=), OutEdge(next=29651, label=), OutEdge(next=29658, label=), OutEdge(next=29665, label=), OutEdge(next=29672, label=), OutEdge(next=29679, label=), OutEdge(next=29674, label=), OutEdge(next=29698, label=), OutEdge(next=29705, label=), OutEdge(next=29712, label=), OutEdge(next=29713, label=(userType == \"doctor\") || (userType == \"pharmacist\") || (userType == \"lab_assistant\")), OutEdge(next=29719, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new ArrayList<String>()
[DBG] Var data = (unknown from new ArrayList<String>())
[DBG] Var personId = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var userId = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var userName = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[DBG] Var tmpID = (invoke (db person.person_id {person.person_id=(db person.person_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 29234 at !(i < personID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29278 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);, values={})
customSelection: (resultset SELECT user_id FROM sys_user WHERE user_id = (SELECT user_id FROM sys_user))
[DBG] Var userID = (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})})
[DBG] Var tmpID = (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 29377 at !(i < userID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (- (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29421 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql0 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);, values={})
customSelection: (resultset SELECT user_name FROM sys_user WHERE user_name = (SELECT user_name FROM sys_user))
[DBG] Var userID = (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})})
[DBG] Var tmpID = (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 29527 at !(i < userID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) substring [(data PrimitiveTypeUsage{name='int'} 4), (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 29571 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[DBG] Var sql1 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free firstName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free lastName)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free nic)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free mobile)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} u))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} user) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free userType)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ', '1234' );))
[DBG] Var sql3 = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET user_id = ') (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} u))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' WHERE person_id = ')) (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} hms) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql4 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var doctorID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var labAssistantID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var pharmacistID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES ('hms[[tmpID2]]','[[firstName]]','[[lastName]]','[[nic]]','[[mobile]]');, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES ('hms[[tmpID2]]','hms[[tmpID2]]u','user[[tmpID2]]','[[userType]]', '1234' );, values={})
[DBG] add atom (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null '1234')})
[WARN] scope is complex: super.dbOperator.customInsertion(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET user_id = 'hms[[tmpID2]]u' WHERE person_id = 'hms[[tmpID2]]';, values={})
[DBG] add atom (UPDATE person {person.user_id=(free freshTmpID25)} {person.person_id=(free freshTmpID24)})
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (userType == "doctor")
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (userType == "pharmacist")
[WARN] Short-circuit semantics may be ignored
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (userType == "lab_assistant")
[WARN] Short-circuit semantics may be ignored
[COND] condition: (userType == "doctor") || (userType == "pharmacist") || (userType == "lab_assistant")
[WARN] scope is complex: super.dbOperator.customInsertion(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO doctor(slmc_reg_no,user_id) VALUES ('[[slmcReg]]','hms[[tmpID2]]u');, values={})
[DBG] add atom (INSERT doctor {doctor.slmc_reg_no=(free slmcReg), doctor.user_id=(free freshTmpID26)})
* Effectual method Admin.Admin.suspendUser(java.lang.String)
[DBG] Run class Admin.Admin
-free userid
after introduce Variable(value=(free userid))
[DBG] Run path 32544: [OutEdge(next=32499, label=), OutEdge(next=32511, label=), OutEdge(next=32518, label=), OutEdge(next=32513, label=), OutEdge(next=32537, label=)]
[DBG] Var sql1 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET suspend = 1 WHERE user_id = '[[userid]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.suspend=(data null 1)} {sys_user.user_id=(free userid)})
* Effectual method Admin.Admin.unsuspendUser(java.lang.String)
[DBG] Run class Admin.Admin
-free userid
after introduce Variable(value=(free userid))
[DBG] Run path 32610: [OutEdge(next=32565, label=), OutEdge(next=32577, label=), OutEdge(next=32584, label=), OutEdge(next=32579, label=), OutEdge(next=32603, label=)]
[DBG] Var sql1 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET suspend = 0 WHERE user_id = '[[userid]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.suspend=(data null 0)} {sys_user.user_id=(free userid)})
* Effectual method Admin.Admin.resetPassword(java.lang.String)
[DBG] Run class Admin.Admin
-free userid
after introduce Variable(value=(free userid))
[DBG] Run path 32895: [OutEdge(next=32857, label=), OutEdge(next=32869, label=), OutEdge(next=32864, label=), OutEdge(next=32888, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql1 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET password='123456' WHERE user_id = ') (free userid)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET password='123456' WHERE user_id = '[[userid]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.password=(data null '123456')} {sys_user.user_id=(free userid)})
* Effectual method com.hms.hms_test_2.User.saveLogin(java.lang.String)
[DBG] Run class com.hms.hms_test_2.User
[DBG] Class field: dbOperator
[DBG] Class field: username
[DBG] Class field: userID
[DBG] Class field: userType
[DBG] Class field: database = ""
[DBG] Class field: dbUsername = ""
[DBG] Class field: dbPassword = ""
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: result = dbOperator.showTableData("sys_user", "user_id,user_type", ("user_name = '" + username + "'"))
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: ("user_name = '" + username + "'")
-free username
after introduce null
[DBG] Run path 53607: [OutEdge(next=53569, label=), OutEdge(next=53581, label=), OutEdge(next=53588, label=), OutEdge(next=53583, label=)]
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET online=1,login=NOW() WHERE user_name =') (free username)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
Insertion Approx = SqlApprox(template=UPDATE sys_user SET online=1,login=NOW() WHERE user_name ='[[username]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.online=(data null 1), sys_user.login=(free now)} {sys_user.user_name=(free username)})
* Effectual method com.hms.hms_test_2.User.saveLogout(java.lang.String)
[DBG] Run class com.hms.hms_test_2.User
[DBG] Class field: dbOperator
[DBG] Class field: username
[DBG] Class field: userID
[DBG] Class field: userType
[DBG] Class field: database = ""
[DBG] Class field: dbUsername = ""
[DBG] Class field: dbPassword = ""
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: result = dbOperator.showTableData("sys_user", "user_id,user_type", ("user_name = '" + username + "'"))
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: ("user_name = '" + username + "'")
-free username
after introduce null
[DBG] Run path 53659: [OutEdge(next=53621, label=), OutEdge(next=53633, label=), OutEdge(next=53640, label=), OutEdge(next=53635, label=)]
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET online=0,logout=NOW() WHERE user_name =') (free username)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
Insertion Approx = SqlApprox(template=UPDATE sys_user SET online=0,logout=NOW() WHERE user_name ='[[username]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.online=(data null 0), sys_user.logout=(free now)} {sys_user.user_name=(free username)})
* Effectual method com.hms.hms_test_2.User.sendMessage(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class com.hms.hms_test_2.User
[DBG] Class field: dbOperator
[DBG] Class field: username
[DBG] Class field: userID
[DBG] Class field: userType
[DBG] Class field: database = ""
[DBG] Class field: dbUsername = ""
[DBG] Class field: dbPassword = ""
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: result = dbOperator.showTableData("sys_user", "user_id,user_type", ("user_name = '" + username + "'"))
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: ("user_name = '" + username + "'")
-free sender
-free receiver
-free subject
-free message
after introduce null
[DBG] Run path 53882: [OutEdge(next=53673, label=), OutEdge(next=53685, label=), OutEdge(next=53680, label=), OutEdge(next=53704, label=), OutEdge(next=53711, label=), OutEdge(next=53718, label=), OutEdge(next=53725, label=), OutEdge(next=53738, label=), OutEdge(next=53739, label=!(i < messageID.length())), OutEdge(next=53740, label=), OutEdge(next=53782, label=), OutEdge(next=53783, label=!(tmpID2.length() < 5)), OutEdge(next=53784, label=), OutEdge(next=53808, label=), OutEdge(next=53687, label=), OutEdge(next=53835, label=), OutEdge(next=53842, label=), OutEdge(next=53849, label=), OutEdge(next=53856, label=), OutEdge(next=53863, label=), OutEdge(next=53858, label=)]
[DBG] Var messID = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} msg00001)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT message_id FROM user_message WHERE message_id = (SELECT MAX(message_id) FROM user_message);)
[WARN] scope is complex: dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: dbOperator.customSelection(sql2).get(1)
Selection Approx = SqlApprox(template=SELECT message_id FROM user_message WHERE message_id = (SELECT MAX(message_id) FROM user_message);, values={})
customSelection: (resultset SELECT message_id FROM user_message WHERE message_id = (SELECT message_id FROM user_message))
[DBG] Var messageID = (db user_message.message_id {user_message.message_id=(db user_message.message_id {})})
[DBG] Var tmpID = (invoke (db user_message.message_id {user_message.message_id=(db user_message.message_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 53739 at !(i < messageID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db user_message.message_id {user_message.message_id=(db user_message.message_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db user_message.message_id {user_message.message_id=(db user_message.message_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 53783 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var dtf = (invoke (free DateTimeFormatter) ofPattern [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} yyyy-MM-dd HH:mm:ss)])
[DBG] Var now = (invoke (free LocalDateTime) now [])
[DBG] Var messDate = (invoke (invoke (free DateTimeFormatter) ofPattern [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} yyyy-MM-dd HH:mm:ss)]) format [(invoke (free LocalDateTime) now [])])
[DBG] Var sql = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO user_message (message_id,reciver,sender,subject,message,date) VALUES (') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} msg) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free receiver)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free sender)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free subject)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (free message)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ',')) (invoke (invoke (free DateTimeFormatter) ofPattern [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} yyyy-MM-dd HH:mm:ss)]) format [(invoke (free LocalDateTime) now [])])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
Insertion Approx = SqlApprox(template=INSERT INTO user_message (message_id,reciver,sender,subject,message,date) VALUES ('msg[[tmpID2]]','[[receiver]]','[[sender]]','[[subject]]','[[message]]','[[v30]]');, values={})
[DBG] add atom (INSERT user_message {user_message.message_id=(free freshTmpID2), user_message.reciver=(free receiver), user_message.sender=(free sender), user_message.subject=(free subject), user_message.message=(free message), user_message.date=(free freshV30)})
* Effectual method com.hms.hms_test_2.User.deleteMessage(java.lang.String)
[DBG] Run class com.hms.hms_test_2.User
[DBG] Class field: dbOperator
[DBG] Class field: username
[DBG] Class field: userID
[DBG] Class field: userType
[DBG] Class field: database = ""
[DBG] Class field: dbUsername = ""
[DBG] Class field: dbPassword = ""
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: result = dbOperator.showTableData("sys_user", "user_id,user_type", ("user_name = '" + username + "'"))
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: ("user_name = '" + username + "'")
-free msgID
after introduce null
[DBG] Run path 53993: [OutEdge(next=53955, label=), OutEdge(next=53967, label=), OutEdge(next=53974, label=), OutEdge(next=53969, label=)]
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} DELETE FROM user_message WHERE message_id =') (free msgID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
Insertion Approx = SqlApprox(template=DELETE FROM user_message WHERE message_id ='[[msgID]]';, values={})
[DBG] add atom (DELETE user_message {user_message.message_id=(free msgID)})
* Effectual method com.hms.hms_test_2.User.setProfilePic(java.lang.String)
[DBG] Run class com.hms.hms_test_2.User
[DBG] Class field: dbOperator
[DBG] Class field: username
[DBG] Class field: userID
[DBG] Class field: userType
[DBG] Class field: database = ""
[DBG] Class field: dbUsername = ""
[DBG] Class field: dbPassword = ""
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: result = dbOperator.showTableData("sys_user", "user_id,user_type", ("user_name = '" + username + "'"))
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: ("user_name = '" + username + "'")
-free name
after introduce null
[DBG] Run path 54191: [OutEdge(next=54153, label=), OutEdge(next=54165, label=), OutEdge(next=54172, label=), OutEdge(next=54167, label=)]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.username
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET profile_pic = ') (free name)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ')) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE sys_user.user_name = ')) (unknown from this.username)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
Insertion Approx = SqlApprox(template=UPDATE sys_user SET profile_pic = '[[name]]'WHERE sys_user.user_name = '[[v31|this.username]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.profile_pic=(free name)} {sys_user.user_name=(free freshThis_username)})
* Effectual method com.hms.hms_test_2.User.setMessageRead(java.lang.String)
[DBG] Run class com.hms.hms_test_2.User
[DBG] Class field: dbOperator
[DBG] Class field: username
[DBG] Class field: userID
[DBG] Class field: userType
[DBG] Class field: database = ""
[DBG] Class field: dbUsername = ""
[DBG] Class field: dbPassword = ""
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: inputStream = null
[DBG] Class field: prop = new Properties()
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new Properties()
[DBG] Class field: propFileName = "config.properties"
[DBG] Class field: result = dbOperator.showTableData("sys_user", "user_id,user_type", ("user_name = '" + username + "'"))
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: ("user_name = '" + username + "'")
-free msgID
after introduce null
[DBG] Run path 54448: [OutEdge(next=54410, label=), OutEdge(next=54422, label=), OutEdge(next=54429, label=), OutEdge(next=54424, label=)]
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE user_message SET rd = ') (data PrimitiveTypeUsage{name='int'} 1)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ')) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE user_message.message_id = ')) (free msgID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
Insertion Approx = SqlApprox(template=UPDATE user_message SET rd = '1'WHERE user_message.message_id = '[[msgID]]';, values={})
[DBG] add atom (UPDATE user_message {user_message.rd=(data null '1')} {user_message.message_id=(free msgID)})
* Effectual method Receptionist.Receptionist.updateProfileInfo(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free info
after introduce null
[DBG] Run path 54778: [OutEdge(next=54692, label=), OutEdge(next=54704, label=), OutEdge(next=54711, label=), OutEdge(next=54718, label=), OutEdge(next=54731, label=), OutEdge(next=54738, label=), OutEdge(next=54745, label=), OutEdge(next=54752, label=), OutEdge(next=54759, label=), OutEdge(next=54754, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[DBG] Var tmplen = (+ (invoke (unknown from tmpData[0]) length []) (data PrimitiveTypeUsage{name='int'} 1))
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = ')) (unknown from this.userID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v32]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '[[v33|this.userID]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})
* Effectual method Receptionist.Receptionist.updateAccountInfo(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free info
after introduce null
[DBG] Run path 54885: [OutEdge(next=54806, label=), OutEdge(next=54818, label=), OutEdge(next=54825, label=), OutEdge(next=54832, label=), OutEdge(next=54845, label=), OutEdge(next=54852, label=), OutEdge(next=54859, label=), OutEdge(next=54866, label=), OutEdge(next=54861, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE user_id = ')) (unknown from this.userID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v34]] WHERE user_id = '[[v35|this.userID]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method Receptionist.Receptionist.setPatientInfo(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free patientInfo
after introduce null
[DBG] Run path 55459: [OutEdge(next=55031, label=), OutEdge(next=55043, label=), OutEdge(next=55050, label=), OutEdge(next=55045, label=), OutEdge(next=55069, label=), OutEdge(next=55076, label=), OutEdge(next=55083, label=), OutEdge(next=55090, label=), OutEdge(next=55103, label=), OutEdge(next=55104, label=!(i < patientID.length())), OutEdge(next=55105, label=), OutEdge(next=55147, label=), OutEdge(next=55148, label=!(tmpID2.length() < 4)), OutEdge(next=55149, label=), OutEdge(next=55173, label=), OutEdge(next=55180, label=), OutEdge(next=55187, label=), OutEdge(next=55194, label=), OutEdge(next=55201, label=), OutEdge(next=55214, label=), OutEdge(next=55215, label=!(i < personID.length())), OutEdge(next=55216, label=), OutEdge(next=55258, label=), OutEdge(next=55259, label=!(tmpID3.length() < 5)), OutEdge(next=55260, label=), OutEdge(next=55284, label=), OutEdge(next=55291, label=), OutEdge(next=55298, label=), OutEdge(next=55305, label=), OutEdge(next=55312, label=), OutEdge(next=55319, label=), OutEdge(next=55326, label=!(index > 0)), OutEdge(next=55327, label=), OutEdge(next=55358, label=), OutEdge(next=55359, label=!(index != 2)), OutEdge(next=55360, label=), OutEdge(next=55384, label=), OutEdge(next=55385, label=!(index != 2)), OutEdge(next=55386, label=), OutEdge(next=55410, label=), OutEdge(next=55417, label=), OutEdge(next=55424, label=), OutEdge(next=55431, label=), OutEdge(next=55438, label=), OutEdge(next=55445, label=), OutEdge(next=55452, label=)]
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT patient_id FROM patient WHERE patient_id = (SELECT MAX(patient_id) FROM patient);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT patient_id FROM patient WHERE patient_id = (SELECT MAX(patient_id) FROM patient);, values={})
customSelection: (resultset SELECT patient_id FROM patient WHERE patient_id = (SELECT patient_id FROM patient))
[DBG] Var patientID = (db patient.patient_id {patient.patient_id=(db patient.patient_id {})})
[DBG] Var tmpID = (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 55104 at !(i < patientID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (- (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) length []) (data PrimitiveTypeUsage{name='int'} 2))])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 55148 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[loop] new loop 55215 at !(i < personID.length())
[DBG] Var tmpID3 = (StrToInt (+ (IntToStr (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 55259 at !(tmpID3.length() < 5)
[loop] modify tmpID3
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var columnNames2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free patientInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index != 2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index != 2
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO person () VALUES ();)
[DBG] Var sql3 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO patient () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person () VALUES ();, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshInsertValue), person.user_id=(free freshInsertValue1), person.nic=(free freshInsertValue2), person.gender=(free freshInsertValue3), person.date_of_birth=(free freshInsertValue4), person.address=(free freshInsertValue5), person.mobile=(free freshInsertValue6), person.first_name=(free freshInsertValue7), person.last_name=(free freshInsertValue8), person.email=(free freshInsertValue9), person.nationality=(free freshInsertValue10), person.religion=(free freshInsertValue11)})
[DBG] Run class Receptionist.Receptionist
-free patientInfo
after introduce null
[DBG] Run path 55466: [OutEdge(next=55031, label=), OutEdge(next=55043, label=), OutEdge(next=55050, label=), OutEdge(next=55045, label=), OutEdge(next=55069, label=), OutEdge(next=55076, label=), OutEdge(next=55083, label=), OutEdge(next=55090, label=), OutEdge(next=55103, label=), OutEdge(next=55104, label=!(i < patientID.length())), OutEdge(next=55105, label=), OutEdge(next=55147, label=), OutEdge(next=55148, label=!(tmpID2.length() < 4)), OutEdge(next=55149, label=), OutEdge(next=55173, label=), OutEdge(next=55180, label=), OutEdge(next=55187, label=), OutEdge(next=55194, label=), OutEdge(next=55201, label=), OutEdge(next=55214, label=), OutEdge(next=55215, label=!(i < personID.length())), OutEdge(next=55216, label=), OutEdge(next=55258, label=), OutEdge(next=55259, label=!(tmpID3.length() < 5)), OutEdge(next=55260, label=), OutEdge(next=55284, label=), OutEdge(next=55291, label=), OutEdge(next=55298, label=), OutEdge(next=55305, label=), OutEdge(next=55312, label=), OutEdge(next=55319, label=), OutEdge(next=55326, label=!(index > 0)), OutEdge(next=55327, label=), OutEdge(next=55358, label=), OutEdge(next=55359, label=!(index != 2)), OutEdge(next=55360, label=), OutEdge(next=55384, label=), OutEdge(next=55385, label=!(index != 2)), OutEdge(next=55386, label=), OutEdge(next=55410, label=), OutEdge(next=55417, label=), OutEdge(next=55424, label=), OutEdge(next=55431, label=), OutEdge(next=55438, label=), OutEdge(next=55445, label=), OutEdge(next=55452, label=), OutEdge(next=55459, label=)]
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT patient_id FROM patient WHERE patient_id = (SELECT MAX(patient_id) FROM patient);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT patient_id FROM patient WHERE patient_id = (SELECT MAX(patient_id) FROM patient);, values={})
customSelection: (resultset SELECT patient_id FROM patient WHERE patient_id = (SELECT patient_id FROM patient))
[DBG] Var patientID = (db patient.patient_id {patient.patient_id=(db patient.patient_id {})})
[DBG] Var tmpID = (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 55104 at !(i < patientID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (- (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) length []) (data PrimitiveTypeUsage{name='int'} 2))])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 55148 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[loop] new loop 55215 at !(i < personID.length())
[DBG] Var tmpID3 = (StrToInt (+ (IntToStr (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 55259 at !(tmpID3.length() < 5)
[loop] modify tmpID3
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var columnNames2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free patientInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index != 2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index != 2
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO person () VALUES ();)
[DBG] Var sql3 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO patient () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person () VALUES ();, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshInsertValue), person.user_id=(free freshInsertValue1), person.nic=(free freshInsertValue2), person.gender=(free freshInsertValue3), person.date_of_birth=(free freshInsertValue4), person.address=(free freshInsertValue5), person.mobile=(free freshInsertValue6), person.first_name=(free freshInsertValue7), person.last_name=(free freshInsertValue8), person.email=(free freshInsertValue9), person.nationality=(free freshInsertValue10), person.religion=(free freshInsertValue11)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO patient () VALUES ();, values={})
[DBG] add atom (INSERT patient {patient.patient_id=(free freshInsertValue12), patient.person_id=(free freshInsertValue13), patient.drug_allergies_and_reactions=(free freshInsertValue14)})
* Effectual method Receptionist.Receptionist.updatePatientInfo(java.lang.String, java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free patientID
-free info
after introduce null
[DBG] Run path 55532: [OutEdge(next=55494, label=), OutEdge(next=55506, label=), OutEdge(next=55513, label=), OutEdge(next=55508, label=)]
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET ) (free info)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = ')) (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[info]] WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '[[patientID]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db patient.person_id {patient.patient_id=(free patientID)})})
* Effectual method Receptionist.Receptionist.makeAppointment(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free day
-free timeSlot
after introduce null
[DBG] Run path 56130: [OutEdge(next=55678, label=), OutEdge(next=55690, label=), OutEdge(next=55691, label=!(Integer.parseInt(day) > 7)), OutEdge(next=55692, label=), OutEdge(next=55710, label=), OutEdge(next=55717, label=), OutEdge(next=55724, label=), OutEdge(next=55719, label=), OutEdge(next=55743, label=), OutEdge(next=55750, label=), OutEdge(next=55757, label=), OutEdge(next=55764, label=), OutEdge(next=55777, label=), OutEdge(next=55778, label=!(i < appointmentID.length())), OutEdge(next=55779, label=), OutEdge(next=55821, label=), OutEdge(next=55822, label=!(tmpID2.length() < 3)), OutEdge(next=55823, label=), OutEdge(next=55847, label=), OutEdge(next=55854, label=), OutEdge(next=55861, label=), OutEdge(next=55868, label=), OutEdge(next=55875, label=), OutEdge(next=55882, label=), OutEdge(next=55877, label=), OutEdge(next=55901, label=), OutEdge(next=55908, label=), OutEdge(next=55909, label=tmpday > today), OutEdge(next=55915, label=), OutEdge(next=55927, label=), OutEdge(next=55910, label=), OutEdge(next=55947, label=), OutEdge(next=55954, label=), OutEdge(next=55961, label=), OutEdge(next=55968, label=), OutEdge(next=55975, label=), OutEdge(next=55982, label=), OutEdge(next=55995, label=), OutEdge(next=56002, label=), OutEdge(next=56009, label=), OutEdge(next=56016, label=), OutEdge(next=56023, label=), OutEdge(next=56030, label=), OutEdge(next=56037, label=), OutEdge(next=56044, label=), OutEdge(next=56045, label=nextWeek == true), OutEdge(next=56051, label=), OutEdge(next=56063, label=), OutEdge(next=56046, label=), OutEdge(next=56083, label=), OutEdge(next=56090, label=), OutEdge(next=56097, label=), OutEdge(next=56092, label=), OutEdge(next=56116, label=), OutEdge(next=56123, label=)]
[DBG] Var nextWeek = (data PrimitiveTypeUsage{name='boolean'} false)
[COND] condition: Integer.parseInt(day) > 7
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT MAX(appointment_id) FROM appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT MAX(appointment_id) FROM appointment);, values={})
customSelection: (resultset SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT appointment_id FROM appointment))
[DBG] Var appointmentID = (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})})
[DBG] Var tmpID = (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 55778 at !(i < appointmentID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 55822 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7))))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} appointment_id,patient_id,slmc_reg_no,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} app) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO appointment (appointment_id,patient_id,slmc_reg_no,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} app) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (null from sql8)
[DBG] Var tmpDay = (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7))))
[WARN] scope is complex: System.out.println(tmpDay + "########################")
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] Short-circuit semantics may be ignored
[COND] condition: nextWeek == true
[DBG] Var appointmentFee = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500)
[DBG] Var billInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,appointment_fee )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500))
[DBG] Var sql4 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET appointment_fee = ' 500 ' WHERE tmp_bill_id = ') (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET appointment_fee = ' 500 ' WHERE tmp_bill_id = '[[?36]]';, values={36=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.appointment_fee=(data null ' 500 ')} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free day
-free timeSlot
after introduce null
[DBG] Run path 56426: [OutEdge(next=55678, label=), OutEdge(next=55690, label=), OutEdge(next=55691, label=!(Integer.parseInt(day) > 7)), OutEdge(next=55692, label=), OutEdge(next=55710, label=), OutEdge(next=55717, label=), OutEdge(next=55724, label=), OutEdge(next=55719, label=), OutEdge(next=55743, label=), OutEdge(next=55750, label=), OutEdge(next=55757, label=), OutEdge(next=55764, label=), OutEdge(next=55777, label=), OutEdge(next=55778, label=!(i < appointmentID.length())), OutEdge(next=55779, label=), OutEdge(next=55821, label=), OutEdge(next=55822, label=!(tmpID2.length() < 3)), OutEdge(next=55823, label=), OutEdge(next=55847, label=), OutEdge(next=55854, label=), OutEdge(next=55861, label=), OutEdge(next=55868, label=), OutEdge(next=55875, label=), OutEdge(next=55882, label=), OutEdge(next=55877, label=), OutEdge(next=55901, label=), OutEdge(next=55908, label=), OutEdge(next=55909, label=tmpday > today), OutEdge(next=55915, label=), OutEdge(next=55927, label=), OutEdge(next=55910, label=), OutEdge(next=55947, label=), OutEdge(next=55954, label=), OutEdge(next=55961, label=), OutEdge(next=55968, label=), OutEdge(next=55975, label=), OutEdge(next=55982, label=), OutEdge(next=55995, label=), OutEdge(next=56002, label=), OutEdge(next=56009, label=), OutEdge(next=56016, label=), OutEdge(next=56023, label=), OutEdge(next=56030, label=), OutEdge(next=56037, label=), OutEdge(next=56044, label=), OutEdge(next=56045, label=nextWeek == true), OutEdge(next=56051, label=), OutEdge(next=56063, label=), OutEdge(next=56046, label=), OutEdge(next=56083, label=), OutEdge(next=56090, label=), OutEdge(next=56097, label=), OutEdge(next=56092, label=), OutEdge(next=56116, label=), OutEdge(next=56123, label=), OutEdge(next=56130, label=ex(java.lang.ClassNotFoundException result = super.dbOperator.customInsertion(sql5))), OutEdge(next=56107, label=catch(java.lang.Exception e)), OutEdge(next=56131, label=), OutEdge(next=56143, label=), OutEdge(next=56138, label=), OutEdge(next=56162, label=), OutEdge(next=56169, label=), OutEdge(next=56182, label=), OutEdge(next=56183, label=!(i < billID.length())), OutEdge(next=56184, label=), OutEdge(next=56226, label=), OutEdge(next=56227, label=!(tmpID2.length() < 4)), OutEdge(next=56228, label=), OutEdge(next=56252, label=), OutEdge(next=56145, label=), OutEdge(next=56272, label=), OutEdge(next=56279, label=), OutEdge(next=56286, label=), OutEdge(next=56293, label=), OutEdge(next=56300, label=!(index > 0)), OutEdge(next=56301, label=), OutEdge(next=56332, label=), OutEdge(next=56333, label=!(index < 3)), OutEdge(next=56334, label=), OutEdge(next=56358, label=), OutEdge(next=56359, label=!(index < 3)), OutEdge(next=56360, label=), OutEdge(next=56384, label=), OutEdge(next=56391, label=), OutEdge(next=56398, label=), OutEdge(next=56405, label=), OutEdge(next=56412, label=), OutEdge(next=56419, label=)]
[DBG] Var nextWeek = (data PrimitiveTypeUsage{name='boolean'} false)
[COND] condition: Integer.parseInt(day) > 7
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT MAX(appointment_id) FROM appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT MAX(appointment_id) FROM appointment);, values={})
customSelection: (resultset SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT appointment_id FROM appointment))
[DBG] Var appointmentID = (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})})
[DBG] Var tmpID = (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 55778 at !(i < appointmentID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 55822 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7))))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} appointment_id,patient_id,slmc_reg_no,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} app) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO appointment (appointment_id,patient_id,slmc_reg_no,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} app) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (null from sql8)
[DBG] Var tmpDay = (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7))))
[WARN] scope is complex: System.out.println(tmpDay + "########################")
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] Short-circuit semantics may be ignored
[COND] condition: nextWeek == true
[DBG] Var appointmentFee = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500)
[DBG] Var billInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,appointment_fee )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500))
[DBG] Var sql4 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET appointment_fee = ' 500 ' WHERE tmp_bill_id = ') (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET appointment_fee = ' 500 ' WHERE tmp_bill_id = '[[?37]]';, values={37=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.appointment_fee=(data null ' 500 ')} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] unknown label: ex(java.lang.ClassNotFoundException result = super.dbOperator.customInsertion(sql5)), assuming to be true
[WARN] unknown label: catch(java.lang.Exception e), assuming to be true
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT tmp_bill_id FROM tmp_bill))
[DBG] Var billID = (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})})
[loop] new loop 56183 at !(i < billID.length())
[loop] new loop 56227 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var field = (invoke (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,appointment_fee )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500)) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO tmp_bill () VALUES ();)
[WARN] scope is complex: System.out.println(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: System.out.println("*******************************************************")
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO tmp_bill () VALUES ();, values={})
[DBG] add atom (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free day
-free timeSlot
after introduce null
[DBG] Run path 56433: [OutEdge(next=55678, label=), OutEdge(next=55690, label=), OutEdge(next=55691, label=!(Integer.parseInt(day) > 7)), OutEdge(next=55692, label=), OutEdge(next=55710, label=), OutEdge(next=55717, label=), OutEdge(next=55724, label=), OutEdge(next=55719, label=), OutEdge(next=55743, label=), OutEdge(next=55750, label=), OutEdge(next=55757, label=), OutEdge(next=55764, label=), OutEdge(next=55777, label=), OutEdge(next=55778, label=!(i < appointmentID.length())), OutEdge(next=55779, label=), OutEdge(next=55821, label=), OutEdge(next=55822, label=!(tmpID2.length() < 3)), OutEdge(next=55823, label=), OutEdge(next=55847, label=), OutEdge(next=55854, label=), OutEdge(next=55861, label=), OutEdge(next=55868, label=), OutEdge(next=55875, label=), OutEdge(next=55882, label=), OutEdge(next=55877, label=), OutEdge(next=55901, label=), OutEdge(next=55908, label=), OutEdge(next=55909, label=tmpday > today), OutEdge(next=55915, label=), OutEdge(next=55927, label=), OutEdge(next=55910, label=), OutEdge(next=55947, label=), OutEdge(next=55954, label=), OutEdge(next=55961, label=), OutEdge(next=55968, label=), OutEdge(next=55975, label=), OutEdge(next=55982, label=), OutEdge(next=55995, label=), OutEdge(next=56002, label=), OutEdge(next=56009, label=), OutEdge(next=56016, label=), OutEdge(next=56023, label=), OutEdge(next=56030, label=), OutEdge(next=56037, label=), OutEdge(next=56044, label=), OutEdge(next=56045, label=nextWeek == true), OutEdge(next=56051, label=), OutEdge(next=56063, label=), OutEdge(next=56046, label=), OutEdge(next=56083, label=), OutEdge(next=56090, label=), OutEdge(next=56097, label=), OutEdge(next=56092, label=), OutEdge(next=56116, label=), OutEdge(next=56123, label=), OutEdge(next=56130, label=), OutEdge(next=56099, label=)]
[DBG] Var nextWeek = (data PrimitiveTypeUsage{name='boolean'} false)
[COND] condition: Integer.parseInt(day) > 7
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT MAX(appointment_id) FROM appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT MAX(appointment_id) FROM appointment);, values={})
customSelection: (resultset SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT appointment_id FROM appointment))
[DBG] Var appointmentID = (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})})
[DBG] Var tmpID = (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 55778 at !(i < appointmentID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 55822 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7))))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} appointment_id,patient_id,slmc_reg_no,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} app) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO appointment (appointment_id,patient_id,slmc_reg_no,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} app) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (null from sql8)
[DBG] Var tmpDay = (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7))))
[WARN] scope is complex: System.out.println(tmpDay + "########################")
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] Short-circuit semantics may be ignored
[COND] condition: nextWeek == true
[DBG] Var appointmentFee = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500)
[DBG] Var billInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,appointment_fee )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500))
[DBG] Var sql4 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET appointment_fee = ' 500 ' WHERE tmp_bill_id = ') (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET appointment_fee = ' 500 ' WHERE tmp_bill_id = '[[?38]]';, values={38=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.appointment_fee=(data null ' 500 ')} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] scope is complex: super.dbOperator.customInsertion(sql7)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO appointment (appointment_id,patient_id,slmc_reg_no,date,cancelled) VALUES ('app[[tmpID2]]' , '[[patienID]]' , '[[doctorID]]' , '[[v39]] [[v40]]:00' , false );, values={})
[DBG] add atom (INSERT appointment {appointment.appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), appointment.patient_id=(free patienID), appointment.slmc_reg_no=(free doctorID), appointment.date=(free freshV39), appointment.cancelled=(data null false)})
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free day
-free timeSlot
after introduce null
[DBG] Run path 56440: [OutEdge(next=55678, label=), OutEdge(next=55690, label=), OutEdge(next=55691, label=!(Integer.parseInt(day) > 7)), OutEdge(next=55692, label=), OutEdge(next=55710, label=), OutEdge(next=55717, label=), OutEdge(next=55724, label=), OutEdge(next=55719, label=), OutEdge(next=55743, label=), OutEdge(next=55750, label=), OutEdge(next=55757, label=), OutEdge(next=55764, label=), OutEdge(next=55777, label=), OutEdge(next=55778, label=!(i < appointmentID.length())), OutEdge(next=55779, label=), OutEdge(next=55821, label=), OutEdge(next=55822, label=!(tmpID2.length() < 3)), OutEdge(next=55823, label=), OutEdge(next=55847, label=), OutEdge(next=55854, label=), OutEdge(next=55861, label=), OutEdge(next=55868, label=), OutEdge(next=55875, label=), OutEdge(next=55882, label=), OutEdge(next=55877, label=), OutEdge(next=55901, label=), OutEdge(next=55908, label=), OutEdge(next=55909, label=tmpday > today), OutEdge(next=55915, label=), OutEdge(next=55927, label=), OutEdge(next=55910, label=), OutEdge(next=55947, label=), OutEdge(next=55954, label=), OutEdge(next=55961, label=), OutEdge(next=55968, label=), OutEdge(next=55975, label=), OutEdge(next=55982, label=), OutEdge(next=55995, label=), OutEdge(next=56002, label=), OutEdge(next=56009, label=), OutEdge(next=56016, label=), OutEdge(next=56023, label=), OutEdge(next=56030, label=), OutEdge(next=56037, label=), OutEdge(next=56044, label=), OutEdge(next=56045, label=nextWeek == true), OutEdge(next=56051, label=), OutEdge(next=56063, label=), OutEdge(next=56046, label=), OutEdge(next=56083, label=), OutEdge(next=56090, label=), OutEdge(next=56097, label=), OutEdge(next=56092, label=), OutEdge(next=56116, label=), OutEdge(next=56123, label=), OutEdge(next=56130, label=), OutEdge(next=56099, label=), OutEdge(next=56433, label=)]
[DBG] Var nextWeek = (data PrimitiveTypeUsage{name='boolean'} false)
[COND] condition: Integer.parseInt(day) > 7
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT MAX(appointment_id) FROM appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT MAX(appointment_id) FROM appointment);, values={})
customSelection: (resultset SELECT appointment_id FROM appointment WHERE appointment_id = (SELECT appointment_id FROM appointment))
[DBG] Var appointmentID = (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})})
[DBG] Var tmpID = (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 55778 at !(i < appointmentID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (invoke (db appointment.appointment_id {appointment.appointment_id=(db appointment.appointment_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 55822 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7))))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} appointment_id,patient_id,slmc_reg_no,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} app) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO appointment (appointment_id,patient_id,slmc_reg_no,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} app) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (null from sql8)
[DBG] Var tmpDay = (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7))))
[WARN] scope is complex: System.out.println(tmpDay + "########################")
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] Short-circuit semantics may be ignored
[COND] condition: nextWeek == true
[DBG] Var appointmentFee = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500)
[DBG] Var billInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,appointment_fee )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 500))
[DBG] Var sql4 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET appointment_fee = ' 500 ' WHERE tmp_bill_id = ') (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET appointment_fee = ' 500 ' WHERE tmp_bill_id = '[[?41]]';, values={41=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.appointment_fee=(data null ' 500 ')} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] scope is complex: super.dbOperator.customInsertion(sql7)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO appointment (appointment_id,patient_id,slmc_reg_no,date,cancelled) VALUES ('app[[tmpID2]]' , '[[patienID]]' , '[[doctorID]]' , '[[v42]] [[v43]]:00' , false );, values={})
[DBG] add atom (INSERT appointment {appointment.appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), appointment.patient_id=(free patienID), appointment.slmc_reg_no=(free doctorID), appointment.date=(free freshV42), appointment.cancelled=(data null false)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql8)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE doctor_availability SET next_week_appointments = next_week_appointments + 1 WHERE time_slot = '[[timeSlot]]' AND slmc_reg_no = '[[doctorID]]' AND day = '[[?44]]';, values={44=(StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)))})
[DBG] add atom (UPDATE doctor_availability {doctor_availability.next_week_appointments=(+ (db doctor_availability.next_week_appointments null) (data null 1))} {doctor_availability.time_slot=(free timeSlot), doctor_availability.slmc_reg_no=(free doctorID), doctor_availability.day=(StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)))})
* Effectual method Receptionist.Receptionist.makeLabAppointment(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free testID
-free day
-free timeSlot
after introduce null
[DBG] Run path 56846: [OutEdge(next=56468, label=), OutEdge(next=56480, label=), OutEdge(next=56487, label=), OutEdge(next=56494, label=), OutEdge(next=56501, label=), OutEdge(next=56525, label=), OutEdge(next=56532, label=), OutEdge(next=56539, label=), OutEdge(next=56546, label=), OutEdge(next=56559, label=), OutEdge(next=56560, label=!(i < appointmentID.length())), OutEdge(next=56561, label=), OutEdge(next=56603, label=), OutEdge(next=56604, label=!(tmpID2.length() < 3)), OutEdge(next=56605, label=), OutEdge(next=56629, label=), OutEdge(next=56636, label=), OutEdge(next=56508, label=), OutEdge(next=56663, label=), OutEdge(next=56670, label=), OutEdge(next=56677, label=), OutEdge(next=56684, label=), OutEdge(next=56679, label=), OutEdge(next=56703, label=), OutEdge(next=56710, label=), OutEdge(next=56711, label=tmpday > today), OutEdge(next=56717, label=), OutEdge(next=56729, label=), OutEdge(next=56712, label=), OutEdge(next=56749, label=), OutEdge(next=56756, label=), OutEdge(next=56763, label=), OutEdge(next=56770, label=), OutEdge(next=56777, label=), OutEdge(next=56784, label=), OutEdge(next=56797, label=), OutEdge(next=56804, label=), OutEdge(next=56811, label=), OutEdge(next=56818, label=), OutEdge(next=56825, label=), OutEdge(next=56832, label=), OutEdge(next=56839, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var tmpID2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 56560 at !(i < appointmentID.length())
[loop] new loop 56604 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (free day))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_test_id = ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_day = ')) (free day)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql10 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free testID
-free day
-free timeSlot
after introduce null
[DBG] Run path 56900: [OutEdge(next=56468, label=), OutEdge(next=56480, label=), OutEdge(next=56487, label=), OutEdge(next=56494, label=), OutEdge(next=56501, label=), OutEdge(next=56525, label=), OutEdge(next=56532, label=), OutEdge(next=56539, label=), OutEdge(next=56546, label=), OutEdge(next=56559, label=), OutEdge(next=56560, label=!(i < appointmentID.length())), OutEdge(next=56561, label=), OutEdge(next=56603, label=), OutEdge(next=56604, label=!(tmpID2.length() < 3)), OutEdge(next=56605, label=), OutEdge(next=56629, label=), OutEdge(next=56636, label=), OutEdge(next=56508, label=), OutEdge(next=56663, label=), OutEdge(next=56670, label=), OutEdge(next=56677, label=), OutEdge(next=56684, label=), OutEdge(next=56679, label=), OutEdge(next=56703, label=), OutEdge(next=56710, label=), OutEdge(next=56711, label=tmpday > today), OutEdge(next=56717, label=), OutEdge(next=56729, label=), OutEdge(next=56712, label=), OutEdge(next=56749, label=), OutEdge(next=56756, label=), OutEdge(next=56763, label=), OutEdge(next=56770, label=), OutEdge(next=56777, label=), OutEdge(next=56784, label=), OutEdge(next=56797, label=), OutEdge(next=56804, label=), OutEdge(next=56811, label=), OutEdge(next=56818, label=), OutEdge(next=56825, label=), OutEdge(next=56832, label=), OutEdge(next=56839, label=), OutEdge(next=56846, label=), OutEdge(next=56853, label=), OutEdge(next=56860, label=), OutEdge(next=56867, label=), OutEdge(next=56862, label=), OutEdge(next=56886, label=), OutEdge(next=56893, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var tmpID2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 56560 at !(i < appointmentID.length())
[loop] new loop 56604 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (free day))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_test_id = ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_day = ')) (free day)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql10 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var appointmentFee = (db lab_test.test_fee {lab_test.test_id=(free testID)})
[DBG] Var billInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,laboratory_fee )) (db lab_test.test_fee {lab_test.test_id=(free testID)}))
[DBG] Var sql4 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET laboratory_fee = ' ) (db lab_test.test_fee {lab_test.test_id=(free testID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = ' [[?45]] ' WHERE tmp_bill_id = '[[?46]]';, values={45=(db lab_test.test_fee {lab_test.test_id=(free testID)}), 46=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(db lab_test.test_fee {lab_test.test_id=(free testID)})} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free testID
-free day
-free timeSlot
after introduce null
[DBG] Run path 57189: [OutEdge(next=56468, label=), OutEdge(next=56480, label=), OutEdge(next=56487, label=), OutEdge(next=56494, label=), OutEdge(next=56501, label=), OutEdge(next=56525, label=), OutEdge(next=56532, label=), OutEdge(next=56539, label=), OutEdge(next=56546, label=), OutEdge(next=56559, label=), OutEdge(next=56560, label=!(i < appointmentID.length())), OutEdge(next=56561, label=), OutEdge(next=56603, label=), OutEdge(next=56604, label=!(tmpID2.length() < 3)), OutEdge(next=56605, label=), OutEdge(next=56629, label=), OutEdge(next=56636, label=), OutEdge(next=56508, label=), OutEdge(next=56663, label=), OutEdge(next=56670, label=), OutEdge(next=56677, label=), OutEdge(next=56684, label=), OutEdge(next=56679, label=), OutEdge(next=56703, label=), OutEdge(next=56710, label=), OutEdge(next=56711, label=tmpday > today), OutEdge(next=56717, label=), OutEdge(next=56729, label=), OutEdge(next=56712, label=), OutEdge(next=56749, label=), OutEdge(next=56756, label=), OutEdge(next=56763, label=), OutEdge(next=56770, label=), OutEdge(next=56777, label=), OutEdge(next=56784, label=), OutEdge(next=56797, label=), OutEdge(next=56804, label=), OutEdge(next=56811, label=), OutEdge(next=56818, label=), OutEdge(next=56825, label=), OutEdge(next=56832, label=), OutEdge(next=56839, label=), OutEdge(next=56846, label=), OutEdge(next=56853, label=), OutEdge(next=56860, label=), OutEdge(next=56867, label=), OutEdge(next=56862, label=), OutEdge(next=56886, label=), OutEdge(next=56893, label=), OutEdge(next=56900, label=ex(java.lang.ClassNotFoundException result = super.dbOperator.customInsertion(sql5))), OutEdge(next=56877, label=catch(java.lang.Exception e)), OutEdge(next=56901, label=), OutEdge(next=56913, label=), OutEdge(next=56908, label=), OutEdge(next=56932, label=), OutEdge(next=56939, label=), OutEdge(next=56946, label=), OutEdge(next=56959, label=), OutEdge(next=56960, label=!(i < billID.length())), OutEdge(next=56961, label=), OutEdge(next=57003, label=), OutEdge(next=57004, label=!(tmpID2.length() < 4)), OutEdge(next=57005, label=), OutEdge(next=57029, label=), OutEdge(next=56915, label=), OutEdge(next=57049, label=), OutEdge(next=57056, label=), OutEdge(next=57063, label=), OutEdge(next=57070, label=), OutEdge(next=57077, label=!(index > 0)), OutEdge(next=57078, label=), OutEdge(next=57109, label=), OutEdge(next=57110, label=!(index < 3)), OutEdge(next=57111, label=), OutEdge(next=57135, label=), OutEdge(next=57136, label=!(index < 3)), OutEdge(next=57137, label=), OutEdge(next=57161, label=), OutEdge(next=57168, label=), OutEdge(next=57175, label=), OutEdge(next=57182, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var tmpID2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 56560 at !(i < appointmentID.length())
[loop] new loop 56604 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (free day))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_test_id = ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_day = ')) (free day)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql10 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var appointmentFee = (db lab_test.test_fee {lab_test.test_id=(free testID)})
[DBG] Var billInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,laboratory_fee )) (db lab_test.test_fee {lab_test.test_id=(free testID)}))
[DBG] Var sql4 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET laboratory_fee = ' ) (db lab_test.test_fee {lab_test.test_id=(free testID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = ' [[?47]] ' WHERE tmp_bill_id = '[[?48]]';, values={47=(db lab_test.test_fee {lab_test.test_id=(free testID)}), 48=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(db lab_test.test_fee {lab_test.test_id=(free testID)})} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] unknown label: ex(java.lang.ClassNotFoundException result = super.dbOperator.customInsertion(sql5)), assuming to be true
[WARN] unknown label: catch(java.lang.Exception e), assuming to be true
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT tmp_bill_id FROM tmp_bill))
[DBG] Var billID = (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})})
[DBG] Var tmpID = (invoke (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})}) toCharArray [])
[DBG] Var i = (null from i)
[loop] new loop 56960 at !(i < billID.length())
[loop] new loop 57004 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var field = (invoke (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,laboratory_fee )) (db lab_test.test_fee {lab_test.test_id=(free testID)})) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO tmp_bill () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO tmp_bill () VALUES ();, values={})
[DBG] add atom (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free testID
-free day
-free timeSlot
after introduce null
[DBG] Run path 57196: [OutEdge(next=56468, label=), OutEdge(next=56480, label=), OutEdge(next=56487, label=), OutEdge(next=56494, label=), OutEdge(next=56501, label=), OutEdge(next=56525, label=), OutEdge(next=56532, label=), OutEdge(next=56539, label=), OutEdge(next=56546, label=), OutEdge(next=56559, label=), OutEdge(next=56560, label=!(i < appointmentID.length())), OutEdge(next=56561, label=), OutEdge(next=56603, label=), OutEdge(next=56604, label=!(tmpID2.length() < 3)), OutEdge(next=56605, label=), OutEdge(next=56629, label=), OutEdge(next=56636, label=), OutEdge(next=56508, label=), OutEdge(next=56663, label=), OutEdge(next=56670, label=), OutEdge(next=56677, label=), OutEdge(next=56684, label=), OutEdge(next=56679, label=), OutEdge(next=56703, label=), OutEdge(next=56710, label=), OutEdge(next=56711, label=tmpday > today), OutEdge(next=56717, label=), OutEdge(next=56729, label=), OutEdge(next=56712, label=), OutEdge(next=56749, label=), OutEdge(next=56756, label=), OutEdge(next=56763, label=), OutEdge(next=56770, label=), OutEdge(next=56777, label=), OutEdge(next=56784, label=), OutEdge(next=56797, label=), OutEdge(next=56804, label=), OutEdge(next=56811, label=), OutEdge(next=56818, label=), OutEdge(next=56825, label=), OutEdge(next=56832, label=), OutEdge(next=56839, label=), OutEdge(next=56846, label=), OutEdge(next=56853, label=), OutEdge(next=56860, label=), OutEdge(next=56867, label=), OutEdge(next=56862, label=), OutEdge(next=56886, label=), OutEdge(next=56893, label=), OutEdge(next=56900, label=), OutEdge(next=56869, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var tmpID2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 56560 at !(i < appointmentID.length())
[loop] new loop 56604 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (free day))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_test_id = ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_day = ')) (free day)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql10 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var appointmentFee = (db lab_test.test_fee {lab_test.test_id=(free testID)})
[DBG] Var billInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,laboratory_fee )) (db lab_test.test_fee {lab_test.test_id=(free testID)}))
[DBG] Var sql4 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET laboratory_fee = ' ) (db lab_test.test_fee {lab_test.test_id=(free testID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = ' [[?49]] ' WHERE tmp_bill_id = '[[?50]]';, values={49=(db lab_test.test_fee {lab_test.test_id=(free testID)}), 50=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(db lab_test.test_fee {lab_test.test_id=(free testID)})} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] scope is complex: super.dbOperator.customInsertion(sql7)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES ('lapp[[tmpID2]]' , '[[testID]]' , '[[patienID]]' , '[[doctorID]]' , '[[v51]] [[v52]]:00' , false );, values={})
[DBG] add atom (INSERT lab_appointment {lab_appointment.lab_appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), lab_appointment.test_id=(free testID), lab_appointment.patient_id=(free patienID), lab_appointment.doctor_id=(free doctorID), lab_appointment.date=(free freshV51), lab_appointment.cancelled=(data null false)})
[DBG] Run class Receptionist.Receptionist
-free patienID
-free doctorID
-free testID
-free day
-free timeSlot
after introduce null
[DBG] Run path 57203: [OutEdge(next=56468, label=), OutEdge(next=56480, label=), OutEdge(next=56487, label=), OutEdge(next=56494, label=), OutEdge(next=56501, label=), OutEdge(next=56525, label=), OutEdge(next=56532, label=), OutEdge(next=56539, label=), OutEdge(next=56546, label=), OutEdge(next=56559, label=), OutEdge(next=56560, label=!(i < appointmentID.length())), OutEdge(next=56561, label=), OutEdge(next=56603, label=), OutEdge(next=56604, label=!(tmpID2.length() < 3)), OutEdge(next=56605, label=), OutEdge(next=56629, label=), OutEdge(next=56636, label=), OutEdge(next=56508, label=), OutEdge(next=56663, label=), OutEdge(next=56670, label=), OutEdge(next=56677, label=), OutEdge(next=56684, label=), OutEdge(next=56679, label=), OutEdge(next=56703, label=), OutEdge(next=56710, label=), OutEdge(next=56711, label=tmpday > today), OutEdge(next=56717, label=), OutEdge(next=56729, label=), OutEdge(next=56712, label=), OutEdge(next=56749, label=), OutEdge(next=56756, label=), OutEdge(next=56763, label=), OutEdge(next=56770, label=), OutEdge(next=56777, label=), OutEdge(next=56784, label=), OutEdge(next=56797, label=), OutEdge(next=56804, label=), OutEdge(next=56811, label=), OutEdge(next=56818, label=), OutEdge(next=56825, label=), OutEdge(next=56832, label=), OutEdge(next=56839, label=), OutEdge(next=56846, label=), OutEdge(next=56853, label=), OutEdge(next=56860, label=), OutEdge(next=56867, label=), OutEdge(next=56862, label=), OutEdge(next=56886, label=), OutEdge(next=56893, label=), OutEdge(next=56900, label=), OutEdge(next=56869, label=), OutEdge(next=57196, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var value = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} false)
[DBG] Var tmpID2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 4)
[loop] new loop 56560 at !(i < appointmentID.length())
[loop] new loop 56604 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data PrimitiveTypeUsage{name='int'} 0)
[DBG] Var tmpday = (IntToStr (free day))
[DBG] Var appDate = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var calendar = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var cal = (invoke (free Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))
[DBG] Var sql7 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ') (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} lapp) (unknown from null))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (free doctorID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])]) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (invoke (free timeSlot) substring [(data PrimitiveTypeUsage{name='int'} 0), (data PrimitiveTypeUsage{name='int'} 5)])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} :00))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' , false ))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_test_id = ')) (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ' AND app_day = ')) (free day)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[DBG] Var sql10 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var appointmentFee = (db lab_test.test_fee {lab_test.test_id=(free testID)})
[DBG] Var billInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} patient_id ) (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,laboratory_fee )) (db lab_test.test_fee {lab_test.test_id=(free testID)}))
[DBG] Var sql4 = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE tmp_bill SET laboratory_fee = ' ) (db lab_test.test_fee {lab_test.test_id=(free testID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = ' [[?53]] ' WHERE tmp_bill_id = '[[?54]]';, values={53=(db lab_test.test_fee {lab_test.test_id=(free testID)}), 54=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(db lab_test.test_fee {lab_test.test_id=(free testID)})} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] scope is complex: super.dbOperator.customInsertion(sql7)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES ('lapp[[tmpID2]]' , '[[testID]]' , '[[patienID]]' , '[[doctorID]]' , '[[v55]] [[v56]]:00' , false );, values={})
[DBG] add atom (INSERT lab_appointment {lab_appointment.lab_appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), lab_appointment.test_id=(free testID), lab_appointment.patient_id=(free patienID), lab_appointment.doctor_id=(free doctorID), lab_appointment.date=(free freshV55), lab_appointment.cancelled=(data null false)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql8)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = '[[timeSlot]]' AND app_test_id = '[[testID]]' AND app_day = '[[day]]';, values={})
[DBG] add atom (UPDATE lab_appointment_timetable {lab_appointment_timetable.current_week_appointments=(+ (db lab_appointment_timetable.current_week_appointments null) (data null 1))} {lab_appointment_timetable.time_slot=(free timeSlot), lab_appointment_timetable.app_test_id=(free testID), lab_appointment_timetable.app_day=(free day)})
* Effectual method Receptionist.Receptionist.cancelAppointment(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free appointmentID
after introduce null
[DBG] Run path 58945: [OutEdge(next=58907, label=), OutEdge(next=58919, label=), OutEdge(next=58926, label=), OutEdge(next=58921, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = ') (free appointmentID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)})
[DBG] Run class Receptionist.Receptionist
-free appointmentID
after introduce null
[DBG] Run path 58990: [OutEdge(next=58907, label=), OutEdge(next=58919, label=), OutEdge(next=58926, label=), OutEdge(next=58921, label=), OutEdge(next=58945, label=), OutEdge(next=58946, label=result == true), OutEdge(next=58952, label=), OutEdge(next=58964, label=), OutEdge(next=58971, label=), OutEdge(next=58966, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = ') (free appointmentID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)})
[COND] condition: result == true
[DBG] Var data = (null from null)
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT appointment.bill_id, bill.total FROM appointment INNER JOIN bill ON appointment.bill_id = bill.bill_id WHERE appointment_id = '[[appointmentID]]', values={})
customSelection: (unknown from null)
[DBG] Run class Receptionist.Receptionist
-free appointmentID
after introduce null
[DBG] Run path 59063: [OutEdge(next=58907, label=), OutEdge(next=58919, label=), OutEdge(next=58926, label=), OutEdge(next=58921, label=), OutEdge(next=58945, label=), OutEdge(next=58946, label=result == true), OutEdge(next=58952, label=), OutEdge(next=58964, label=), OutEdge(next=58971, label=), OutEdge(next=58966, label=), OutEdge(next=58990, label=), OutEdge(next=58997, label=), OutEdge(next=58998, label=!data.get(1).get(0).equals(\"NULL\")), OutEdge(next=59004, label=), OutEdge(next=59016, label=), OutEdge(next=59023, label=), OutEdge(next=59030, label=), OutEdge(next=59037, label=), OutEdge(next=59044, label=), OutEdge(next=59039, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = ') (free appointmentID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)})
[COND] condition: result == true
[DBG] Var data = (null from null)
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT appointment.bill_id, bill.total FROM appointment INNER JOIN bill ON appointment.bill_id = bill.bill_id WHERE appointment_id = '[[appointmentID]]', values={})
customSelection: (unknown from null)
[WARN] scope is complex: System.out.println(data)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: data.get(1).get(0).equals("NULL")
[WARN] scope is complex: data.get(1).get(0)
[COND] condition: !data.get(1).get(0).equals("NULL")
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var billID = (unknown from data.get(1).get(0))
[WARN] scope is complex: data.get(1).get(1)
[DBG] Var amount = (unknown from data.get(1).get(1))
[DBG] Var refundInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} bill_id ) (unknown from data.get(1).get(0))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,payment_type docApp,reason no_reason,amount )) (unknown from data.get(1).get(1)))
[WARN] don't know how to handle empty scope for refund(refundInfo)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE bill SET refund = 1 WHERE bill_id = '[[v57|data.get(1).get(0)]]', values={})
[DBG] add atom (UPDATE bill {bill.refund=(data null 1)} {bill.bill_id=(free freshData_get_1__get_0_)})
* Effectual method Receptionist.Receptionist.refund(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free refundInfo
after introduce null
[DBG] Run path 59451: [OutEdge(next=59162, label=), OutEdge(next=59174, label=), OutEdge(next=59169, label=), OutEdge(next=59193, label=), OutEdge(next=59200, label=), OutEdge(next=59207, label=), OutEdge(next=59214, label=), OutEdge(next=59227, label=), OutEdge(next=59228, label=!(i < refundID.length())), OutEdge(next=59229, label=), OutEdge(next=59271, label=), OutEdge(next=59272, label=!(tmpID2.length() < 4)), OutEdge(next=59273, label=), OutEdge(next=59297, label=), OutEdge(next=59304, label=), OutEdge(next=59311, label=), OutEdge(next=59318, label=), OutEdge(next=59325, label=), OutEdge(next=59332, label=!(index > 0)), OutEdge(next=59333, label=), OutEdge(next=59364, label=), OutEdge(next=59365, label=!(index < 3)), OutEdge(next=59366, label=), OutEdge(next=59390, label=), OutEdge(next=59391, label=!(index < 3)), OutEdge(next=59392, label=), OutEdge(next=59416, label=), OutEdge(next=59423, label=), OutEdge(next=59430, label=), OutEdge(next=59437, label=), OutEdge(next=59444, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT refund_id FROM refund WHERE refund_id = (SELECT MAX(refund_id) FROM bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT refund_id FROM refund WHERE refund_id = (SELECT MAX(refund_id) FROM bill);, values={})
[ERR] select table doesn't have refund_id, this is likely to be a bug in the original project; expr=(SELECT refund_id FROM bill)
customSelection: (resultset SELECT refund_id FROM refund WHERE refund_id = (SELECT refund_id FROM bill))
[DBG] Var refundID = (db refund.refund_id {refund.refund_id=(db refund.refund_id {})})
[DBG] Var tmpID = (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 1)
[loop] new loop 59228 at !(i < refundID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 1), (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 59272 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free refundInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[WARN] scope is complex: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
[WARN] scope is complex: Calendar.getInstance().getTime()
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])])
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO refund () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO refund () VALUES ();, values={})
[DBG] add atom (INSERT refund {refund.refund_id=(free freshInsertValue), refund.bill_id=(free freshInsertValue1), refund.payment_type=(free freshInsertValue2), refund.reason=(free freshInsertValue3), refund.amount=(free freshInsertValue4), refund.date=(free freshInsertValue5)})
* Effectual method Receptionist.Receptionist.cancelLabAppointment(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free appointmentID
after introduce null
[DBG] Run path 59517: [OutEdge(next=59479, label=), OutEdge(next=59491, label=), OutEdge(next=59498, label=), OutEdge(next=59493, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = ') (free appointmentID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)})
[DBG] Run class Receptionist.Receptionist
-free appointmentID
after introduce null
[DBG] Run path 59562: [OutEdge(next=59479, label=), OutEdge(next=59491, label=), OutEdge(next=59498, label=), OutEdge(next=59493, label=), OutEdge(next=59517, label=), OutEdge(next=59518, label=result == true), OutEdge(next=59524, label=), OutEdge(next=59536, label=), OutEdge(next=59543, label=), OutEdge(next=59538, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = ') (free appointmentID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)})
[COND] condition: result == true
[DBG] Var data = (null from null)
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment.bill_id, bill.total FROM lab_appointment INNER JOIN bill ON lab_appointment.bill_id = bill.bill_id WHERE lab_appointment_id = '[[appointmentID]]', values={})
customSelection: (unknown from null)
[DBG] Run class Receptionist.Receptionist
-free appointmentID
after introduce null
[DBG] Run path 59635: [OutEdge(next=59479, label=), OutEdge(next=59491, label=), OutEdge(next=59498, label=), OutEdge(next=59493, label=), OutEdge(next=59517, label=), OutEdge(next=59518, label=result == true), OutEdge(next=59524, label=), OutEdge(next=59536, label=), OutEdge(next=59543, label=), OutEdge(next=59538, label=), OutEdge(next=59562, label=), OutEdge(next=59569, label=), OutEdge(next=59570, label=!data.get(1).get(0).equals(\"NULL\")), OutEdge(next=59576, label=), OutEdge(next=59588, label=), OutEdge(next=59595, label=), OutEdge(next=59602, label=), OutEdge(next=59609, label=), OutEdge(next=59616, label=), OutEdge(next=59611, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = ') (free appointmentID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)})
[COND] condition: result == true
[DBG] Var data = (null from null)
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment.bill_id, bill.total FROM lab_appointment INNER JOIN bill ON lab_appointment.bill_id = bill.bill_id WHERE lab_appointment_id = '[[appointmentID]]', values={})
customSelection: (unknown from null)
[WARN] scope is complex: System.out.println(data)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: data.get(1).get(0).equals("NULL")
[WARN] scope is complex: data.get(1).get(0)
[COND] condition: !data.get(1).get(0).equals("NULL")
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var billID = (unknown from data.get(1).get(0))
[WARN] scope is complex: data.get(1).get(1)
[DBG] Var amount = (unknown from data.get(1).get(1))
[DBG] Var refundInfo = (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} bill_id ) (unknown from data.get(1).get(0))) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,payment_type labApp,reason no_reason,amount )) (unknown from data.get(1).get(1)))
[WARN] don't know how to handle empty scope for refund(refundInfo)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE bill SET refund = 1 WHERE bill_id = '[[v58|data.get(1).get(0)]]', values={})
[DBG] add atom (UPDATE bill {bill.refund=(data null 1)} {bill.bill_id=(free freshData_get_1__get_0_)})
* Effectual method Cashier.Cashier.bill(java.lang.String)
[DBG] Run class Cashier.Cashier
-free billInfo
after introduce null
[DBG] Run path 60781: [OutEdge(next=60485, label=), OutEdge(next=60497, label=), OutEdge(next=60492, label=), OutEdge(next=60516, label=), OutEdge(next=60523, label=), OutEdge(next=60530, label=), OutEdge(next=60537, label=), OutEdge(next=60550, label=), OutEdge(next=60551, label=!(i < billID.length())), OutEdge(next=60552, label=), OutEdge(next=60594, label=), OutEdge(next=60595, label=!(tmpID2.length() < 4)), OutEdge(next=60596, label=), OutEdge(next=60620, label=), OutEdge(next=60627, label=), OutEdge(next=60634, label=), OutEdge(next=60641, label=), OutEdge(next=60648, label=), OutEdge(next=60655, label=!(index > 0)), OutEdge(next=60656, label=), OutEdge(next=60687, label=), OutEdge(next=60688, label=!(index < 3)), OutEdge(next=60689, label=), OutEdge(next=60713, label=), OutEdge(next=60714, label=!(index < 3)), OutEdge(next=60715, label=), OutEdge(next=60739, label=), OutEdge(next=60746, label=), OutEdge(next=60753, label=), OutEdge(next=60760, label=), OutEdge(next=60767, label=), OutEdge(next=60774, label=)]
[DBG] Var result = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} 0)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT bill_id FROM bill WHERE bill_id = (SELECT MAX(bill_id) FROM bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT bill_id FROM bill WHERE bill_id = (SELECT MAX(bill_id) FROM bill);, values={})
customSelection: (resultset SELECT bill_id FROM bill WHERE bill_id = (SELECT bill_id FROM bill))
[DBG] Var billID = (db bill.bill_id {bill.bill_id=(db bill.bill_id {})})
[DBG] Var tmpID = (invoke (db bill.bill_id {bill.bill_id=(db bill.bill_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 3)
[loop] new loop 60551 at !(i < billID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db bill.bill_id {bill.bill_id=(db bill.bill_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 3), (- (invoke (db bill.bill_id {bill.bill_id=(db bill.bill_id {})}) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 60595 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free billInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[WARN] scope is complex: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
[WARN] scope is complex: Calendar.getInstance().getTime()
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])])
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO bill () VALUES ();)
[WARN] scope is complex: System.out.println(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO bill () VALUES ();, values={})
[DBG] add atom (INSERT bill {bill.bill_id=(free freshInsertValue), bill.bill_date=(free freshInsertValue1), bill.doctor_fee=(free freshInsertValue2), bill.hospital_fee=(free freshInsertValue3), bill.pharmacy_fee=(free freshInsertValue4), bill.laboratory_fee=(free freshInsertValue5), bill.appointment_fee=(free freshInsertValue6), bill.vat=(free freshInsertValue7), bill.discount=(free freshInsertValue8), bill.total=(free freshInsertValue9), bill.payment_method=(free freshInsertValue10), bill.consultant_id=(free freshInsertValue11), bill.patient_id=(free freshInsertValue12), bill.refund=(free freshInsertValue13)})
[DBG] Var res = (data null true)
* Effectual method Cashier.Cashier.removeFromTempBill(java.lang.String)
[DBG] Run class Cashier.Cashier
-free patientID
after introduce null
[DBG] Run path 60912: [OutEdge(next=60874, label=), OutEdge(next=60886, label=), OutEdge(next=60893, label=), OutEdge(next=60888, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} false)
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} DELETE FROM tmp_bill WHERE patient_id = ') (free patientID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=DELETE FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
[DBG] add atom (DELETE tmp_bill {tmp_bill.patient_id=(free patientID)})
* Effectual method Cashier.Cashier.refund(java.lang.String)
[DBG] Run class Cashier.Cashier
-free refundInfo
after introduce null
[DBG] Run path 61281: [OutEdge(next=60992, label=), OutEdge(next=61004, label=), OutEdge(next=60999, label=), OutEdge(next=61023, label=), OutEdge(next=61030, label=), OutEdge(next=61037, label=), OutEdge(next=61044, label=), OutEdge(next=61057, label=), OutEdge(next=61058, label=!(i < refundID.length())), OutEdge(next=61059, label=), OutEdge(next=61101, label=), OutEdge(next=61102, label=!(tmpID2.length() < 4)), OutEdge(next=61103, label=), OutEdge(next=61127, label=), OutEdge(next=61134, label=), OutEdge(next=61141, label=), OutEdge(next=61148, label=), OutEdge(next=61155, label=), OutEdge(next=61162, label=!(index > 0)), OutEdge(next=61163, label=), OutEdge(next=61194, label=), OutEdge(next=61195, label=!(index < 3)), OutEdge(next=61196, label=), OutEdge(next=61220, label=), OutEdge(next=61221, label=!(index < 3)), OutEdge(next=61222, label=), OutEdge(next=61246, label=), OutEdge(next=61253, label=), OutEdge(next=61260, label=), OutEdge(next=61267, label=), OutEdge(next=61274, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var sql2 = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} SELECT refund_id FROM refund WHERE refund_id = (SELECT MAX(refund_id) FROM bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT refund_id FROM refund WHERE refund_id = (SELECT MAX(refund_id) FROM bill);, values={})
[ERR] select table doesn't have refund_id, this is likely to be a bug in the original project; expr=(SELECT refund_id FROM bill)
customSelection: (resultset SELECT refund_id FROM refund WHERE refund_id = (SELECT refund_id FROM bill))
[DBG] Var refundID = (db refund.refund_id {refund.refund_id=(db refund.refund_id {})})
[DBG] Var tmpID = (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) toCharArray [])
[DBG] Var i = (data PrimitiveTypeUsage{name='int'} 1)
[loop] new loop 61058 at !(i < refundID.length())
[DBG] Var tmpID2 = (StrToInt (+ (IntToStr (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) substring [(data PrimitiveTypeUsage{name='int'} 1), (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) length [])])) (data PrimitiveTypeUsage{name='int'} 1)))
[loop] new loop 61102 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var rowData = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var field = (invoke (free refundInfo) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ,)])
[DBG] Var index = (data PrimitiveTypeUsage{name='int'} 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[WARN] scope is complex: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
[WARN] scope is complex: Calendar.getInstance().getTime()
[WARN-INT] unknown arg type ReferenceType{java.util.Calendar, typeParametersMap=TypeParametersMap{nameToValue={}}}
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (free Calendar) getInstance []) getTime [])])
[DBG] Var sql = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} INSERT INTO refund () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO refund () VALUES ();, values={})
[DBG] add atom (INSERT refund {refund.refund_id=(free freshInsertValue), refund.bill_id=(free freshInsertValue1), refund.payment_type=(free freshInsertValue2), refund.reason=(free freshInsertValue3), refund.amount=(free freshInsertValue4), refund.date=(free freshInsertValue5)})
* Effectual method Cashier.Cashier.makeRefund(java.lang.String)
[DBG] Run class Cashier.Cashier
-free id
after introduce null
[DBG] Run path 61406: [OutEdge(next=61368, label=), OutEdge(next=61380, label=), OutEdge(next=61387, label=), OutEdge(next=61382, label=)]
[DBG] Var sql = (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} DELETE FROM refund WHERE refund_id = ') (free id)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} '))
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=DELETE FROM refund WHERE refund_id = '[[id]]', values={})
[DBG] add atom (DELETE refund {refund.refund_id=(free id)})
* Effectual method Cashier.Cashier.updateProfileInfo(java.lang.String)
[DBG] Run class Cashier.Cashier
-free info
after introduce null
[DBG] Run path 61631: [OutEdge(next=61545, label=), OutEdge(next=61557, label=), OutEdge(next=61564, label=), OutEdge(next=61571, label=), OutEdge(next=61584, label=), OutEdge(next=61591, label=), OutEdge(next=61598, label=), OutEdge(next=61605, label=), OutEdge(next=61612, label=), OutEdge(next=61607, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[DBG] Var tmplen = (+ (invoke (unknown from tmpData[0]) length []) (data PrimitiveTypeUsage{name='int'} 1))
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE person SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = ')) (unknown from this.userID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v59]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '[[v60|this.userID]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})
* Effectual method Cashier.Cashier.updateAccountInfo(java.lang.String)
[DBG] Run class Cashier.Cashier
-free info
after introduce null
[DBG] Run path 61738: [OutEdge(next=61659, label=), OutEdge(next=61671, label=), OutEdge(next=61678, label=), OutEdge(next=61685, label=), OutEdge(next=61698, label=), OutEdge(next=61705, label=), OutEdge(next=61712, label=), OutEdge(next=61719, label=), OutEdge(next=61714, label=)]
[DBG] Var result = (data PrimitiveTypeUsage{name='boolean'} true)
[DBG] Var column_data = (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} )
[DBG] Var tmpInfo = (invoke (free info) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} #)])
[DBG] Var tmpData = (invoke (free s) split [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} UPDATE sys_user SET ) (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) substring [(data PrimitiveTypeUsage{name='int'} 0), (- (invoke (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ) length []) (data PrimitiveTypeUsage{name='int'} 1))])) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}}  )) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} WHERE user_id = ')) (unknown from this.userID)) (data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v61]] WHERE user_id = '[[v62|this.userID]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method Doctor.DoctorController.editBasicInfo()
* Effectual method Doctor.DoctorController.editDoctorInfo()
* Effectual method Doctor.DoctorController.editUserInfo()
* Effectual method Doctor.DoctorController.editPasswordInfo()
* Effectual method Doctor.DoctorController.addPatientAllergies()
* Effectual method Pharmacist.PharmacistController.claculatePharmacyBill()
* Effectual method Pharmacist.AddNewDrugController.addNewStock()
[WARN] unable to resolve manuDate.getValue()
[WARN] unable to resolve manuDate.getValue()
[WARN] unable to resolve expDate.getValue()
[WARN] unable to resolve expDate.getValue()
* Effectual method Pharmacist.PharmacistController.editBasicInfo()
* Effectual method Pharmacist.PharmacistController.editPharmacistInfo()
* Effectual method Pharmacist.PharmacistController.editUserInfo()
* Effectual method Pharmacist.PharmacistController.editPasswordInfo()
* Effectual method Pharmacist.PharmacistController.issueBill()
* Effectual method LabAssistant.LabAssistantController.editBasicInfo()
* Effectual method LabAssistant.LabAssistantController.editLabInfo()
* Effectual method LabAssistant.LabAssistantController.editUserInfo()
* Effectual method LabAssistant.LabAssistantController.editPasswordInfo()
* Effectual method LabAssistant.LabAssistantController.savePathalogyTest()
* Effectual method LabAssistant.LabAssistantController.saveLipidTest()
* Effectual method LabAssistant.LabAssistantController.saveBloodGroupTest()
* Effectual method LabAssistant.LabAssistantController.saveCompleteBlood()
* Effectual method LabAssistant.LabAssistantController.saveRenalTest()
* Effectual method LabAssistant.LabAssistantController.saveCreatineTest()
* Effectual method LabAssistant.LabAssistantController.saveHIV()
* Effectual method LabAssistant.LabAssistantController.saveLiverFunctionTest()
* Effectual method Admin.AdminController.editBasicInfo()
* Effectual method Admin.AdminController.editUserInfo()
* Effectual method Admin.AdminController.editPasswordInfo()
* Effectual method Admin.AdminController.createUser(javafx.event.ActionEvent)
* Effectual method Admin.SysUserController.suspend()
* Effectual method Admin.SysUserController.resetPassword()
* Effectual method com.hms.hms_test_2.LogoutController.logout()
* Effectual method com.hms.hms_test_2.NewMessageController.send()
* Effectual method com.hms.hms_test_2.ReadMessageController.delete()
* Effectual method Pharmacist.PharmacistController.editProfilePic()
* Effectual method Receptionist.ReceptionistController.editProfilePic()
* Effectual method Admin.AdminController.editProfilePic()
* Effectual method LabAssistant.LabAssistantController.editProfilePic()
* Effectual method Cashier.CashierController.editProfilePic()
* Effectual method Doctor.DoctorController.editProfilePic()
* Effectual method com.hms.hms_test_2.ReadMessageController.fillMessage()
* Effectual method Receptionist.ReceptionistController.editBasicInfo()
* Effectual method Receptionist.ReceptionistController.editUserInfo()
* Effectual method Receptionist.ReceptionistController.editPasswordInfo()
* Effectual method Receptionist.ReceptionistController.patientAdd()
* Effectual method Receptionist.ReceptionistController.makeAppointment()
* Effectual method Receptionist.ReceptionistController.cancelAppointment()
* Effectual method Cashier.CashierController.issueBill()
* Effectual method com.hms.hms_test_2.PopupAskController.yes()
* Effectual method Cashier.CashierController.editBasicInfo()
* Effectual method Cashier.CashierController.editUserInfo()
* Effectual method Cashier.CashierController.editPasswordInfo()
* Effectual method com.hms.hms_test_2.LoginController.loadPharmacist(java.lang.String)
* Effectual method com.hms.hms_test_2.LoginController.loadReceptionist(java.lang.String)
* Effectual method com.hms.hms_test_2.LoginController.loadAdmin(java.lang.String)
* Effectual method com.hms.hms_test_2.LoginController.loadLabAssistant(java.lang.String)
* Effectual method com.hms.hms_test_2.LoginController.loadCashier(java.lang.String)
* Effectual method com.hms.hms_test_2.LoginController.loadDoctor(java.lang.String)
* Effectual method com.hms.hms_test_2.AllMessagesController.showMessage()
* Effectual method com.hms.hms_test_2.LoginController.login()
[RIGI] Op_Doctor_Doctor_updateProfileInfo_75562
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(db doctor.user_id {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})})})]
[RIGI] Op_Doctor_Doctor_updateDoctorInfo_75563
    [COND] []
    [SOP]  [(UPDATE doctor {doctor.education=(free freshEducation), doctor.training=(free freshTraining), doctor.experienced_areas=(free freshExperienced_areas), doctor.experience=(free freshExperience), doctor.achievements=(free freshAchievements), doctor.channelling_fee=(free freshChannelling_fee)} {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})]
[RIGI] Op_Doctor_Doctor_updateAccountInfo_75564
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(db doctor.user_id {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})})]
[RIGI] Op_Doctor_Doctor_diagnose_75565
    [COND] []
    [SOP]  [(INSERT medical_history {medical_history.history_id=(free freshTmpID2), medical_history.patient_id=(free patientID), medical_history.doctor_id=(free freshThis_slmcRegNo), medical_history.date=(free freshV8), medical_history.history=(free diagnostic)})]
[RIGI] Op_Doctor_Doctor_bill_75566
    [COND] []
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(free labFee)} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})]
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3))]
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(free labFee)} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})}), (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})]
[RIGI] Op_Doctor_Doctor_allergies_75567
    [COND] []
    [SOP]  []
    [COND] []
    [SOP]  [(UPDATE patient {patient.drug_allergies_and_reactions=(db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})} {patient.patient_id=(free patientID)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewDrug_75568
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3))]
    [SOP]  [(INSERT drug {drug.drug_id=(free freshInsertValue), drug.drug_name=(free freshInsertValue1), drug.dangerous_drug=(free freshInsertValue2)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewStock_75569
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (unknown from (index == 2) || (index == 5) || (index == 6)), (unknown from (index == 2) || (index == 5) || (index == 6))]
[ERR] unknown cond (unknown from (index == 2) || (index == 5) || (index == 6))
[ERR] unknown cond (unknown from (index == 2) || (index == 5) || (index == 6))
    [SOP]  [(INSERT pharmacy_stock {pharmacy_stock.stock_id=(free freshInsertValue), pharmacy_stock.drug_id=(free freshInsertValue1), pharmacy_stock.brand_id=(free freshInsertValue2), pharmacy_stock.stock=(free freshInsertValue3), pharmacy_stock.remaining_quantity=(free freshInsertValue4), pharmacy_stock.manufac_date=(free freshInsertValue5), pharmacy_stock.exp_date=(free freshInsertValue6), pharmacy_stock.supplier_id=(free freshInsertValue7), pharmacy_stock.date=(free freshInsertValue8)})]
[RIGI] Op_Pharmacist_Pharmacist_reduceStock_75570
    [COND] []
    [SOP]  [(UPDATE pharmacy_stock {pharmacy_stock.remaining_quantity=(- (db pharmacy_stock.remaining_quantity null) (free qt))} {pharmacy_stock.stock_id=(free stkID)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewDrug2_75571
    [COND] []
    [SOP]  [(INSERT drug {drug.drug_id=(free freshTmpID2), drug.drug_name=(free genName), drug.dangerous_drug=(data null 0)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewBrand_75572
    [COND] []
    [SOP]  [(INSERT drug_brand_names {drug_brand_names.brand_id=(free freshTmpID2), drug_brand_names.brand_name=(free brandName), drug_brand_names.generic_name=(free genName), drug_brand_names.drug_type=(free type), drug_brand_names.drug_unit=(free unit), drug_brand_names.unit_price=(free price)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewSupplier_75573
    [COND] []
    [SOP]  [(INSERT suppliers {suppliers.supplier_id=(free freshTmpID2), suppliers.supplier_name=(free suppName)})]
[RIGI] Op_Pharmacist_Pharmacist_updateStock_75574
    [COND] []
    [SOP]  [(INSERT pharmacy_stock {pharmacy_stock.stock_id=(free freshTmpID2), pharmacy_stock.drug_id=(free drugID), pharmacy_stock.brand_id=(free brandID), pharmacy_stock.stock=(free stock), pharmacy_stock.remaining_quantity=(free stock), pharmacy_stock.manufac_date=(free manuDate), pharmacy_stock.exp_date=(free expDate), pharmacy_stock.supplier_id=(free suppID), pharmacy_stock.date=(free date)})]
[RIGI] Op_Pharmacist_Pharmacist_updateProfileInfo_75575
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_name=(free freshSuper_username)})})]
[RIGI] Op_Pharmacist_Pharmacist_updatePharmacistInfo_75576
    [COND] []
    [SOP]  [(UPDATE pharmacist {pharmacist.education=(free freshEducation), pharmacist.training=(free freshTraining), pharmacist.experience=(free freshExperience), pharmacist.achievements=(free freshAchievements)} {pharmacist.pharmacist_id=(free freshThis_pharmacistID)})]
[RIGI] Op_Pharmacist_Pharmacist_updateAccountInfo_75577
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
[RIGI] Op_Pharmacist_Pharmacist_bill_75578
    [COND] []
    [SOP]  [(UPDATE tmp_bill {tmp_bill.pharmacy_fee=(free pharmacyFee)} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})]
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3))]
    [SOP]  [(UPDATE tmp_bill {tmp_bill.pharmacy_fee=(free pharmacyFee)} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})}), (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})]
[RIGI] Op_LabAssistant_LabAssistant_updateProfileInfo_75579
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_name=(free freshSuper_username)})})]
[RIGI] Op_LabAssistant_LabAssistant_updateLabAssistantInfo_75580
    [COND] []
    [SOP]  [(UPDATE lab_assistant {lab_assistant.education=(free freshEducation), lab_assistant.training=(free freshTraining), lab_assistant.experience=(free freshExperience), lab_assistant.achievements=(free freshAchievements)} {lab_assistant.lab_assistant_id=(free freshThis_labAssistantID)})]
[RIGI] Op_LabAssistant_LabAssistant_updateAccountInfo_75581
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
[RIGI] Op_LabAssistant_LabAssistant_UrineFullReport_75582
    [COND] []
    [SOP]  [(INSERT UrineFullReport {UrineFullReport.tst_ur_id=(free freshTmpID2), UrineFullReport.appointment_id=(free appointment_id), UrineFullReport.appearance=(free appearance), UrineFullReport.sgRefractometer=(free sgRefractometer), UrineFullReport.ph=(free ph), UrineFullReport.protein=(free protein), UrineFullReport.glucose=(free glucose), UrineFullReport.ketoneBodies=(free ketoneBodies), UrineFullReport.bilirubin=(free bilirubin), UrineFullReport.urobilirubin=(free urobilirubin), UrineFullReport.contrifugedDepositsphaseContrastMicroscopy=(free contrifugedDepositsphaseContrastMicroscopy), UrineFullReport.pusCells=(free pusCells), UrineFullReport.redCells=(free redCells), UrineFullReport.epithelialCells=(free epithelialCells), UrineFullReport.casts=(free casts), UrineFullReport.cristals=(free cristals), UrineFullReport.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_LipidTest_75583
    [COND] []
    [SOP]  [(INSERT LipidTest {LipidTest.tst_li_id=(free freshTmpID2), LipidTest.appointment_id=(free appointment_id), LipidTest.cholestrolHDL=(free cholestrolHDL), LipidTest.cholestrolLDL=(free cholestrolLDL), LipidTest.triglycerides=(free triglycerides), LipidTest.totalCholestrolLDLHDLratio=(free totalCholestrolLDLHDLratio), LipidTest.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_BloodGroupingTest_75584
    [COND] []
    [SOP]  [(INSERT BloodGroupingRh {BloodGroupingRh.tst_bloodG_id=(free freshTmpID2), BloodGroupingRh.appointment_id=(free app_id), BloodGroupingRh.bloodGroup=(free bloodG), BloodGroupingRh.rhesusD=(free rhD), BloodGroupingRh.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_completeBloodCount_75585
    [COND] []
    [SOP]  [(INSERT completeBloodCount {completeBloodCount.tst_CBC_id=(free freshTmpID2), completeBloodCount.appointment_id=(free appointment_id), completeBloodCount.totalWhiteCellCount=(free totalWhiteCellCount), completeBloodCount.differentialCount=(free differentialCount), completeBloodCount.neutrophils=(free neutrophils), completeBloodCount.lymphocytes=(free lymphocytes), completeBloodCount.monocytes=(free monocytes), completeBloodCount.eosonophils=(free eosonophils), completeBloodCount.basophils=(free basophils), completeBloodCount.haemoglobin=(free haemoglobin), completeBloodCount.redBloodCells=(free redBloodCells), completeBloodCount.meanCellVolume=(free meanCellVolume), completeBloodCount.haematocrit=(free haematocrit), completeBloodCount.meanCellHaemoglobin=(free meanCellHaemoglobin), completeBloodCount.mchConcentration=(free mchConcentration), completeBloodCount.redCellsDistributionWidth=(free redCellsDistributionWidth), completeBloodCount.plateletCount=(free plateletCount), completeBloodCount.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_RenalFunctionTest_75586
    [COND] []
    [SOP]  [(INSERT RenalFunctionTest {RenalFunctionTest.tst_renal_id=(free freshTmpID2), RenalFunctionTest.appointment_id=(free appointment_id), RenalFunctionTest.creatinine=(free creatinine), RenalFunctionTest.urea=(free urea), RenalFunctionTest.totalBilirubin=(free totalBilirubin), RenalFunctionTest.directBilirubin=(free directBilirubin), RenalFunctionTest.sgotast=(free sgotast), RenalFunctionTest.sgptalt=(free sgptalt), RenalFunctionTest.alkalinePhospates=(free alkalinePhospates), RenalFunctionTest.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_SeriumCreatinePhosphokinaseTotal_75587
    [COND] []
    [SOP]  [(INSERT SeriumCreatinePhosphokinaseTotal {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(free freshTmpID2), SeriumCreatinePhosphokinaseTotal.appointment_id=(free appointment_id), SeriumCreatinePhosphokinaseTotal.cpkTotal=(free cpkTotal), SeriumCreatinePhosphokinaseTotal.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_SeriumCreatinePhosphokinase_75588
    [COND] []
    [SOP]  [(INSERT SeriumCreatinePhosphokinase {SeriumCreatinePhosphokinase.tst_SCP_id=(free freshTmpID2), SeriumCreatinePhosphokinase.appointment_id=(free appointment_id), SeriumCreatinePhosphokinase.hiv12ELISA=(free hiv12ELISA), SeriumCreatinePhosphokinase.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_liverFunctionTest_75589
    [COND] []
    [SOP]  [(INSERT LiverFunctionTest {LiverFunctionTest.tst_liver_id=(free freshTmpID2), LiverFunctionTest.appointment_id=(free appointment_id), LiverFunctionTest.totalProtein=(free totalProtein), LiverFunctionTest.albumin=(free albumin), LiverFunctionTest.globulin=(free globulin), LiverFunctionTest.totalBilirubin=(free totalBilirubin), LiverFunctionTest.directBilirubin=(free directBilirubin), LiverFunctionTest.sgotast=(free sgotast), LiverFunctionTest.sgptalt=(free sgptalt), LiverFunctionTest.alkalinePhospates=(free alkalinePhospates), LiverFunctionTest.date=(free now)})]
[RIGI] Op_Admin_Admin_updateProfileInfo_75590
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})]
[RIGI] Op_Admin_Admin_updateAccountInfo_75591
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
[RIGI] Op_Admin_Admin_createNewUser_75592
    [COND] []
    [SOP]  [(INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})]
    [COND] []
    [SOP]  [(INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)}), (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null '1234')})]
    [COND] []
    [SOP]  [(INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)}), (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null '1234')}), (UPDATE person {person.user_id=(free freshTmpID25)} {person.person_id=(free freshTmpID24)})]
    [COND] [(unknown from (userType == "doctor") || (userType == "pharmacist") || (userType == "lab_assistant"))]
[ERR] unknown cond (unknown from (userType == "doctor") || (userType == "pharmacist") || (userType == "lab_assistant"))
    [SOP]  [(INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)}), (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null '1234')}), (UPDATE person {person.user_id=(free freshTmpID25)} {person.person_id=(free freshTmpID24)}), (INSERT doctor {doctor.slmc_reg_no=(free slmcReg), doctor.user_id=(free freshTmpID26)})]
[RIGI] Op_Admin_Admin_suspendUser_75593
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.suspend=(data null 1)} {sys_user.user_id=(free userid)})]
[RIGI] Op_Admin_Admin_unsuspendUser_75594
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.suspend=(data null 0)} {sys_user.user_id=(free userid)})]
[RIGI] Op_Admin_Admin_resetPassword_75595
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.password=(data null '123456')} {sys_user.user_id=(free userid)})]
[RIGI] Op_com_hms_hms_test_2_User_saveLogin_75596
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.online=(data null 1), sys_user.login=(free now)} {sys_user.user_name=(free username)})]
[RIGI] Op_com_hms_hms_test_2_User_saveLogout_75597
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.online=(data null 0), sys_user.logout=(free now)} {sys_user.user_name=(free username)})]
[RIGI] Op_com_hms_hms_test_2_User_sendMessage_75598
    [COND] []
    [SOP]  [(INSERT user_message {user_message.message_id=(free freshTmpID2), user_message.reciver=(free receiver), user_message.sender=(free sender), user_message.subject=(free subject), user_message.message=(free message), user_message.date=(free freshV30)})]
[RIGI] Op_com_hms_hms_test_2_User_deleteMessage_75599
    [COND] []
    [SOP]  [(DELETE user_message {user_message.message_id=(free msgID)})]
[RIGI] Op_com_hms_hms_test_2_User_setProfilePic_75600
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.profile_pic=(free name)} {sys_user.user_name=(free freshThis_username)})]
[RIGI] Op_com_hms_hms_test_2_User_setMessageRead_75601
    [COND] []
    [SOP]  [(UPDATE user_message {user_message.rd=(data null '1')} {user_message.message_id=(free msgID)})]
[RIGI] Op_Receptionist_Receptionist_updateProfileInfo_75602
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})]
[RIGI] Op_Receptionist_Receptionist_updateAccountInfo_75603
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
[RIGI] Op_Receptionist_Receptionist_setPatientInfo_75604
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (!= (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 2)), (!= (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 2))]
    [SOP]  [(INSERT person {person.person_id=(free freshInsertValue), person.user_id=(free freshInsertValue1), person.nic=(free freshInsertValue2), person.gender=(free freshInsertValue3), person.date_of_birth=(free freshInsertValue4), person.address=(free freshInsertValue5), person.mobile=(free freshInsertValue6), person.first_name=(free freshInsertValue7), person.last_name=(free freshInsertValue8), person.email=(free freshInsertValue9), person.nationality=(free freshInsertValue10), person.religion=(free freshInsertValue11)})]
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (!= (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 2)), (!= (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 2))]
    [SOP]  [(INSERT person {person.person_id=(free freshInsertValue), person.user_id=(free freshInsertValue1), person.nic=(free freshInsertValue2), person.gender=(free freshInsertValue3), person.date_of_birth=(free freshInsertValue4), person.address=(free freshInsertValue5), person.mobile=(free freshInsertValue6), person.first_name=(free freshInsertValue7), person.last_name=(free freshInsertValue8), person.email=(free freshInsertValue9), person.nationality=(free freshInsertValue10), person.religion=(free freshInsertValue11)}), (INSERT patient {patient.patient_id=(free freshInsertValue12), patient.person_id=(free freshInsertValue13), patient.drug_allergies_and_reactions=(free freshInsertValue14)})]
[RIGI] Op_Receptionist_Receptionist_updatePatientInfo_75605
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db patient.person_id {patient.patient_id=(free patientID)})})]
[RIGI] Op_Receptionist_Receptionist_makeAppointment_75606
    [COND] [(> (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)), (> (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)))) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])), (== (data PrimitiveTypeUsage{name='boolean'} false) (data PrimitiveTypeUsage{name='boolean'} true))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.appointment_fee=(data null ' 500 ')} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})]
    [COND] [(> (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)), (> (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)))) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])), (== (data PrimitiveTypeUsage{name='boolean'} false) (data PrimitiveTypeUsage{name='boolean'} true)), (> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.appointment_fee=(data null ' 500 ')} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})]
    [COND] [(> (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)), (> (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)))) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])), (== (data PrimitiveTypeUsage{name='boolean'} false) (data PrimitiveTypeUsage{name='boolean'} true))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.appointment_fee=(data null ' 500 ')} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT appointment {appointment.appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), appointment.patient_id=(free patienID), appointment.slmc_reg_no=(free doctorID), appointment.date=(free freshV39), appointment.cancelled=(data null false)})]
    [COND] [(> (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)), (> (IntToStr (StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)))) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])), (== (data PrimitiveTypeUsage{name='boolean'} false) (data PrimitiveTypeUsage{name='boolean'} true))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.appointment_fee=(data null ' 500 ')} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT appointment {appointment.appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), appointment.patient_id=(free patienID), appointment.slmc_reg_no=(free doctorID), appointment.date=(free freshV42), appointment.cancelled=(data null false)}), (UPDATE doctor_availability {doctor_availability.next_week_appointments=(+ (db doctor_availability.next_week_appointments null) (data null 1))} {doctor_availability.time_slot=(free timeSlot), doctor_availability.slmc_reg_no=(free doctorID), doctor_availability.day=(StrToInt (- (IntToStr (free day)) (data PrimitiveTypeUsage{name='int'} 7)))})]
[RIGI] Op_Receptionist_Receptionist_makeLabAppointment_75607
    [COND] [(> (IntToStr (free day)) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)]))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  []
    [COND] [(> (IntToStr (free day)) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)]))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(db lab_test.test_fee {lab_test.test_id=(free testID)})} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})]
    [COND] [(> (IntToStr (free day)) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])), (> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(db lab_test.test_fee {lab_test.test_id=(free testID)})} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})]
    [COND] [(> (IntToStr (free day)) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)]))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(db lab_test.test_fee {lab_test.test_id=(free testID)})} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT lab_appointment {lab_appointment.lab_appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), lab_appointment.test_id=(free testID), lab_appointment.patient_id=(free patienID), lab_appointment.doctor_id=(free doctorID), lab_appointment.date=(free freshV51), lab_appointment.cancelled=(data null false)})]
    [COND] [(> (IntToStr (free day)) (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)]))]
[ERR] Call.toRigi: (invoke (invoke (free Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(db lab_test.test_fee {lab_test.test_id=(free testID)})} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT lab_appointment {lab_appointment.lab_appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), lab_appointment.test_id=(free testID), lab_appointment.patient_id=(free patienID), lab_appointment.doctor_id=(free doctorID), lab_appointment.date=(free freshV55), lab_appointment.cancelled=(data null false)}), (UPDATE lab_appointment_timetable {lab_appointment_timetable.current_week_appointments=(+ (db lab_appointment_timetable.current_week_appointments null) (data null 1))} {lab_appointment_timetable.time_slot=(free timeSlot), lab_appointment_timetable.app_test_id=(free testID), lab_appointment_timetable.app_day=(free day)})]
[RIGI] Op_Receptionist_Receptionist_cancelAppointment_75608
    [COND] []
    [SOP]  [(UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)})]
    [COND] [(== (data null true) (data PrimitiveTypeUsage{name='boolean'} true))]
    [SOP]  [(UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)})]
    [COND] [(== (data null true) (data PrimitiveTypeUsage{name='boolean'} true)), (! (invoke (unknown from data.get(1).get(0)) equals [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} NULL)]))]
[ERR] unknown cond (! (invoke (unknown from data.get(1).get(0)) equals [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} NULL)]))
    [SOP]  [(UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)}), (UPDATE bill {bill.refund=(data null 1)} {bill.bill_id=(free freshData_get_1__get_0_)})]
[RIGI] Op_Receptionist_Receptionist_refund_75609
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3))]
    [SOP]  [(INSERT refund {refund.refund_id=(free freshInsertValue), refund.bill_id=(free freshInsertValue1), refund.payment_type=(free freshInsertValue2), refund.reason=(free freshInsertValue3), refund.amount=(free freshInsertValue4), refund.date=(free freshInsertValue5)})]
[RIGI] Op_Receptionist_Receptionist_cancelLabAppointment_75610
    [COND] []
    [SOP]  [(UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)})]
    [COND] [(== (data null true) (data PrimitiveTypeUsage{name='boolean'} true))]
    [SOP]  [(UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)})]
    [COND] [(== (data null true) (data PrimitiveTypeUsage{name='boolean'} true)), (! (invoke (unknown from data.get(1).get(0)) equals [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} NULL)]))]
[ERR] unknown cond (! (invoke (unknown from data.get(1).get(0)) equals [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} NULL)]))
    [SOP]  [(UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)}), (UPDATE bill {bill.refund=(data null 1)} {bill.bill_id=(free freshData_get_1__get_0_)})]
[RIGI] Op_Cashier_Cashier_bill_75611
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3))]
    [SOP]  [(INSERT bill {bill.bill_id=(free freshInsertValue), bill.bill_date=(free freshInsertValue1), bill.doctor_fee=(free freshInsertValue2), bill.hospital_fee=(free freshInsertValue3), bill.pharmacy_fee=(free freshInsertValue4), bill.laboratory_fee=(free freshInsertValue5), bill.appointment_fee=(free freshInsertValue6), bill.vat=(free freshInsertValue7), bill.discount=(free freshInsertValue8), bill.total=(free freshInsertValue9), bill.payment_method=(free freshInsertValue10), bill.consultant_id=(free freshInsertValue11), bill.patient_id=(free freshInsertValue12), bill.refund=(free freshInsertValue13)})]
[RIGI] Op_Cashier_Cashier_removeFromTempBill_75612
    [COND] []
    [SOP]  [(DELETE tmp_bill {tmp_bill.patient_id=(free patientID)})]
[RIGI] Op_Cashier_Cashier_refund_75613
    [COND] [(> (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 0)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3)), (< (data PrimitiveTypeUsage{name='int'} 0) (data PrimitiveTypeUsage{name='int'} 3))]
    [SOP]  [(INSERT refund {refund.refund_id=(free freshInsertValue), refund.bill_id=(free freshInsertValue1), refund.payment_type=(free freshInsertValue2), refund.reason=(free freshInsertValue3), refund.amount=(free freshInsertValue4), refund.date=(free freshInsertValue5)})]
[RIGI] Op_Cashier_Cashier_makeRefund_75614
    [COND] []
    [SOP]  [(DELETE refund {refund.refund_id=(free id)})]
[RIGI] Op_Cashier_Cashier_updateProfileInfo_75615
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})]
[RIGI] Op_Cashier_Cashier_updateAccountInfo_75616
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]

Process finished with exit code 0
