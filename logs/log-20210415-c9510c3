Outstanding problems:
1. [ERR] don't know how to handle empty scope for refund(refundInfo)
   Inline?
2. Calendar getInstance get DAY OF WEEK
3. SELECTs with JOINs, causing
   [ERR] unknown cond (! (invoke (unknown from data.get(1).get(0)) equals [(data ReferenceType{java.lang.String, typeParametersMap=TypeParametersMap{nameToValue={}}} NULL)]))
4. switch statement

Reading analyzer config from /Users/kaima/src/translator/config/HealthPlus.yml
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/fontawesomefx-8.9.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jfxtras-common-8.0-r5.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jna-3.3.0.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/maven-shared-utils-0.1.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jfxtras-controls-8.0-r5.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jfxtras-agenda-8.0-r5.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/junit-4.12.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/javafx-fxml-16.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jna-3.3.0-platform.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/javafx-base-16.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jfxtras-labs-8.0-r5.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jfxtras-menu-8.0-r5.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/javafx-graphics-16-mac.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/mariadb-java-client-1.1.7.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/javafx-controls-16-mac.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jfxtras-window-8.0-r5.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/javafx-fxml-16-mac.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/javafx-base-16-mac.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/hamcrest-core-1.3.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/javafx-controls-16.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/javafx-graphics-16.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jsr305-2.0.1.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/controlsfx-8.40.12.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/jfxtras-fxml-8.0-r5.jar
CLASSPATH: /Users/kaima/src/HealthPlus/target/dependency/
CLASSPATH: /Users/kaima/src/HealthPlus/target/classes/
- Table: BloodGroupingRh
  tst_bloodG_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  bloodGroup; String; [DEFAULT, NULL]
  rhesusD; String; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: LipidTest
  tst_li_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  cholestrolHDL; String; [DEFAULT, NULL]
  cholestrolLDL; String; [DEFAULT, NULL]
  triglycerides; String; [DEFAULT, NULL]
  totalCholestrolLDLHDLratio; String; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: LiverFunctionTest
  tst_liver_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  totalProtein; Real; [DEFAULT, NULL]
  albumin; Real; [DEFAULT, NULL]
  globulin; Real; [DEFAULT, NULL]
  totalBilirubin; Real; [DEFAULT, NULL]
  directBilirubin; Real; [DEFAULT, NULL]
  sgotast; Real; [DEFAULT, NULL]
  sgptalt; Real; [DEFAULT, NULL]
  alkalinePhospates; Real; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: RenalFunctionTest
  tst_renal_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  creatinine; Real; [DEFAULT, NULL]
  urea; Real; [DEFAULT, NULL]
  totalBilirubin; Real; [DEFAULT, NULL]
  directBilirubin; Real; [DEFAULT, NULL]
  sgotast; Real; [DEFAULT, NULL]
  sgptalt; Real; [DEFAULT, NULL]
  alkalinePhospates; Real; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: SeriumCreatinePhosphokinase
  tst_SCP_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  hiv12ELISA; String; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: SeriumCreatinePhosphokinaseTotal
  tst_SCPT_id; String; [NOT, NULL, DEFAULT, '']
  test_id; String; [DEFAULT, NULL]
  prescription_id; String; [DEFAULT, NULL]
  cpkTotal; Int; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: UrineFullReport
  tst_ur_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  appearance; String; [DEFAULT, NULL]
  sgRefractometer; String; [DEFAULT, NULL]
  ph; Real; [DEFAULT, NULL]
  protein; String; [DEFAULT, NULL]
  glucose; String; [DEFAULT, NULL]
  ketoneBodies; String; [DEFAULT, NULL]
  bilirubin; String; [DEFAULT, NULL]
  urobilirubin; String; [DEFAULT, NULL]
  contrifugedDepositsphaseContrastMicroscopy; String; [DEFAULT, NULL]
  pusCells; String; [DEFAULT, NULL]
  redCells; String; [DEFAULT, NULL]
  epithelialCells; String; [DEFAULT, NULL]
  casts; String; [DEFAULT, NULL]
  cristals; String; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: appointment
  appointment_id; String; [NOT, NULL, DEFAULT, '']
  date; Datetime; [DEFAULT, NULL]
  info; String; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
  bill_id; String; [DEFAULT, NULL]
  slmc_reg_no; String; [DEFAULT, NULL]
  cancelled; Int; [DEFAULT, NULL]
- Table: bill
  bill_id; String; [NOT, NULL, DEFAULT, '']
  bill_date; Datetime; [DEFAULT, NULL]
  doctor_fee; Int; [DEFAULT, NULL]
  hospital_fee; Int; [DEFAULT, NULL]
  pharmacy_fee; Int; [DEFAULT, NULL]
  laboratory_fee; Int; [DEFAULT, NULL]
  appointment_fee; Int; [DEFAULT, NULL]
  vat; Int; [DEFAULT, NULL]
  discount; Int; [DEFAULT, NULL]
  total; Int; [DEFAULT, NULL]
  payment_method; String; [DEFAULT, NULL]
  consultant_id; String; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
  refund; Int; [DEFAULT, NULL]
- Table: completeBloodCount
  tst_CBC_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  totalWhiteCellCount; Int; [DEFAULT, NULL]
  differentialCount; Int; [DEFAULT, NULL]
  neutrophils; Int; [DEFAULT, NULL]
  lymphocytes; Int; [DEFAULT, NULL]
  monocytes; Int; [DEFAULT, NULL]
  eosonophils; Int; [DEFAULT, NULL]
  basophils; Int; [DEFAULT, NULL]
  haemoglobin; Real; [DEFAULT, NULL]
  redBloodCells; Real; [DEFAULT, NULL]
  meanCellVolume; Real; [DEFAULT, NULL]
  haematocrit; Real; [DEFAULT, NULL]
  meanCellHaemoglobin; Real; [DEFAULT, NULL]
  mchConcentration; Real; [DEFAULT, NULL]
  redCellsDistributionWidth; Real; [DEFAULT, NULL]
  plateletCount; Int; [DEFAULT, NULL]
  appointment_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: diagnose_history
  diagnostic_id; String; [NOT, NULL, DEFAULT, '']
  patient_id; String; [DEFAULT, NULL]
  diagnose; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  consultant_id; String; [DEFAULT, NULL]
  prescription_id; String; [DEFAULT, NULL]
- Table: doctor
  slmc_reg_no; String; [NOT, NULL, DEFAULT, '']
  user_id; String; [DEFAULT, NULL]
  education; String; [DEFAULT, NULL]
  training; String; [DEFAULT, NULL]
  experienced_areas; String; [DEFAULT, NULL]
  experience; String; [DEFAULT, NULL]
  achievements; String; [DEFAULT, NULL]
  channelling_fee; Int; [DEFAULT, NULL]
- Table: doctor_availability
  time_slot_id; String; [NOT, NULL, DEFAULT, '']
  slmc_reg_no; String; [DEFAULT, NULL]
  day; Int; [DEFAULT, NULL]
  time_slot; String; [DEFAULT, NULL]
  current_week_appointments; Int; [DEFAULT, NULL]
  next_week_appointments; Int; [DEFAULT, NULL]
- Table: drug
  drug_id; String; [NOT, NULL, DEFAULT, '']
  drug_name; String; [DEFAULT, NULL]
  dangerous_drug; Int; [DEFAULT, NULL]
- Table: drug_brand_names
  brand_id; String; [NOT, NULL, DEFAULT, '']
  brand_name; String; [DEFAULT, NULL]
  generic_name; String; [DEFAULT, NULL]
  drug_type; String; [DEFAULT, NULL]
  drug_unit; String; [DEFAULT, NULL]
  unit_price; Int; [DEFAULT, NULL]
- Table: lab_appointment
  lab_appointment_id; String; [NOT, NULL, DEFAULT, '']
  test_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  info; String; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
  bill_id; String; [DEFAULT, NULL]
  lab_assistant_id; String; [DEFAULT, NULL]
  cancelled; Int; [DEFAULT, NULL]
  doctor_id; String; [DEFAULT, NULL]
- Table: lab_appointment_timetable
  app_id; String; [NOT, NULL, DEFAULT, '']
  app_test_id; String; [DEFAULT, NULL]
  app_day; Int; [DEFAULT, NULL]
  time_slot; String; [DEFAULT, NULL]
  current_week_appointments; Int; [DEFAULT, NULL]
  next_week_appointments; Int; [DEFAULT, NULL]
- Table: lab_assistant
  lab_assistant_id; String; [NOT, NULL, DEFAULT, '']
  user_id; String; [DEFAULT, NULL]
  education; String; [DEFAULT, NULL]
  training; String; [DEFAULT, NULL]
  experience; String; [DEFAULT, NULL]
  achievements; String; [DEFAULT, NULL]
- Table: lab_test
  test_id; String; [NOT, NULL, DEFAULT, '']
  test_name; String; [DEFAULT, NULL]
  test_description; String; [DEFAULT, NULL]
  test_fee; Int; [DEFAULT, NULL]
- Table: medical_history
  history_id; String; [NOT, NULL, DEFAULT, '']
  patient_id; String; [DEFAULT, NULL]
  doctor_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  history; String; [DEFAULT, NULL]
- Table: patient
  patient_id; String; [NOT, NULL, DEFAULT, '']
  person_id; String; [DEFAULT, NULL]
  drug_allergies_and_reactions; String; [DEFAULT, NULL]
- Table: patient_message_receive
  message_id; String; [NOT, NULL, DEFAULT, '']
  receiver; String; [DEFAULT, NULL]
  sender; String; [DEFAULT, NULL]
  subject; String; [DEFAULT, NULL]
  message; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: patient_message_send
  message_id; String; [NOT, NULL, DEFAULT, '']
  receiver; String; [DEFAULT, NULL]
  sender; String; [DEFAULT, NULL]
  email; String; [DEFAULT, NULL]
  message; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: patient_useraccount
  patient_id; String; [NOT, NULL, DEFAULT, '']
  person_id; String; [DEFAULT, NULL]
  username; String; [DEFAULT, NULL]
  password; String; [DEFAULT, NULL]
- Table: person
  person_id; String; [NOT, NULL, DEFAULT, '']
  user_id; String; [DEFAULT, NULL]
  nic; String; [DEFAULT, NULL]
  gender; String; [DEFAULT, NULL]
  date_of_birth; Datetime; [DEFAULT, NULL]
  address; String; [DEFAULT, NULL]
  mobile; String; [DEFAULT, NULL]
  first_name; String; [DEFAULT, NULL]
  last_name; String; [DEFAULT, NULL]
  email; String; [DEFAULT, NULL]
  nationality; String; [DEFAULT, NULL]
  religion; String; [DEFAULT, NULL]
- Table: pharmacist
  pharmacist_id; String; [NOT, NULL, DEFAULT, '']
  user_id; String; [DEFAULT, NULL]
  education; String; [DEFAULT, NULL]
  training; String; [DEFAULT, NULL]
  experience; String; [DEFAULT, NULL]
  achievements; String; [DEFAULT, NULL]
- Table: pharmacy_history
  history_id; String; [NOT, NULL, DEFAULT, '']
  prescription_id; String; [DEFAULT, NULL]
  bill_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  no_of_drugs; Int; [DEFAULT, NULL]
  excluded; String; [DEFAULT, NULL]
- Table: pharmacy_stock
  stock_id; String; [NOT, NULL, DEFAULT, '']
  drug_id; String; [DEFAULT, NULL]
  brand_id; String; [DEFAULT, NULL]
  stock; Int; [DEFAULT, NULL]
  remaining_quantity; Int; [DEFAULT, NULL]
  manufac_date; Datetime; [DEFAULT, NULL]
  exp_date; Datetime; [DEFAULT, NULL]
  supplier_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: prescription
  prescription_id; String; [NOT, NULL, DEFAULT, '']
  patient_id; String; [DEFAULT, NULL]
  consultant_id; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  drugs_dose; String; [DEFAULT, NULL]
  tests; String; [DEFAULT, NULL]
- Table: refund
  refund_id; String; [NOT, NULL, DEFAULT, '']
  bill_id; String; [DEFAULT, NULL]
  payment_type; String; [DEFAULT, NULL]
  reason; String; [DEFAULT, NULL]
  amount; Int; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
- Table: signup
  id; Int; [NOT, NULL, AUTO_INCREMENT]
  fname; String; [NOT, NULL]
  lname; String; [DEFAULT, NULL]
  nic; String; [DEFAULT, NULL]
  address; String; [DEFAULT, NULL]
  contact; Int; [DEFAULT, NULL]
  email; String; [DEFAULT, NULL]
  gender; String; [DEFAULT, NULL]
  dob; String; [DEFAULT, NULL]
  religion; String; [DEFAULT, NULL]
  nationality; String; [DEFAULT, NULL]
  maritalstatus; String; [DEFAULT, NULL]
  medicalhistory; String; [DEFAULT, NULL]
  username; String; [DEFAULT, NULL]
  password; String; [DEFAULT, NULL]
- Table: suppliers
  supplier_id; String; [DEFAULT, NULL]
  supplier_name; String; [DEFAULT, NULL]
- Table: sys_user
  person_id; String; [DEFAULT, NULL]
  user_id; String; [NOT, NULL, DEFAULT, '']
  user_name; String; [DEFAULT, NULL]
  user_type; String; [DEFAULT, NULL]
  other_info; String; [DEFAULT, NULL]
  password; String; [DEFAULT, NULL]
  online; Int; [DEFAULT, NULL]
  login; Datetime; [DEFAULT, NULL]
  logout; Datetime; [DEFAULT, NULL]
  profile_pic; String; [DEFAULT, 'p2.png']
  suspend; Int; [DEFAULT, NULL]
- Table: tempappointment
  id; Int; [NOT, NULL, AUTO_INCREMENT]
  doctor_id; String; [DEFAULT, NULL]
  time; Datetime; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
- Table: tmp_bill
  tmp_bill_id; String; [NOT, NULL, DEFAULT, '']
  doctor_fee; Int; [DEFAULT, NULL]
  hospital_fee; Int; [DEFAULT, NULL]
  pharmacy_fee; Int; [DEFAULT, NULL]
  laboratory_fee; Int; [DEFAULT, NULL]
  appointment_fee; Int; [DEFAULT, NULL]
  vat; Int; [DEFAULT, NULL]
  discount; Int; [DEFAULT, NULL]
  consultant_id; String; [DEFAULT, NULL]
  patient_id; String; [DEFAULT, NULL]
- Table: user_message
  message_id; String; [NOT, NULL, DEFAULT, '']
  reciver; String; [DEFAULT, NULL]
  sender; String; [DEFAULT, NULL]
  subject; String; [DEFAULT, NULL]
  message; String; [DEFAULT, NULL]
  date; Datetime; [DEFAULT, NULL]
  rd; Int; [DEFAULT, '0']
- Table: website_messages
  id; Int; [NOT, NULL, AUTO_INCREMENT]
  first_name; String; [DEFAULT, NULL]
  last_name; String; [DEFAULT, NULL]
  email; String; [DEFAULT, NULL]
  message; String; [DEFAULT, NULL]
Intergraph: NewMessageController.java
Intergraph: AllMessages.java
Intergraph: DoctorDetail.java
Intergraph: SettingsController.java
Intergraph: Appointment.java
Intergraph: UserOptionPopOverController.java
Intergraph: SysUserController.java
Intergraph: PopupAskController.java
Intergraph: AdminMessageController.java
Intergraph: AllAppointmentsController.java
Intergraph: Validate.java
Intergraph: LabReport.java
Intergraph: WarningController.java
Intergraph: Availability.java
Intergraph: Doctor.java
Intergraph: Pharmacist.java
Intergraph: Drug.java
Intergraph: ReadMessageController.java
Intergraph: Bill.java
Intergraph: PharmacistController.java
Intergraph: Prescription.java
Intergraph: AllMessagesController.java
Intergraph: PrescriptionListController.java
Intergraph: Message.java
Intergraph: ReceptionistController.java
Intergraph: LabAssistant.java
Intergraph: Admin.java
Intergraph: BillPreviewController.java
Intergraph: LabReportPreviewController.java
Intergraph: ReportsController.java
Intergraph: PopoverController.java
Intergraph: ErrorController.java
Intergraph: AddNewDrugController.java
[WARN] ignore manuDate.getValue() due to UnsolvedSymbolException{context='null', name='We are unable to find the method declaration corresponding to manuDate.getValue()', cause='null'}
[WARN] ignore expDate.getValue() due to UnsolvedSymbolException{context='null', name='We are unable to find the method declaration corresponding to expDate.getValue()', cause='null'}
Intergraph: LogoutController.java
Intergraph: Refund.java
Intergraph: LoginController.java
Intergraph: AdminController.java
Intergraph: RefundController.java
Intergraph: LabAssistantController.java
Intergraph: NewUserController.java
Intergraph: UserAccountController.java
Intergraph: AppointmentSuccessController.java
Intergraph: User.java
Intergraph: Receptionist.java
Intergraph: PatientAccountSuccessController.java
Intergraph: CurrentUserSummaryController.java
Intergraph: Cashier.java
Intergraph: UserAccount.java
Intergraph: SuccessIndicatorController.java
Intergraph: Popover2Controller.java
Intergraph: MainApp.java
Intergraph: NewDoctorTimeSlotController.java
Intergraph: CashierController.java
Intergraph: DoctorController.java
Intergraph: DatabaseOperator.java
Analyzing Doctor.Appointment.getStartTime() hasBody=true
Analyzing Doctor.Appointment.setStartTime(java.util.GregorianCalendar) hasBody=true
Analyzing Doctor.Appointment.getEndTime() hasBody=true
Analyzing Doctor.Appointment.setEndTime(java.util.GregorianCalendar) hasBody=true
Analyzing LabAssistant.LabReport.getConstituent() hasBody=true
Analyzing LabAssistant.LabReport.setConstituent(java.lang.String) hasBody=true
Analyzing LabAssistant.LabReport.getResult() hasBody=true
Analyzing LabAssistant.LabReport.setResult(java.lang.String) hasBody=true
Analyzing Doctor.Availability.getDate() hasBody=true
Analyzing Doctor.Availability.setDate(java.lang.String) hasBody=true
Analyzing Doctor.Availability.getTime() hasBody=true
Analyzing Doctor.Availability.setTime(java.lang.String) hasBody=true
Analyzing Doctor.Availability.getId() hasBody=true
Analyzing Doctor.Availability.setId(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getUsername() hasBody=true
Analyzing Doctor.Doctor.getProfileInfo() hasBody=true
Analyzing Doctor.Doctor.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.updateDoctorInfo(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.doctorTimeTable() hasBody=true
Analyzing Doctor.Doctor.removeDoctorTime(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.removeDoctorTime(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.doctorTimeTableAddSlot(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getAppointments() hasBody=true
Analyzing Doctor.Doctor.getTestResults(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getTestResults(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getPatientInfo(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.searchByName(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getAllNames() hasBody=true
Analyzing Doctor.Doctor.diagnose(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.bill(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getLabFee(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.allergies(java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.prescribe(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getDrugInfo() hasBody=true
Analyzing Doctor.Doctor.getDrugGenericInfo() hasBody=true
Analyzing Doctor.Doctor.getDrugBrandInfo(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getPatientAttendence(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getTodayAppointments() hasBody=true
Analyzing Doctor.Doctor.nameSuggestor(java.lang.String) hasBody=true
Analyzing Doctor.Doctor.getTestInfo() hasBody=true
Analyzing Doctor.Doctor.getLabPatientInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getProfileInfo() hasBody=true
Analyzing Pharmacist.Pharmacist.getPrescriptionInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getPrescribedDoc(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getpharmacyHistory(int) hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getAllNames() hasBody=true
Analyzing Pharmacist.Pharmacist.addNewDrug(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.addNewStock(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getStockInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getStockSummary() hasBody=true
Analyzing Pharmacist.Pharmacist.getStockSummary2() hasBody=true
Analyzing Pharmacist.Pharmacist.getSupplierSummary() hasBody=true
Analyzing Pharmacist.Pharmacist.getSupplierNames() hasBody=true
Analyzing Pharmacist.Pharmacist.getSupplierNames2() hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugPrices() hasBody=true
Analyzing Pharmacist.Pharmacist.getGenericNames() hasBody=true
Analyzing Pharmacist.Pharmacist.getBrandNames(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugGenericInfo() hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugNames() hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugAmounts(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.getDrugStockID(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.reduceStock(int, java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.checkForGenName(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.addNewDrug2(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.checkForBrandName(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.addNewBrand(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.checkForSupplierName(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.addNewSupplier(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.updateStock(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.updatePharmacistInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Pharmacist.Pharmacist.bill(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getName() hasBody=true
Analyzing Pharmacist.Drug.setName(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getType() hasBody=true
Analyzing Pharmacist.Drug.setType(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getUnit() hasBody=true
Analyzing Pharmacist.Drug.setUnit(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getPrice() hasBody=true
Analyzing Pharmacist.Drug.setPrice(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getAmount() hasBody=true
Analyzing Pharmacist.Drug.setAmount(java.lang.String) hasBody=true
Analyzing Pharmacist.Drug.getSuppliers() hasBody=true
Analyzing Pharmacist.Drug.setSuppliers(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getPatientID() hasBody=true
Analyzing Cashier.Bill.setPatientID(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getDate() hasBody=true
Analyzing Cashier.Bill.setDate(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getDoctor() hasBody=true
Analyzing Cashier.Bill.setDoctor(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getHospital() hasBody=true
Analyzing Cashier.Bill.setHospital(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getPharmacy() hasBody=true
Analyzing Cashier.Bill.setPharmacy(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getLaboratory() hasBody=true
Analyzing Cashier.Bill.setLaboratory(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getAppointment() hasBody=true
Analyzing Cashier.Bill.setAppointment(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getBill() hasBody=true
Analyzing Cashier.Bill.setBill(java.lang.String) hasBody=true
Analyzing Cashier.Bill.getBillID() hasBody=true
Analyzing Cashier.Bill.setBillID(java.lang.String) hasBody=true
Analyzing LabAssistant.Prescription.getPrescID() hasBody=true
Analyzing LabAssistant.Prescription.setPrescID(java.lang.String) hasBody=true
Analyzing LabAssistant.Prescription.getDate() hasBody=true
Analyzing LabAssistant.Prescription.setDate(java.lang.String) hasBody=true
Analyzing LabAssistant.Prescription.getDoctor() hasBody=true
Analyzing LabAssistant.Prescription.setDoctor(java.lang.String) hasBody=true
Analyzing LabAssistant.Prescription.getPrescription() hasBody=true
Analyzing LabAssistant.Prescription.setPrescription(java.lang.String) hasBody=true
Analyzing Doctor.Message.getSender() hasBody=true
Analyzing Doctor.Message.setSender(java.lang.String) hasBody=true
Analyzing Doctor.Message.getSubject() hasBody=true
Analyzing Doctor.Message.setSubject(java.lang.String) hasBody=true
Analyzing Doctor.Message.getMessage() hasBody=true
Analyzing Doctor.Message.setMessage(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getProfileInfo() hasBody=true
Analyzing LabAssistant.LabAssistant.updateProfileInfo(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.updateLabAssistantInfo(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.updateAccountInfo(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getLabTestNames() hasBody=true
Analyzing LabAssistant.LabAssistant.getLabTestInfo(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getPatientDetails(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getPrescriptions(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.lastMonthsAppointments() hasBody=true
Analyzing LabAssistant.LabAssistant.lastMonthsReports(int) hasBody=true
Analyzing LabAssistant.LabAssistant.getAppointments() hasBody=true
Analyzing LabAssistant.LabAssistant.getTodayAppointments() hasBody=true
Analyzing LabAssistant.LabAssistant.UrineFullReport(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.LipidTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.BloodGroupingTest(java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.completeBloodCount(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.RenalFunctionTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.SeriumCreatinePhosphokinaseTotal(java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.SeriumCreatinePhosphokinase(java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.liverFunctionTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getUrineFullReport(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getLipidTestReport(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getBloodGroupingRh(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getCompleteBloodCount(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getLiverFunctionTest(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getRenalFunctionTest(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getSeriumCreatinePhosphokinaseTotal(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getSeriumCreatinePhosphokinase(java.lang.String) hasBody=true
Analyzing LabAssistant.LabAssistant.getPatientInfo(java.lang.String) hasBody=true
Analyzing Admin.Admin.getUsername() hasBody=true
Analyzing Admin.Admin.getProfileInfo() hasBody=true
Analyzing Admin.Admin.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Admin.Admin.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Admin.Admin.createNewUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.getDatabaseInfo() hasBody=true
Analyzing Admin.Admin.getUserInfo(java.lang.String) hasBody=true
Analyzing Admin.Admin.getPersonInfo() hasBody=true
Analyzing Admin.Admin.getOnlineInfo() hasBody=true
Analyzing Admin.Admin.getOnlineInfo2() hasBody=true
Analyzing Admin.Admin.getSysUserCount(java.lang.String) hasBody=true
Analyzing Admin.Admin.getPatientCount() hasBody=true
Analyzing Admin.Admin.getAllPatientCount() hasBody=true
Analyzing Admin.Admin.getOnlineCount() hasBody=true
Analyzing Admin.Admin.checkConnection() hasBody=true
Analyzing Admin.Admin.export(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.getSchemaSize(java.lang.String) hasBody=true
Analyzing Admin.Admin.getDirectorySize(java.lang.String) hasBody=true
Analyzing Admin.Admin.getPatientAttendence(java.lang.String) hasBody=true
Analyzing Admin.Admin.getDoctorNames() hasBody=true
Analyzing Admin.Admin.lastMonthsReports(int) hasBody=true
Analyzing Admin.Admin.getDocAppointments() hasBody=true
Analyzing Admin.Admin.getLabAppointments() hasBody=true
Analyzing Admin.Admin.getCancelledDocAppointments() hasBody=true
Analyzing Admin.Admin.getCancelledLabAppointments() hasBody=true
Analyzing Admin.Admin.getStockSummary() hasBody=true
Analyzing Admin.Admin.getDrugGenericInfo() hasBody=true
Analyzing Admin.Admin.getDrugNames() hasBody=true
Analyzing Admin.Admin.getDrugAmounts(java.lang.String) hasBody=true
Analyzing Admin.Admin.getSupplierNames() hasBody=true
Analyzing Admin.Admin.getSupplierSummary() hasBody=true
Analyzing Admin.Admin.lastTotalIncome(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.pharmacyIncome(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.laboratoryIncome(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.appointmentIncome(java.lang.String, java.lang.String) hasBody=true
Analyzing Admin.Admin.getSysUser(java.lang.String) hasBody=true
Analyzing Admin.Admin.suspendUser(java.lang.String) hasBody=true
Analyzing Admin.Admin.unsuspendUser(java.lang.String) hasBody=true
Analyzing Admin.Admin.getsuspendUser() hasBody=true
Analyzing Admin.Admin.getActiveUser() hasBody=true
Analyzing Admin.Admin.getSuspendedUsers() hasBody=true
Analyzing Admin.Admin.resetPassword(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getPatientID() hasBody=true
Analyzing Cashier.Refund.setPatientID(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getDate() hasBody=true
Analyzing Cashier.Refund.setDate(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getBillID() hasBody=true
Analyzing Cashier.Refund.setBillID(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getService() hasBody=true
Analyzing Cashier.Refund.setService(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getBill() hasBody=true
Analyzing Cashier.Refund.setBill(java.lang.String) hasBody=true
Analyzing Cashier.Refund.getRefund() hasBody=true
Analyzing Cashier.Refund.setRefund(javafx.scene.image.ImageView) hasBody=true
Analyzing Receptionist.Receptionist.getProfileInfo() hasBody=true
Analyzing Receptionist.Receptionist.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDoctorTimeTable() hasBody=true
Analyzing Receptionist.Receptionist.getPatientInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.setPatientInfo(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.updatePatientInfo(java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getLabTestInfo() hasBody=true
Analyzing Receptionist.Receptionist.getAppointments() hasBody=true
Analyzing Receptionist.Receptionist.makeAppointment(java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.makeLabAppointment(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.doctorAppointmentAvailableTime(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDoctorSummary() hasBody=true
Analyzing Receptionist.Receptionist.getCurrentlyAvailableDoctors() hasBody=true
Analyzing Receptionist.Receptionist.getConsultationAreas() hasBody=true
Analyzing Receptionist.Receptionist.getDoctor(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDoctors() hasBody=true
Analyzing Receptionist.Receptionist.getAvailableDays(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getLabAvailableDays(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getLabAvailableTimeSlots(java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getLabTestID(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getAvailableTime(java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.cancelAppointment(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getAppointmentDetails(java.lang.String, java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.refund(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.cancelLabAppointment(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getAppointmentDetails(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDoctorDetails() hasBody=true
Analyzing Receptionist.Receptionist.getLabAppointmentDetails(java.lang.String) hasBody=true
Analyzing Receptionist.Receptionist.getDocAppointments() hasBody=true
Analyzing Receptionist.Receptionist.getLabAppointments() hasBody=true
Analyzing Receptionist.Receptionist.getAllNames() hasBody=true
Analyzing Cashier.Cashier.getProfileInfo() hasBody=true
Analyzing Cashier.Cashier.bill(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getAllNames() hasBody=true
Analyzing Cashier.Cashier.removeFromTempBill(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getBillInfo(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.refund(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getWaitingRefunds() hasBody=true
Analyzing Cashier.Cashier.makeRefund(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getNoOfRefunds() hasBody=true
Analyzing Cashier.Cashier.getPaymentHistory(int) hasBody=true
Analyzing Cashier.Cashier.updateProfileInfo(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.updateAccountInfo(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getPatientDetails(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getDoctorName(java.lang.String) hasBody=true
Analyzing Cashier.Cashier.getCancelledDocAppointments() hasBody=true
Analyzing Cashier.Cashier.getCancelledLabAppointments() hasBody=true
Analyzing Admin.UserAccount.setUser(java.lang.String) hasBody=true
Analyzing Admin.UserAccount.setLastLogin(java.lang.String) hasBody=true
Analyzing Admin.UserAccount.setOnline(java.lang.String) hasBody=true
Analyzing Admin.UserAccount.getUser() hasBody=true
Analyzing Admin.UserAccount.getLastLogin() hasBody=true
Analyzing Admin.UserAccount.getOnline() hasBody=true
Analyzing com.hms.hms_test_2.MainApp.start(javafx.stage.Stage) hasBody=true
Analyzing com.hms.hms_test_2.MainApp.main(java.lang.String[]) hasBody=true
Finished
* Effectual method Doctor.Doctor.doctorTimeTableAddSlot(java.lang.String, java.lang.String)
* Effectual method Doctor.Doctor.prescribe(java.lang.String, java.lang.String, java.lang.String)
* Effectual method Doctor.Doctor.removeDoctorTime(java.lang.String, java.lang.String)
* Effectual method Doctor.Doctor.removeDoctorTime(java.lang.String)
* Effectual method Doctor.Doctor.updateProfileInfo(java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free info String
[DBG] Run path 407: [OutEdge(next=328, label=), OutEdge(next=340, label=), OutEdge(next=347, label=), OutEdge(next=354, label=), OutEdge(next=367, label=), OutEdge(next=374, label=), OutEdge(next=381, label=), OutEdge(next=388, label=), OutEdge(next=383, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[1]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.slmcRegNo
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE person SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = (SELECT user_id FROM doctor WHERE slmc_reg_no = ')) (unknown from this.slmcRegNo)) (data java.lang.String '));))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v1]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = (SELECT user_id FROM doctor WHERE slmc_reg_no = '[[v2|this.slmcRegNo]]'));, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(db doctor.user_id {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})})})
* Effectual method Doctor.Doctor.updateDoctorInfo(java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free info String
[DBG] Run path 507: [OutEdge(next=428, label=), OutEdge(next=440, label=), OutEdge(next=447, label=), OutEdge(next=454, label=), OutEdge(next=467, label=), OutEdge(next=474, label=), OutEdge(next=481, label=), OutEdge(next=488, label=), OutEdge(next=483, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.slmcRegNo
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE doctor SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE slmc_reg_no = ')) (unknown from this.slmcRegNo)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE doctor SET [[v3]] WHERE slmc_reg_no = '[[v4|this.slmcRegNo]]';, values={})
[DBG] add atom (UPDATE doctor {doctor.education=(free freshEducation), doctor.training=(free freshTraining), doctor.experienced_areas=(free freshExperienced_areas), doctor.experience=(free freshExperience), doctor.achievements=(free freshAchievements), doctor.channelling_fee=(free freshChannelling_fee)} {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})
* Effectual method Doctor.Doctor.updateAccountInfo(java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free info String
[DBG] Run path 614: [OutEdge(next=535, label=), OutEdge(next=547, label=), OutEdge(next=554, label=), OutEdge(next=561, label=), OutEdge(next=574, label=), OutEdge(next=581, label=), OutEdge(next=588, label=), OutEdge(next=595, label=), OutEdge(next=590, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.slmcRegNo
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE sys_user SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE user_id = (SELECT user_id FROM doctor WHERE slmc_reg_no = ')) (unknown from this.slmcRegNo)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v5]] WHERE user_id = (SELECT user_id FROM doctor WHERE slmc_reg_no = '[[v6|this.slmcRegNo]]');, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(db doctor.user_id {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})})
* Effectual method Doctor.Doctor.diagnose(java.lang.String, java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free diagnostic String
-free patientID String
[DBG] Run path 1888: [OutEdge(next=1732, label=), OutEdge(next=1744, label=), OutEdge(next=1739, label=), OutEdge(next=1763, label=), OutEdge(next=1770, label=), OutEdge(next=1777, label=), OutEdge(next=1784, label=), OutEdge(next=1797, label=), OutEdge(next=1798, label=!(i < historyID.length())), OutEdge(next=1799, label=), OutEdge(next=1841, label=), OutEdge(next=1842, label=!(tmpID2.length() < 4)), OutEdge(next=1843, label=), OutEdge(next=1867, label=), OutEdge(next=1874, label=), OutEdge(next=1881, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql = (data java.lang.String SELECT history_id FROM medical_history WHERE history_id = (SELECT MAX(history_id) FROM medical_history);)
[WARN] scope is complex: super.dbOperator.customSelection(sql).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT history_id FROM medical_history WHERE history_id = (SELECT MAX(history_id) FROM medical_history);, values={})
customSelection: (resultset SELECT history_id FROM medical_history WHERE history_id = (SELECT history_id FROM medical_history))
[DBG] Var historyID = (db medical_history.history_id {medical_history.history_id=(db medical_history.history_id {})})
[DBG] Var tmpID = (invoke (db medical_history.history_id {medical_history.history_id=(db medical_history.history_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 1798 at !(i < historyID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db medical_history.history_id {medical_history.history_id=(db medical_history.history_id {})}) substring [(data INT 3), (invoke (db medical_history.history_id {medical_history.history_id=(db medical_history.history_id {})}) length [])])) (data INT 1)))
[loop] new loop 1842 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[WARN] scope is complex: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
[WARN] scope is complex: Calendar.getInstance().getTime()
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.slmcRegNo
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO medical_history VALUES (') (+ (data java.lang.String his) (unknown from null))) (data java.lang.String ',')) (free patientID)) (data java.lang.String ',')) (unknown from this.slmcRegNo)) (data java.lang.String ',')) (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])])) (data java.lang.String ',')) (free diagnostic)) (data java.lang.String ')))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO medical_history VALUES ('his[[tmpID2]]','[[patientID]]','[[v7|this.slmcRegNo]]','[[v8]]','[[diagnostic]]'), values={})
[DBG] add atom (INSERT medical_history {medical_history.history_id=(free freshTmpID2), medical_history.patient_id=(free patientID), medical_history.doctor_id=(free freshThis_slmcRegNo), medical_history.date=(free freshV8), medical_history.history=(free diagnostic)})
* Effectual method Doctor.Doctor.bill(java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free billInfo String
-free patientID String
-free labFee String
[DBG] Run path 1987: [OutEdge(next=1916, label=), OutEdge(next=1928, label=), OutEdge(next=1923, label=), OutEdge(next=1947, label=), OutEdge(next=1954, label=), OutEdge(next=1949, label=), OutEdge(next=1973, label=), OutEdge(next=1980, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql3 = (+ (+ (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patientID)) (data java.lang.String ';))
[DBG] Var tmpID2 = (null from tmpID2)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]')
[DBG] Var sql = (+ (+ (+ (+ (data java.lang.String UPDATE tmp_bill SET laboratory_fee = ') (free labFee)) (data java.lang.String ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = '[[labFee]]' WHERE tmp_bill_id = '[[?9]]';, values={9=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(StrToInt (free labFee))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free billInfo String
-free patientID String
-free labFee String
[DBG] Run path 2251: [OutEdge(next=1916, label=), OutEdge(next=1928, label=), OutEdge(next=1923, label=), OutEdge(next=1947, label=), OutEdge(next=1954, label=), OutEdge(next=1949, label=), OutEdge(next=1973, label=), OutEdge(next=1980, label=), OutEdge(next=1987, label=ex(java.lang.ClassNotFoundException super.dbOperator.customInsertion(sql))), OutEdge(next=1964, label=catch(java.lang.Exception e)), OutEdge(next=1988, label=), OutEdge(next=2000, label=), OutEdge(next=2007, label=), OutEdge(next=2014, label=), OutEdge(next=2021, label=), OutEdge(next=2034, label=), OutEdge(next=2035, label=!(i < billID.length())), OutEdge(next=2036, label=), OutEdge(next=2078, label=), OutEdge(next=2079, label=!(tmpID2.length() < 4)), OutEdge(next=2080, label=), OutEdge(next=2104, label=), OutEdge(next=2111, label=), OutEdge(next=2118, label=), OutEdge(next=2125, label=), OutEdge(next=2132, label=), OutEdge(next=2139, label=!(index > 0)), OutEdge(next=2140, label=), OutEdge(next=2171, label=), OutEdge(next=2172, label=!(index < 3)), OutEdge(next=2173, label=), OutEdge(next=2197, label=), OutEdge(next=2198, label=!(index < 3)), OutEdge(next=2199, label=), OutEdge(next=2223, label=), OutEdge(next=2230, label=), OutEdge(next=2237, label=), OutEdge(next=2244, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql3 = (+ (+ (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patientID)) (data java.lang.String ';))
[DBG] Var tmpID2 = (null from tmpID2)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]')
[DBG] Var sql = (+ (+ (+ (+ (data java.lang.String UPDATE tmp_bill SET laboratory_fee = ') (free labFee)) (data java.lang.String ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = '[[labFee]]' WHERE tmp_bill_id = '[[?10]]';, values={10=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(StrToInt (free labFee))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[WARN] unknown label: ex(java.lang.ClassNotFoundException super.dbOperator.customInsertion(sql)), assuming to be true
[WARN] unknown label: catch(java.lang.Exception e), assuming to be true
[DBG] Var sql2 = (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT tmp_bill_id FROM tmp_bill))
[DBG] Var billID = (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})})
[DBG] Var tmpID = (invoke (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 2035 at !(i < billID.length())
[loop] new loop 2079 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var field = (invoke (free billInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data java.lang.String INSERT INTO tmp_bill () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO tmp_bill () VALUES ();, values={})
[DBG] add atom (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})
* Effectual method Doctor.Doctor.allergies(java.lang.String, java.lang.String)
[DBG] Run class Doctor.Doctor
[DBG] Class field: slmcRegNo
-free allergies String
-free patientID String
[DBG] Run path 2411: [OutEdge(next=2345, label=), OutEdge(next=2357, label=), OutEdge(next=2352, label=), OutEdge(next=2376, label=), OutEdge(next=2383, label=), OutEdge(next=2390, label=), OutEdge(next=2397, label=), OutEdge(next=2404, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql0 = (+ (+ (data java.lang.String SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = ') (free patientID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]')
[DBG] Var data = (resultset SELECT drug_allergies_and_reactions FROM patient WHERE patient_id = '[[patientID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var currentAllergies = (db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE patient SET drug_allergies_and_reactions = ') (db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})) (data java.lang.String ' )) (data java.lang.String WHERE patient_id = ')) (free patientID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE patient SET drug_allergies_and_reactions = '[[?11]]' WHERE patient_id = '[[patientID]]';, values={11=(db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})})
[DBG] add atom (UPDATE patient {patient.drug_allergies_and_reactions=(db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})} {patient.patient_id=(free patientID)})
* Effectual method Pharmacist.Pharmacist.addNewDrug(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free drugInfo String
[DBG] Run path 4212: [OutEdge(next=3930, label=), OutEdge(next=3942, label=), OutEdge(next=3937, label=), OutEdge(next=3961, label=), OutEdge(next=3968, label=), OutEdge(next=3975, label=), OutEdge(next=3982, label=), OutEdge(next=3995, label=), OutEdge(next=3996, label=!(i < drugID.length())), OutEdge(next=3997, label=), OutEdge(next=4039, label=), OutEdge(next=4040, label=!(tmpID2.length() < 4)), OutEdge(next=4041, label=), OutEdge(next=4065, label=), OutEdge(next=4072, label=), OutEdge(next=4079, label=), OutEdge(next=4086, label=), OutEdge(next=4093, label=), OutEdge(next=4100, label=!(index > 0)), OutEdge(next=4101, label=), OutEdge(next=4132, label=), OutEdge(next=4133, label=!(index < 3)), OutEdge(next=4134, label=), OutEdge(next=4158, label=), OutEdge(next=4159, label=!(index < 3)), OutEdge(next=4160, label=), OutEdge(next=4184, label=), OutEdge(next=4191, label=), OutEdge(next=4198, label=), OutEdge(next=4205, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql2 = (data java.lang.String SELECT drug_id FROM drug WHERE drug_id = (SELECT MAX(drug_id) FROM drug);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT drug_id FROM drug WHERE drug_id = (SELECT MAX(drug_id) FROM drug);, values={})
customSelection: (resultset SELECT drug_id FROM drug WHERE drug_id = (SELECT drug_id FROM drug))
[DBG] Var drugID = (db drug.drug_id {drug.drug_id=(db drug.drug_id {})})
[DBG] Var tmpID = (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) toCharArray [])
[DBG] Var i = (data INT 1)
[loop] new loop 3996 at !(i < drugID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) substring [(data INT 1), (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) length [])])) (data INT 1)))
[loop] new loop 4040 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var field = (invoke (free drugInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data java.lang.String INSERT INTO drug () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO drug () VALUES ();, values={})
[DBG] add atom (INSERT drug {drug.drug_id=(free freshInsertValue), drug.drug_name=(free freshInsertValue1), drug.dangerous_drug=(free freshInsertValue2)})
* Effectual method Pharmacist.Pharmacist.addNewStock(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free stockInfo String
[DBG] Run path 4529: [OutEdge(next=4240, label=), OutEdge(next=4252, label=), OutEdge(next=4247, label=), OutEdge(next=4271, label=), OutEdge(next=4278, label=), OutEdge(next=4285, label=), OutEdge(next=4292, label=), OutEdge(next=4305, label=), OutEdge(next=4306, label=!(i < stockID.length())), OutEdge(next=4307, label=), OutEdge(next=4349, label=), OutEdge(next=4350, label=!(tmpID2.length() < 4)), OutEdge(next=4351, label=), OutEdge(next=4375, label=), OutEdge(next=4382, label=), OutEdge(next=4389, label=), OutEdge(next=4396, label=), OutEdge(next=4403, label=), OutEdge(next=4410, label=!(index > 0)), OutEdge(next=4411, label=), OutEdge(next=4442, label=), OutEdge(next=4443, label=!((index == 2) || (index == 5) || (index == 6))), OutEdge(next=4444, label=), OutEdge(next=4468, label=), OutEdge(next=4469, label=!((index == 2) || (index == 5) || (index == 6))), OutEdge(next=4470, label=), OutEdge(next=4494, label=), OutEdge(next=4501, label=), OutEdge(next=4508, label=), OutEdge(next=4515, label=), OutEdge(next=4522, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql2 = (data java.lang.String SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT MAX(stock_id) FROM pharmacy_stock);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT MAX(stock_id) FROM pharmacy_stock);, values={})
customSelection: (resultset SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT stock_id FROM pharmacy_stock))
[DBG] Var stockID = (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})})
[DBG] Var tmpID = (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 4306 at !(i < stockID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) substring [(data INT 3), (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) length [])])) (data INT 1)))
[loop] new loop 4350 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var field = (invoke (free stockInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 2)
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 5)
[WARN] Short-circuit semantics may be ignored
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 6)
[WARN] Short-circuit semantics may be ignored
[COND] condition: (index == 2) || (index == 5) || (index == 6)
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 2)
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 5)
[WARN] Short-circuit semantics may be ignored
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (index == 6)
[WARN] Short-circuit semantics may be ignored
[COND] condition: (index == 2) || (index == 5) || (index == 6)
[WARN] unary operator POSTFIX_INCREMENT unsupported
[WARN] scope is complex: new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyyMMdd")
[WARN] scope is complex: Calendar.getInstance().getTime()
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyyMMdd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])])
[DBG] Var sql = (data java.lang.String INSERT INTO pharmacy_stock () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO pharmacy_stock () VALUES ();, values={})
[DBG] add atom (INSERT pharmacy_stock {pharmacy_stock.stock_id=(free freshInsertValue), pharmacy_stock.drug_id=(free freshInsertValue1), pharmacy_stock.brand_id=(free freshInsertValue2), pharmacy_stock.stock=(free freshInsertValue3), pharmacy_stock.remaining_quantity=(free freshInsertValue4), pharmacy_stock.manufac_date=(free freshInsertValue5), pharmacy_stock.exp_date=(free freshInsertValue6), pharmacy_stock.supplier_id=(free freshInsertValue7), pharmacy_stock.date=(free freshInsertValue8)})
* Effectual method Pharmacist.Pharmacist.reduceStock(int, java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free qt Int
-free stkID String
[DBG] Run path 6111: [OutEdge(next=6047, label=), OutEdge(next=6071, label=), OutEdge(next=6078, label=), OutEdge(next=6085, label=), OutEdge(next=6086, label=Integer.parseInt(remaining) >= qt), OutEdge(next=6092, label=), OutEdge(next=6104, label=)]
[DBG] Var sql = (+ (+ (data java.lang.String SELECT remaining_quantity FROM pharmacy_stock WHERE stock_id=') (free stkID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT remaining_quantity FROM pharmacy_stock WHERE stock_id='[[stkID]]';, values={})
customSelection: (resultset SELECT remaining_quantity FROM pharmacy_stock WHERE stock_id = '[[stkID]]')
[DBG] Var result = (resultset SELECT remaining_quantity FROM pharmacy_stock WHERE stock_id = '[[stkID]]')
[WARN] scope is complex: result.get(1).get(0)
[DBG] Var remaining = (IntToStr (db pharmacy_stock.remaining_quantity {pharmacy_stock.stock_id=(free stkID)}))
[COND] condition: Integer.parseInt(remaining) >= qt
[DBG] Var sql = (+ (+ (+ (+ (data java.lang.String UPDATE pharmacy_stock SET remaining_quantity = remaining_quantity -) (free qt)) (data java.lang.String  WHERE stock_id = ')) (free stkID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE pharmacy_stock SET remaining_quantity = remaining_quantity -[[qt]] WHERE stock_id = '[[stkID]]';, values={})
[DBG] add atom (UPDATE pharmacy_stock {pharmacy_stock.remaining_quantity=(- (db pharmacy_stock.remaining_quantity null) (free qt))} {pharmacy_stock.stock_id=(free stkID)})
* Effectual method Pharmacist.Pharmacist.addNewDrug2(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free genName String
[DBG] Run path 6413: [OutEdge(next=6225, label=), OutEdge(next=6237, label=), OutEdge(next=6244, label=), OutEdge(next=6239, label=), OutEdge(next=6263, label=), OutEdge(next=6270, label=), OutEdge(next=6277, label=), OutEdge(next=6284, label=), OutEdge(next=6297, label=), OutEdge(next=6298, label=!(i < drugID.length())), OutEdge(next=6299, label=), OutEdge(next=6341, label=), OutEdge(next=6342, label=!(tmpID2.length() < 4)), OutEdge(next=6343, label=), OutEdge(next=6367, label=), OutEdge(next=6374, label=), OutEdge(next=6246, label=), OutEdge(next=6387, label=), OutEdge(next=6394, label=), OutEdge(next=6389, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT drug_id FROM drug WHERE drug_id = (SELECT MAX(drug_id) FROM drug);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT drug_id FROM drug WHERE drug_id = (SELECT MAX(drug_id) FROM drug);, values={})
customSelection: (resultset SELECT drug_id FROM drug WHERE drug_id = (SELECT drug_id FROM drug))
[DBG] Var drugID = (db drug.drug_id {drug.drug_id=(db drug.drug_id {})})
[DBG] Var tmpID = (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) toCharArray [])
[DBG] Var i = (data INT 1)
[loop] new loop 6298 at !(i < drugID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) substring [(data INT 1), (invoke (db drug.drug_id {drug.drug_id=(db drug.drug_id {})}) length [])])) (data INT 1)))
[loop] new loop 6342 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql = (+ (+ (+ (+ (data java.lang.String INSERT INTO drug VALUES (') (+ (data java.lang.String d) (unknown from null))) (data java.lang.String ',')) (free genName)) (data java.lang.String ',0);))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO drug VALUES ('d[[tmpID2]]','[[genName]]',0);, values={})
[DBG] add atom (INSERT drug {drug.drug_id=(free freshTmpID2), drug.drug_name=(free genName), drug.dangerous_drug=(data null 0)})
* Effectual method Pharmacist.Pharmacist.addNewBrand(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free brandName String
-free genName String
-free type String
-free unit String
-free price String
[DBG] Run path 6702: [OutEdge(next=6514, label=), OutEdge(next=6526, label=), OutEdge(next=6533, label=), OutEdge(next=6528, label=), OutEdge(next=6552, label=), OutEdge(next=6559, label=), OutEdge(next=6566, label=), OutEdge(next=6573, label=), OutEdge(next=6586, label=), OutEdge(next=6587, label=!(i < brandID.length())), OutEdge(next=6588, label=), OutEdge(next=6630, label=), OutEdge(next=6631, label=!(tmpID2.length() < 4)), OutEdge(next=6632, label=), OutEdge(next=6656, label=), OutEdge(next=6663, label=), OutEdge(next=6535, label=), OutEdge(next=6676, label=), OutEdge(next=6683, label=), OutEdge(next=6678, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT brand_id FROM drug_brand_names WHERE brand_id = (SELECT MAX(brand_id) FROM drug_brand_names);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT brand_id FROM drug_brand_names WHERE brand_id = (SELECT MAX(brand_id) FROM drug_brand_names);, values={})
customSelection: (resultset SELECT brand_id FROM drug_brand_names WHERE brand_id = (SELECT brand_id FROM drug_brand_names))
[DBG] Var brandID = (db drug_brand_names.brand_id {drug_brand_names.brand_id=(db drug_brand_names.brand_id {})})
[DBG] Var tmpID = (invoke (db drug_brand_names.brand_id {drug_brand_names.brand_id=(db drug_brand_names.brand_id {})}) toCharArray [])
[DBG] Var i = (data INT 2)
[loop] new loop 6587 at !(i < brandID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db drug_brand_names.brand_id {drug_brand_names.brand_id=(db drug_brand_names.brand_id {})}) substring [(data INT 2), (invoke (db drug_brand_names.brand_id {drug_brand_names.brand_id=(db drug_brand_names.brand_id {})}) length [])])) (data INT 1)))
[loop] new loop 6631 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO drug_brand_names VALUES (') (+ (data java.lang.String br) (unknown from null))) (data java.lang.String ',')) (free brandName)) (data java.lang.String ',')) (free genName)) (data java.lang.String ',')) (free type)) (data java.lang.String ',')) (free unit)) (data java.lang.String ',')) (free price)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO drug_brand_names VALUES ('br[[tmpID2]]','[[brandName]]','[[genName]]','[[type]]','[[unit]]','[[price]]');, values={})
[DBG] add atom (INSERT drug_brand_names {drug_brand_names.brand_id=(free freshTmpID2), drug_brand_names.brand_name=(free brandName), drug_brand_names.generic_name=(free genName), drug_brand_names.drug_type=(free type), drug_brand_names.drug_unit=(free unit), drug_brand_names.unit_price=(StrToInt (free price))})
* Effectual method Pharmacist.Pharmacist.addNewSupplier(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free suppName String
[DBG] Run path 6991: [OutEdge(next=6803, label=), OutEdge(next=6815, label=), OutEdge(next=6822, label=), OutEdge(next=6817, label=), OutEdge(next=6841, label=), OutEdge(next=6848, label=), OutEdge(next=6855, label=), OutEdge(next=6862, label=), OutEdge(next=6875, label=), OutEdge(next=6876, label=!(i < drugID.length())), OutEdge(next=6877, label=), OutEdge(next=6919, label=), OutEdge(next=6920, label=!(tmpID2.length() < 4)), OutEdge(next=6921, label=), OutEdge(next=6945, label=), OutEdge(next=6952, label=), OutEdge(next=6824, label=), OutEdge(next=6965, label=), OutEdge(next=6972, label=), OutEdge(next=6967, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT supplier_id FROM suppliers WHERE supplier_id = (SELECT MAX(supplier_id) FROM suppliers);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT supplier_id FROM suppliers WHERE supplier_id = (SELECT MAX(supplier_id) FROM suppliers);, values={})
customSelection: (resultset SELECT supplier_id FROM suppliers WHERE supplier_id = (SELECT supplier_id FROM suppliers))
[DBG] Var drugID = (db suppliers.supplier_id {suppliers.supplier_id=(db suppliers.supplier_id {})})
[DBG] Var tmpID = (invoke (db suppliers.supplier_id {suppliers.supplier_id=(db suppliers.supplier_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 6876 at !(i < drugID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db suppliers.supplier_id {suppliers.supplier_id=(db suppliers.supplier_id {})}) substring [(data INT 3), (invoke (db suppliers.supplier_id {suppliers.supplier_id=(db suppliers.supplier_id {})}) length [])])) (data INT 1)))
[loop] new loop 6920 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql = (+ (+ (+ (+ (data java.lang.String INSERT INTO suppliers VALUES (') (+ (data java.lang.String sup) (unknown from null))) (data java.lang.String ',')) (free suppName)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO suppliers VALUES ('sup[[tmpID2]]','[[suppName]]');, values={})
[DBG] add atom (INSERT suppliers {suppliers.supplier_id=(free freshTmpID2), suppliers.supplier_name=(free suppName)})
* Effectual method Pharmacist.Pharmacist.updateStock(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free drugID String
-free brandID String
-free stock String
-free manuDate String
-free expDate String
-free suppID String
-free date String
[DBG] Run path 7200: [OutEdge(next=7012, label=), OutEdge(next=7024, label=), OutEdge(next=7031, label=), OutEdge(next=7026, label=), OutEdge(next=7050, label=), OutEdge(next=7057, label=), OutEdge(next=7064, label=), OutEdge(next=7071, label=), OutEdge(next=7084, label=), OutEdge(next=7085, label=!(i < stockID.length())), OutEdge(next=7086, label=), OutEdge(next=7128, label=), OutEdge(next=7129, label=!(tmpID2.length() < 4)), OutEdge(next=7130, label=), OutEdge(next=7154, label=), OutEdge(next=7161, label=), OutEdge(next=7033, label=), OutEdge(next=7174, label=), OutEdge(next=7181, label=), OutEdge(next=7176, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT MAX(stock_id) FROM pharmacy_stock);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT MAX(stock_id) FROM pharmacy_stock);, values={})
customSelection: (resultset SELECT stock_id FROM pharmacy_stock WHERE stock_id = (SELECT stock_id FROM pharmacy_stock))
[DBG] Var stockID = (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})})
[DBG] Var tmpID = (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 7085 at !(i < stockID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) substring [(data INT 3), (invoke (db pharmacy_stock.stock_id {pharmacy_stock.stock_id=(db pharmacy_stock.stock_id {})}) length [])])) (data INT 1)))
[loop] new loop 7129 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO pharmacy_stock VALUES (') (+ (data java.lang.String stk) (unknown from null))) (data java.lang.String ',')) (free drugID)) (data java.lang.String ',')) (free brandID)) (data java.lang.String ',')) (free stock)) (data java.lang.String ',')) (free stock)) (data java.lang.String ',')) (free manuDate)) (data java.lang.String ',')) (free expDate)) (data java.lang.String ',')) (free suppID)) (data java.lang.String ',')) (free date)) (data java.lang.String ')) (data java.lang.String );))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO pharmacy_stock VALUES ('stk[[tmpID2]]','[[drugID]]','[[brandID]]','[[stock]]','[[stock]]','[[manuDate]]','[[expDate]]','[[suppID]]','[[date]]');, values={})
[DBG] add atom (INSERT pharmacy_stock {pharmacy_stock.stock_id=(free freshTmpID2), pharmacy_stock.drug_id=(free drugID), pharmacy_stock.brand_id=(free brandID), pharmacy_stock.stock=(StrToInt (free stock)), pharmacy_stock.remaining_quantity=(StrToInt (free stock)), pharmacy_stock.manufac_date=(StrToInt (free manuDate)), pharmacy_stock.exp_date=(StrToInt (free expDate)), pharmacy_stock.supplier_id=(free suppID), pharmacy_stock.date=(StrToInt (free date))})
* Effectual method Pharmacist.Pharmacist.updateProfileInfo(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free info String
[DBG] Run path 7300: [OutEdge(next=7221, label=), OutEdge(next=7233, label=), OutEdge(next=7240, label=), OutEdge(next=7247, label=), OutEdge(next=7260, label=), OutEdge(next=7267, label=), OutEdge(next=7274, label=), OutEdge(next=7281, label=), OutEdge(next=7276, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[1]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.username
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE person SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE person_id = (SELECT person_id FROM sys_user WHERE user_name = ')) (unknown from super.username)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v12]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_name = '[[v13|super.username]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_name=(free freshSuper_username)})})
* Effectual method Pharmacist.Pharmacist.updatePharmacistInfo(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free info String
[DBG] Run path 7407: [OutEdge(next=7328, label=), OutEdge(next=7340, label=), OutEdge(next=7347, label=), OutEdge(next=7354, label=), OutEdge(next=7367, label=), OutEdge(next=7374, label=), OutEdge(next=7381, label=), OutEdge(next=7388, label=), OutEdge(next=7383, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.pharmacistID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE pharmacist SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE pharmacist_id = ')) (unknown from this.pharmacistID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE pharmacist SET [[v14]] WHERE pharmacist_id = '[[v15|this.pharmacistID]]';, values={})
[DBG] add atom (UPDATE pharmacist {pharmacist.education=(free freshEducation), pharmacist.training=(free freshTraining), pharmacist.experience=(free freshExperience), pharmacist.achievements=(free freshAchievements)} {pharmacist.pharmacist_id=(free freshThis_pharmacistID)})
* Effectual method Pharmacist.Pharmacist.updateAccountInfo(java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free info String
[DBG] Run path 7514: [OutEdge(next=7435, label=), OutEdge(next=7447, label=), OutEdge(next=7454, label=), OutEdge(next=7461, label=), OutEdge(next=7474, label=), OutEdge(next=7481, label=), OutEdge(next=7488, label=), OutEdge(next=7495, label=), OutEdge(next=7490, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE sys_user SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE user_id = ')) (unknown from this.userID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v16]] WHERE user_id = '[[v17|this.userID]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method Pharmacist.Pharmacist.bill(java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free billInfo String
-free patientID String
-free pharmacyFee String
[DBG] Run path 7613: [OutEdge(next=7542, label=), OutEdge(next=7554, label=), OutEdge(next=7549, label=), OutEdge(next=7573, label=), OutEdge(next=7580, label=), OutEdge(next=7575, label=), OutEdge(next=7599, label=), OutEdge(next=7606, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql3 = (+ (+ (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patientID)) (data java.lang.String ';))
[DBG] Var tmpID2 = (null from tmpID2)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]')
[DBG] Var sql = (+ (+ (+ (+ (data java.lang.String UPDATE tmp_bill SET pharmacy_fee = ') (free pharmacyFee)) (data java.lang.String ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET pharmacy_fee = '[[pharmacyFee]]' WHERE tmp_bill_id = '[[?18]]';, values={18=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.pharmacy_fee=(StrToInt (free pharmacyFee))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] Run class Pharmacist.Pharmacist
[DBG] Class field: pharmacistID
-free billInfo String
-free patientID String
-free pharmacyFee String
[DBG] Run path 7902: [OutEdge(next=7542, label=), OutEdge(next=7554, label=), OutEdge(next=7549, label=), OutEdge(next=7573, label=), OutEdge(next=7580, label=), OutEdge(next=7575, label=), OutEdge(next=7599, label=), OutEdge(next=7606, label=), OutEdge(next=7613, label=ex(java.lang.ClassNotFoundException super.dbOperator.customInsertion(sql))), OutEdge(next=7590, label=catch(java.lang.Exception e)), OutEdge(next=7614, label=), OutEdge(next=7638, label=), OutEdge(next=7645, label=), OutEdge(next=7652, label=), OutEdge(next=7659, label=), OutEdge(next=7672, label=), OutEdge(next=7673, label=!(i < billID.length())), OutEdge(next=7674, label=), OutEdge(next=7716, label=), OutEdge(next=7717, label=!(tmpID2.length() < 4)), OutEdge(next=7718, label=), OutEdge(next=7742, label=), OutEdge(next=7621, label=), OutEdge(next=7762, label=), OutEdge(next=7769, label=), OutEdge(next=7776, label=), OutEdge(next=7783, label=), OutEdge(next=7790, label=!(index > 0)), OutEdge(next=7791, label=), OutEdge(next=7822, label=), OutEdge(next=7823, label=!(index < 3)), OutEdge(next=7824, label=), OutEdge(next=7848, label=), OutEdge(next=7849, label=!(index < 3)), OutEdge(next=7850, label=), OutEdge(next=7874, label=), OutEdge(next=7881, label=), OutEdge(next=7888, label=), OutEdge(next=7895, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql3 = (+ (+ (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patientID)) (data java.lang.String ';))
[DBG] Var tmpID2 = (null from tmpID2)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql3).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patientID]]')
[DBG] Var sql = (+ (+ (+ (+ (data java.lang.String UPDATE tmp_bill SET pharmacy_fee = ') (free pharmacyFee)) (data java.lang.String ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET pharmacy_fee = '[[pharmacyFee]]' WHERE tmp_bill_id = '[[?19]]';, values={19=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.pharmacy_fee=(StrToInt (free pharmacyFee))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})
[WARN] unknown label: ex(java.lang.ClassNotFoundException super.dbOperator.customInsertion(sql)), assuming to be true
[WARN] unknown label: catch(java.lang.Exception e), assuming to be true
[DBG] Var sql2 = (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT tmp_bill_id FROM tmp_bill))
[DBG] Var billID = (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})})
[DBG] Var tmpID = (invoke (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 7673 at !(i < billID.length())
[loop] new loop 7717 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var field = (invoke (free billInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data java.lang.String INSERT INTO tmp_bill () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO tmp_bill () VALUES ();, values={})
[DBG] add atom (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})
* Effectual method LabAssistant.LabAssistant.updateProfileInfo(java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free info String
[DBG] Run path 8706: [OutEdge(next=8627, label=), OutEdge(next=8639, label=), OutEdge(next=8646, label=), OutEdge(next=8653, label=), OutEdge(next=8666, label=), OutEdge(next=8673, label=), OutEdge(next=8680, label=), OutEdge(next=8687, label=), OutEdge(next=8682, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[1]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.username
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE person SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE person_id = (SELECT person_id FROM sys_user WHERE user_name = ')) (unknown from super.username)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v20]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_name = '[[v21|super.username]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_name=(free freshSuper_username)})})
* Effectual method LabAssistant.LabAssistant.updateLabAssistantInfo(java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free info String
[DBG] Run path 8813: [OutEdge(next=8734, label=), OutEdge(next=8746, label=), OutEdge(next=8753, label=), OutEdge(next=8760, label=), OutEdge(next=8773, label=), OutEdge(next=8780, label=), OutEdge(next=8787, label=), OutEdge(next=8794, label=), OutEdge(next=8789, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.labAssistantID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE lab_assistant SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE lab_assistant_id = ')) (unknown from this.labAssistantID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_assistant SET [[v22]] WHERE lab_assistant_id = '[[v23|this.labAssistantID]]';, values={})
[DBG] add atom (UPDATE lab_assistant {lab_assistant.education=(free freshEducation), lab_assistant.training=(free freshTraining), lab_assistant.experience=(free freshExperience), lab_assistant.achievements=(free freshAchievements)} {lab_assistant.lab_assistant_id=(free freshThis_labAssistantID)})
* Effectual method LabAssistant.LabAssistant.updateAccountInfo(java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free info String
[DBG] Run path 8920: [OutEdge(next=8841, label=), OutEdge(next=8853, label=), OutEdge(next=8860, label=), OutEdge(next=8867, label=), OutEdge(next=8880, label=), OutEdge(next=8887, label=), OutEdge(next=8894, label=), OutEdge(next=8901, label=), OutEdge(next=8896, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE sys_user SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE user_id = ')) (unknown from this.userID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v24]] WHERE user_id = '[[v25|this.userID]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method LabAssistant.LabAssistant.UrineFullReport(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id String
-free appearance String
-free sgRefractometer String
-free ph Real
-free protein String
-free glucose String
-free ketoneBodies String
-free bilirubin String
-free urobilirubin String
-free contrifugedDepositsphaseContrastMicroscopy String
-free pusCells String
-free redCells String
-free epithelialCells String
-free casts String
-free cristals String
[DBG] Run path 9897: [OutEdge(next=9709, label=), OutEdge(next=9721, label=), OutEdge(next=9728, label=), OutEdge(next=9723, label=), OutEdge(next=9747, label=), OutEdge(next=9754, label=), OutEdge(next=9761, label=), OutEdge(next=9768, label=), OutEdge(next=9781, label=), OutEdge(next=9782, label=!(i < repID.length())), OutEdge(next=9783, label=), OutEdge(next=9825, label=), OutEdge(next=9826, label=!(tmpID2.length() < 4)), OutEdge(next=9827, label=), OutEdge(next=9851, label=), OutEdge(next=9858, label=), OutEdge(next=9730, label=), OutEdge(next=9878, label=), OutEdge(next=9873, label=)]
[DBG] Var t = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT tst_ur_id FROM UrineFullReport WHERE tst_ur_id = (SELECT MAX(tst_ur_id) FROM UrineFullReport);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_ur_id FROM UrineFullReport WHERE tst_ur_id = (SELECT MAX(tst_ur_id) FROM UrineFullReport);, values={})
customSelection: (resultset SELECT tst_ur_id FROM UrineFullReport WHERE tst_ur_id = (SELECT tst_ur_id FROM UrineFullReport))
[DBG] Var repID = (db UrineFullReport.tst_ur_id {UrineFullReport.tst_ur_id=(db UrineFullReport.tst_ur_id {})})
[DBG] Var tmpID = (invoke (db UrineFullReport.tst_ur_id {UrineFullReport.tst_ur_id=(db UrineFullReport.tst_ur_id {})}) toCharArray [])
[DBG] Var i = (data INT 0)
[loop] new loop 9782 at !(i < repID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db UrineFullReport.tst_ur_id {UrineFullReport.tst_ur_id=(db UrineFullReport.tst_ur_id {})}) substring [(data INT 2), (invoke (db UrineFullReport.tst_ur_id {UrineFullReport.tst_ur_id=(db UrineFullReport.tst_ur_id {})}) length [])])) (data INT 1)))
[loop] new loop 9826 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO UrineFullReport(tst_ur_id, appointment_id, appearance,sgRefractometer,ph,protein,glucose,ketoneBodies,bilirubin,urobilirubin,contrifugedDepositsphaseContrastMicroscopy,pusCells,redCells,epithelialCells,casts,cristals,date) VALUES(') (+ (data java.lang.String ur) (unknown from null))) (data java.lang.String ',')) (free appointment_id)) (data java.lang.String ',')) (free appearance)) (data java.lang.String ',')) (free sgRefractometer)) (data java.lang.String ',')) (free ph)) (data java.lang.String ',')) (free protein)) (data java.lang.String ',')) (free glucose)) (data java.lang.String ',')) (free ketoneBodies)) (data java.lang.String ',')) (free bilirubin)) (data java.lang.String ',')) (free urobilirubin)) (data java.lang.String ',')) (free contrifugedDepositsphaseContrastMicroscopy)) (data java.lang.String ',')) (free pusCells)) (data java.lang.String ',')) (free redCells)) (data java.lang.String ',')) (free epithelialCells)) (data java.lang.String ',')) (free casts)) (data java.lang.String ',')) (free cristals)) (data java.lang.String ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO UrineFullReport(tst_ur_id, appointment_id, appearance,sgRefractometer,ph,protein,glucose,ketoneBodies,bilirubin,urobilirubin,contrifugedDepositsphaseContrastMicroscopy,pusCells,redCells,epithelialCells,casts,cristals,date) VALUES('ur[[tmpID2]]','[[appointment_id]]','[[appearance]]','[[sgRefractometer]]','[[ph]]','[[protein]]','[[glucose]]','[[ketoneBodies]]','[[bilirubin]]','[[urobilirubin]]','[[contrifugedDepositsphaseContrastMicroscopy]]','[[pusCells]]','[[redCells]]','[[epithelialCells]]','[[casts]]','[[cristals]]',NOW()), values={})
[DBG] add atom (INSERT UrineFullReport {UrineFullReport.tst_ur_id=(free freshTmpID2), UrineFullReport.appointment_id=(free appointment_id), UrineFullReport.appearance=(free appearance), UrineFullReport.sgRefractometer=(free sgRefractometer), UrineFullReport.ph=(free ph), UrineFullReport.protein=(free protein), UrineFullReport.glucose=(free glucose), UrineFullReport.ketoneBodies=(free ketoneBodies), UrineFullReport.bilirubin=(free bilirubin), UrineFullReport.urobilirubin=(free urobilirubin), UrineFullReport.contrifugedDepositsphaseContrastMicroscopy=(free contrifugedDepositsphaseContrastMicroscopy), UrineFullReport.pusCells=(free pusCells), UrineFullReport.redCells=(free redCells), UrineFullReport.epithelialCells=(free epithelialCells), UrineFullReport.casts=(free casts), UrineFullReport.cristals=(free cristals), UrineFullReport.date=(free now)})
* Effectual method LabAssistant.LabAssistant.LipidTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id String
-free cholestrolHDL String
-free cholestrolLDL String
-free triglycerides String
-free totalCholestrolLDLHDLratio String
[DBG] Run path 10113: [OutEdge(next=9918, label=), OutEdge(next=9930, label=), OutEdge(next=9937, label=), OutEdge(next=9932, label=), OutEdge(next=9956, label=), OutEdge(next=9963, label=), OutEdge(next=9970, label=), OutEdge(next=9977, label=), OutEdge(next=9990, label=), OutEdge(next=9991, label=!(i < repID.length())), OutEdge(next=9992, label=), OutEdge(next=10034, label=), OutEdge(next=10035, label=!(tmpID2.length() < 4)), OutEdge(next=10036, label=), OutEdge(next=10060, label=), OutEdge(next=10067, label=), OutEdge(next=9939, label=), OutEdge(next=10087, label=), OutEdge(next=10082, label=), OutEdge(next=10106, label=)]
[DBG] Var t = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT tst_li_id FROM LipidTest WHERE tst_li_id = (SELECT MAX(tst_li_id) FROM LipidTest);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_li_id FROM LipidTest WHERE tst_li_id = (SELECT MAX(tst_li_id) FROM LipidTest);, values={})
customSelection: (resultset SELECT tst_li_id FROM LipidTest WHERE tst_li_id = (SELECT tst_li_id FROM LipidTest))
[DBG] Var repID = (db LipidTest.tst_li_id {LipidTest.tst_li_id=(db LipidTest.tst_li_id {})})
[DBG] Var tmpID = (invoke (db LipidTest.tst_li_id {LipidTest.tst_li_id=(db LipidTest.tst_li_id {})}) toCharArray [])
[DBG] Var i = (data INT 0)
[loop] new loop 9991 at !(i < repID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db LipidTest.tst_li_id {LipidTest.tst_li_id=(db LipidTest.tst_li_id {})}) substring [(data INT 2), (invoke (db LipidTest.tst_li_id {LipidTest.tst_li_id=(db LipidTest.tst_li_id {})}) length [])])) (data INT 1)))
[loop] new loop 10035 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO LipidTest(tst_li_id , appointment_id, cholestrolHDL,cholestrolLDL,triglycerides,totalCholestrolLDLHDLratio,date) VALUE(') (+ (data java.lang.String li) (unknown from null))) (data java.lang.String ',')) (free appointment_id)) (data java.lang.String ',')) (free cholestrolHDL)) (data java.lang.String ',')) (free cholestrolLDL)) (data java.lang.String ',')) (free triglycerides)) (data java.lang.String ',')) (free totalCholestrolLDLHDLratio)) (data java.lang.String ',NOW())))
[WARN] scope is complex: System.out.println(t)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO LipidTest(tst_li_id , appointment_id, cholestrolHDL,cholestrolLDL,triglycerides,totalCholestrolLDLHDLratio,date) VALUE('li[[tmpID2]]','[[appointment_id]]','[[cholestrolHDL]]','[[cholestrolLDL]]','[[triglycerides]]','[[totalCholestrolLDLHDLratio]]',NOW()), values={})
[DBG] add atom (INSERT LipidTest {LipidTest.tst_li_id=(free freshTmpID2), LipidTest.appointment_id=(free appointment_id), LipidTest.cholestrolHDL=(free cholestrolHDL), LipidTest.cholestrolLDL=(free cholestrolLDL), LipidTest.triglycerides=(free triglycerides), LipidTest.totalCholestrolLDLHDLratio=(free totalCholestrolLDLHDLratio), LipidTest.date=(free now)})
* Effectual method LabAssistant.LabAssistant.BloodGroupingTest(java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free app_id String
-free bloodG String
-free rhD String
[DBG] Run path 10329: [OutEdge(next=10141, label=), OutEdge(next=10153, label=), OutEdge(next=10160, label=), OutEdge(next=10155, label=), OutEdge(next=10179, label=), OutEdge(next=10186, label=), OutEdge(next=10193, label=), OutEdge(next=10200, label=), OutEdge(next=10213, label=), OutEdge(next=10214, label=!(i < repID.length())), OutEdge(next=10215, label=), OutEdge(next=10257, label=), OutEdge(next=10258, label=!(tmpID2.length() < 4)), OutEdge(next=10259, label=), OutEdge(next=10283, label=), OutEdge(next=10290, label=), OutEdge(next=10162, label=), OutEdge(next=10310, label=), OutEdge(next=10305, label=)]
[DBG] Var t = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);, values={})
customSelection: (resultset SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT tst_bloodG_id FROM BloodGroupingRh))
[DBG] Var repID = (db BloodGroupingRh.tst_bloodG_id {BloodGroupingRh.tst_bloodG_id=(db BloodGroupingRh.tst_bloodG_id {})})
[DBG] Var tmpID = (invoke (db BloodGroupingRh.tst_bloodG_id {BloodGroupingRh.tst_bloodG_id=(db BloodGroupingRh.tst_bloodG_id {})}) toCharArray [])
[DBG] Var i = (data INT 0)
[loop] new loop 10214 at !(i < repID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db BloodGroupingRh.tst_bloodG_id {BloodGroupingRh.tst_bloodG_id=(db BloodGroupingRh.tst_bloodG_id {})}) substring [(data INT 2), (invoke (db BloodGroupingRh.tst_bloodG_id {BloodGroupingRh.tst_bloodG_id=(db BloodGroupingRh.tst_bloodG_id {})}) length [])])) (data INT 1)))
[loop] new loop 10258 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO BloodGroupingRh(tst_bloodG_id, appointment_id, BloodGroup, rhesusD,date) VALUE(') (+ (data java.lang.String bg) (unknown from null))) (data java.lang.String ',')) (free app_id)) (data java.lang.String ',')) (free bloodG)) (data java.lang.String ',')) (free rhD)) (data java.lang.String ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO BloodGroupingRh(tst_bloodG_id, appointment_id, BloodGroup, rhesusD,date) VALUE('bg[[tmpID2]]','[[app_id]]','[[bloodG]]','[[rhD]]',NOW()), values={})
[DBG] add atom (INSERT BloodGroupingRh {BloodGroupingRh.tst_bloodG_id=(free freshTmpID2), BloodGroupingRh.appointment_id=(free app_id), BloodGroupingRh.bloodGroup=(free bloodG), BloodGroupingRh.rhesusD=(free rhD), BloodGroupingRh.date=(free now)})
* Effectual method LabAssistant.LabAssistant.completeBloodCount(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id String
-free totalWhiteCellCount String
-free differentialCount String
-free neutrophils String
-free lymphocytes String
-free monocytes String
-free eosonophils String
-free basophils String
-free haemoglobin Real
-free redBloodCells Real
-free meanCellVolume Real
-free haematocrit Real
-free meanCellHaemoglobin Real
-free mchConcentration Real
-free redCellsDistributionWidth Real
-free plateletCount String
[DBG] Run path 10538: [OutEdge(next=10350, label=), OutEdge(next=10362, label=), OutEdge(next=10369, label=), OutEdge(next=10364, label=), OutEdge(next=10388, label=), OutEdge(next=10395, label=), OutEdge(next=10402, label=), OutEdge(next=10409, label=), OutEdge(next=10422, label=), OutEdge(next=10423, label=!(i < repID.length())), OutEdge(next=10424, label=), OutEdge(next=10466, label=), OutEdge(next=10467, label=!(tmpID2.length() < 4)), OutEdge(next=10468, label=), OutEdge(next=10492, label=), OutEdge(next=10499, label=), OutEdge(next=10371, label=), OutEdge(next=10519, label=), OutEdge(next=10514, label=)]
[DBG] Var t = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT tst_CBC_id FROM completeBloodCount WHERE tst_CBC_id = (SELECT MAX(tst_CBC_id) FROM completeBloodCount);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_CBC_id FROM completeBloodCount WHERE tst_CBC_id = (SELECT MAX(tst_CBC_id) FROM completeBloodCount);, values={})
customSelection: (resultset SELECT tst_CBC_id FROM completeBloodCount WHERE tst_CBC_id = (SELECT tst_CBC_id FROM completeBloodCount))
[DBG] Var repID = (db completeBloodCount.tst_CBC_id {completeBloodCount.tst_CBC_id=(db completeBloodCount.tst_CBC_id {})})
[DBG] Var tmpID = (invoke (db completeBloodCount.tst_CBC_id {completeBloodCount.tst_CBC_id=(db completeBloodCount.tst_CBC_id {})}) toCharArray [])
[DBG] Var i = (data INT 0)
[loop] new loop 10423 at !(i < repID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db completeBloodCount.tst_CBC_id {completeBloodCount.tst_CBC_id=(db completeBloodCount.tst_CBC_id {})}) substring [(data INT 3), (invoke (db completeBloodCount.tst_CBC_id {completeBloodCount.tst_CBC_id=(db completeBloodCount.tst_CBC_id {})}) length [])])) (data INT 1)))
[loop] new loop 10467 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO completeBloodCount(tst_CBC_id , appointment_id, totalWhiteCellCount,differentialCount,neutrophils,lymphocytes,monocytes,eosonophils,basophils,haemoglobin,redBloodCells,meanCellVolume,haematocrit,meanCellHaemoglobin, mchConcentration,redCellsDistributionWidth,plateletCount,date) VALUE(') (+ (data java.lang.String cbc) (unknown from null))) (data java.lang.String ',')) (free appointment_id)) (data java.lang.String ',')) (free totalWhiteCellCount)) (data java.lang.String ',')) (free differentialCount)) (data java.lang.String ',')) (free neutrophils)) (data java.lang.String ',')) (free lymphocytes)) (data java.lang.String ',')) (free monocytes)) (data java.lang.String ',')) (free eosonophils)) (data java.lang.String ',')) (free basophils)) (data java.lang.String ',')) (free haemoglobin)) (data java.lang.String ',')) (free redBloodCells)) (data java.lang.String ',')) (free meanCellVolume)) (data java.lang.String ',')) (free haematocrit)) (data java.lang.String ',')) (free meanCellHaemoglobin)) (data java.lang.String ',')) (free mchConcentration)) (data java.lang.String ',')) (free redCellsDistributionWidth)) (data java.lang.String ',')) (free plateletCount)) (data java.lang.String ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO completeBloodCount(tst_CBC_id , appointment_id, totalWhiteCellCount,differentialCount,neutrophils,lymphocytes,monocytes,eosonophils,basophils,haemoglobin,redBloodCells,meanCellVolume,haematocrit,meanCellHaemoglobin, mchConcentration,redCellsDistributionWidth,plateletCount,date) VALUE('cbc[[tmpID2]]','[[appointment_id]]','[[totalWhiteCellCount]]','[[differentialCount]]','[[neutrophils]]','[[lymphocytes]]','[[monocytes]]','[[eosonophils]]','[[basophils]]','[[haemoglobin]]','[[redBloodCells]]','[[meanCellVolume]]','[[haematocrit]]','[[meanCellHaemoglobin]]','[[mchConcentration]]','[[redCellsDistributionWidth]]','[[plateletCount]]',NOW()), values={})
[DBG] add atom (INSERT completeBloodCount {completeBloodCount.tst_CBC_id=(free freshTmpID2), completeBloodCount.appointment_id=(free appointment_id), completeBloodCount.totalWhiteCellCount=(StrToInt (free totalWhiteCellCount)), completeBloodCount.differentialCount=(StrToInt (free differentialCount)), completeBloodCount.neutrophils=(StrToInt (free neutrophils)), completeBloodCount.lymphocytes=(StrToInt (free lymphocytes)), completeBloodCount.monocytes=(StrToInt (free monocytes)), completeBloodCount.eosonophils=(StrToInt (free eosonophils)), completeBloodCount.basophils=(StrToInt (free basophils)), completeBloodCount.haemoglobin=(free haemoglobin), completeBloodCount.redBloodCells=(free redBloodCells), completeBloodCount.meanCellVolume=(free meanCellVolume), completeBloodCount.haematocrit=(free haematocrit), completeBloodCount.meanCellHaemoglobin=(free meanCellHaemoglobin), completeBloodCount.mchConcentration=(free mchConcentration), completeBloodCount.redCellsDistributionWidth=(free redCellsDistributionWidth), completeBloodCount.plateletCount=(StrToInt (free plateletCount)), completeBloodCount.date=(free now)})
* Effectual method LabAssistant.LabAssistant.RenalFunctionTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id String
-free creatinine Real
-free urea Real
-free totalBilirubin Real
-free directBilirubin Real
-free sgotast Real
-free sgptalt Real
-free alkalinePhospates Real
[DBG] Run path 10747: [OutEdge(next=10559, label=), OutEdge(next=10571, label=), OutEdge(next=10578, label=), OutEdge(next=10573, label=), OutEdge(next=10597, label=), OutEdge(next=10604, label=), OutEdge(next=10611, label=), OutEdge(next=10618, label=), OutEdge(next=10631, label=), OutEdge(next=10632, label=!(i < repID.length())), OutEdge(next=10633, label=), OutEdge(next=10675, label=), OutEdge(next=10676, label=!(tmpID2.length() < 4)), OutEdge(next=10677, label=), OutEdge(next=10701, label=), OutEdge(next=10708, label=), OutEdge(next=10580, label=), OutEdge(next=10728, label=), OutEdge(next=10723, label=)]
[DBG] Var t = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT tst_renal_id FROM RenalFunctionTest WHERE tst_renal_id = (SELECT MAX(tst_renal_id) FROM RenalFunctionTest);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_renal_id FROM RenalFunctionTest WHERE tst_renal_id = (SELECT MAX(tst_renal_id) FROM RenalFunctionTest);, values={})
customSelection: (resultset SELECT tst_renal_id FROM RenalFunctionTest WHERE tst_renal_id = (SELECT tst_renal_id FROM RenalFunctionTest))
[DBG] Var repID = (db RenalFunctionTest.tst_renal_id {RenalFunctionTest.tst_renal_id=(db RenalFunctionTest.tst_renal_id {})})
[DBG] Var tmpID = (invoke (db RenalFunctionTest.tst_renal_id {RenalFunctionTest.tst_renal_id=(db RenalFunctionTest.tst_renal_id {})}) toCharArray [])
[DBG] Var i = (data INT 0)
[loop] new loop 10632 at !(i < repID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db RenalFunctionTest.tst_renal_id {RenalFunctionTest.tst_renal_id=(db RenalFunctionTest.tst_renal_id {})}) substring [(data INT 2), (invoke (db RenalFunctionTest.tst_renal_id {RenalFunctionTest.tst_renal_id=(db RenalFunctionTest.tst_renal_id {})}) length [])])) (data INT 1)))
[loop] new loop 10676 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO RenalFunctionTest(tst_renal_id, appointment_id, creatinine,urea,totalBilirubin,directBilirubin,sgotast,sgptalt,alkalinePhospates,date) VALUE(') (+ (data java.lang.String re) (unknown from null))) (data java.lang.String ',')) (free appointment_id)) (data java.lang.String ',')) (free creatinine)) (data java.lang.String ',')) (free urea)) (data java.lang.String ',')) (free totalBilirubin)) (data java.lang.String ',')) (free directBilirubin)) (data java.lang.String ',')) (free sgotast)) (data java.lang.String ',')) (free sgptalt)) (data java.lang.String ',')) (free alkalinePhospates)) (data java.lang.String ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO RenalFunctionTest(tst_renal_id, appointment_id, creatinine,urea,totalBilirubin,directBilirubin,sgotast,sgptalt,alkalinePhospates,date) VALUE('re[[tmpID2]]','[[appointment_id]]','[[creatinine]]','[[urea]]','[[totalBilirubin]]','[[directBilirubin]]','[[sgotast]]','[[sgptalt]]','[[alkalinePhospates]]',NOW()), values={})
[DBG] add atom (INSERT RenalFunctionTest {RenalFunctionTest.tst_renal_id=(free freshTmpID2), RenalFunctionTest.appointment_id=(free appointment_id), RenalFunctionTest.creatinine=(free creatinine), RenalFunctionTest.urea=(free urea), RenalFunctionTest.totalBilirubin=(free totalBilirubin), RenalFunctionTest.directBilirubin=(free directBilirubin), RenalFunctionTest.sgotast=(free sgotast), RenalFunctionTest.sgptalt=(free sgptalt), RenalFunctionTest.alkalinePhospates=(free alkalinePhospates), RenalFunctionTest.date=(free now)})
* Effectual method LabAssistant.LabAssistant.SeriumCreatinePhosphokinaseTotal(java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id String
-free cpkTotal String
[DBG] Run path 10956: [OutEdge(next=10768, label=), OutEdge(next=10780, label=), OutEdge(next=10787, label=), OutEdge(next=10782, label=), OutEdge(next=10806, label=), OutEdge(next=10813, label=), OutEdge(next=10820, label=), OutEdge(next=10827, label=), OutEdge(next=10840, label=), OutEdge(next=10841, label=!(i < repID.length())), OutEdge(next=10842, label=), OutEdge(next=10884, label=), OutEdge(next=10885, label=!(tmpID2.length() < 4)), OutEdge(next=10886, label=), OutEdge(next=10910, label=), OutEdge(next=10917, label=), OutEdge(next=10789, label=), OutEdge(next=10937, label=), OutEdge(next=10932, label=)]
[DBG] Var t = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT tst_SCPT_id FROM SeriumCreatinePhosphokinaseTotal WHERE tst_SCPT_id = (SELECT MAX(tst_SCPT_id) FROM SeriumCreatinePhosphokinaseTotal);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_SCPT_id FROM SeriumCreatinePhosphokinaseTotal WHERE tst_SCPT_id = (SELECT MAX(tst_SCPT_id) FROM SeriumCreatinePhosphokinaseTotal);, values={})
customSelection: (resultset SELECT tst_SCPT_id FROM SeriumCreatinePhosphokinaseTotal WHERE tst_SCPT_id = (SELECT tst_SCPT_id FROM SeriumCreatinePhosphokinaseTotal))
[DBG] Var repID = (db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {})})
[DBG] Var tmpID = (invoke (db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {})}) toCharArray [])
[DBG] Var i = (data INT 0)
[loop] new loop 10841 at !(i < repID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {})}) substring [(data INT 4), (invoke (db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(db SeriumCreatinePhosphokinaseTotal.tst_SCPT_id {})}) length [])])) (data INT 1)))
[loop] new loop 10885 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO SeriumCreatinePhosphokinaseTotal(tst_SCPT_id, appointment_id, cpkTotal,date) VALUE(') (+ (data java.lang.String scpt) (unknown from null))) (data java.lang.String ',')) (free appointment_id)) (data java.lang.String ',')) (free cpkTotal)) (data java.lang.String ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO SeriumCreatinePhosphokinaseTotal(tst_SCPT_id, appointment_id, cpkTotal,date) VALUE('scpt[[tmpID2]]','[[appointment_id]]','[[cpkTotal]]',NOW()), values={})
[DBG] add atom (INSERT SeriumCreatinePhosphokinaseTotal {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(free freshTmpID2), SeriumCreatinePhosphokinaseTotal.appointment_id=(free appointment_id), SeriumCreatinePhosphokinaseTotal.cpkTotal=(StrToInt (free cpkTotal)), SeriumCreatinePhosphokinaseTotal.date=(free now)})
* Effectual method LabAssistant.LabAssistant.SeriumCreatinePhosphokinase(java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id String
-free hiv12ELISA String
[DBG] Run path 11165: [OutEdge(next=10977, label=), OutEdge(next=10989, label=), OutEdge(next=10996, label=), OutEdge(next=10991, label=), OutEdge(next=11015, label=), OutEdge(next=11022, label=), OutEdge(next=11029, label=), OutEdge(next=11036, label=), OutEdge(next=11049, label=), OutEdge(next=11050, label=!(i < repID.length())), OutEdge(next=11051, label=), OutEdge(next=11093, label=), OutEdge(next=11094, label=!(tmpID2.length() < 4)), OutEdge(next=11095, label=), OutEdge(next=11119, label=), OutEdge(next=11126, label=), OutEdge(next=10998, label=), OutEdge(next=11146, label=), OutEdge(next=11141, label=)]
[DBG] Var t = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT tst_SCP_id FROM SeriumCreatinePhosphokinase WHERE tst_SCP_id = (SELECT MAX(tst_SCP_id) FROM SeriumCreatinePhosphokinase);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_SCP_id FROM SeriumCreatinePhosphokinase WHERE tst_SCP_id = (SELECT MAX(tst_SCP_id) FROM SeriumCreatinePhosphokinase);, values={})
customSelection: (resultset SELECT tst_SCP_id FROM SeriumCreatinePhosphokinase WHERE tst_SCP_id = (SELECT tst_SCP_id FROM SeriumCreatinePhosphokinase))
[DBG] Var repID = (db SeriumCreatinePhosphokinase.tst_SCP_id {SeriumCreatinePhosphokinase.tst_SCP_id=(db SeriumCreatinePhosphokinase.tst_SCP_id {})})
[DBG] Var tmpID = (invoke (db SeriumCreatinePhosphokinase.tst_SCP_id {SeriumCreatinePhosphokinase.tst_SCP_id=(db SeriumCreatinePhosphokinase.tst_SCP_id {})}) toCharArray [])
[DBG] Var i = (data INT 0)
[loop] new loop 11050 at !(i < repID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db SeriumCreatinePhosphokinase.tst_SCP_id {SeriumCreatinePhosphokinase.tst_SCP_id=(db SeriumCreatinePhosphokinase.tst_SCP_id {})}) substring [(data INT 3), (invoke (db SeriumCreatinePhosphokinase.tst_SCP_id {SeriumCreatinePhosphokinase.tst_SCP_id=(db SeriumCreatinePhosphokinase.tst_SCP_id {})}) length [])])) (data INT 1)))
[loop] new loop 11094 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO SeriumCreatinePhosphokinase(tst_SCP_id, appointment_id, hiv12ELISA,date) VALUE(') (+ (data java.lang.String scp) (unknown from null))) (data java.lang.String ',')) (free appointment_id)) (data java.lang.String ',')) (free hiv12ELISA)) (data java.lang.String ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO SeriumCreatinePhosphokinase(tst_SCP_id, appointment_id, hiv12ELISA,date) VALUE('scp[[tmpID2]]','[[appointment_id]]','[[hiv12ELISA]]',NOW()), values={})
[DBG] add atom (INSERT SeriumCreatinePhosphokinase {SeriumCreatinePhosphokinase.tst_SCP_id=(free freshTmpID2), SeriumCreatinePhosphokinase.appointment_id=(free appointment_id), SeriumCreatinePhosphokinase.hiv12ELISA=(free hiv12ELISA), SeriumCreatinePhosphokinase.date=(free now)})
* Effectual method LabAssistant.LabAssistant.liverFunctionTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class LabAssistant.LabAssistant
[DBG] Class field: labAssistantID
-free appointment_id String
-free totalProtein Real
-free albumin Real
-free globulin Real
-free totalBilirubin Real
-free directBilirubin Real
-free sgotast Real
-free sgptalt Real
-free alkalinePhospates Real
[DBG] Run path 11374: [OutEdge(next=11186, label=), OutEdge(next=11198, label=), OutEdge(next=11205, label=), OutEdge(next=11200, label=), OutEdge(next=11224, label=), OutEdge(next=11231, label=), OutEdge(next=11238, label=), OutEdge(next=11245, label=), OutEdge(next=11258, label=), OutEdge(next=11259, label=!(i < repID.length())), OutEdge(next=11260, label=), OutEdge(next=11302, label=), OutEdge(next=11303, label=!(tmpID2.length() < 4)), OutEdge(next=11304, label=), OutEdge(next=11328, label=), OutEdge(next=11335, label=), OutEdge(next=11207, label=), OutEdge(next=11355, label=), OutEdge(next=11350, label=)]
[DBG] Var t = (data BOOLEAN true)
[DBG] Var id = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT tst_liver_id FROM LiverFunctionTest WHERE tst_liver_id = (SELECT MAX(tst_liver_id) FROM LiverFunctionTest);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tst_liver_id FROM LiverFunctionTest WHERE tst_liver_id = (SELECT MAX(tst_liver_id) FROM LiverFunctionTest);, values={})
customSelection: (resultset SELECT tst_liver_id FROM LiverFunctionTest WHERE tst_liver_id = (SELECT tst_liver_id FROM LiverFunctionTest))
[DBG] Var repID = (db LiverFunctionTest.tst_liver_id {LiverFunctionTest.tst_liver_id=(db LiverFunctionTest.tst_liver_id {})})
[DBG] Var tmpID = (invoke (db LiverFunctionTest.tst_liver_id {LiverFunctionTest.tst_liver_id=(db LiverFunctionTest.tst_liver_id {})}) toCharArray [])
[DBG] Var i = (data INT 0)
[loop] new loop 11259 at !(i < repID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db LiverFunctionTest.tst_liver_id {LiverFunctionTest.tst_liver_id=(db LiverFunctionTest.tst_liver_id {})}) substring [(data INT 2), (invoke (db LiverFunctionTest.tst_liver_id {LiverFunctionTest.tst_liver_id=(db LiverFunctionTest.tst_liver_id {})}) length [])])) (data INT 1)))
[loop] new loop 11303 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO LiverFunctionTest(tst_liver_id, appointment_id, totalProtein,albumin,globulin,totalBilirubin,directBilirubin,sgotast,sgptalt,alkalinePhospates,date) VALUE(') (+ (data java.lang.String lv) (unknown from null))) (data java.lang.String ',')) (free appointment_id)) (data java.lang.String ',')) (free totalProtein)) (data java.lang.String ',')) (free albumin)) (data java.lang.String ',')) (free globulin)) (data java.lang.String ',')) (free totalBilirubin)) (data java.lang.String ',')) (free directBilirubin)) (data java.lang.String ',')) (free sgotast)) (data java.lang.String ',')) (free sgptalt)) (data java.lang.String ',')) (free alkalinePhospates)) (data java.lang.String ',NOW())))
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO LiverFunctionTest(tst_liver_id, appointment_id, totalProtein,albumin,globulin,totalBilirubin,directBilirubin,sgotast,sgptalt,alkalinePhospates,date) VALUE('lv[[tmpID2]]','[[appointment_id]]','[[totalProtein]]','[[albumin]]','[[globulin]]','[[totalBilirubin]]','[[directBilirubin]]','[[sgotast]]','[[sgptalt]]','[[alkalinePhospates]]',NOW()), values={})
[DBG] add atom (INSERT LiverFunctionTest {LiverFunctionTest.tst_liver_id=(free freshTmpID2), LiverFunctionTest.appointment_id=(free appointment_id), LiverFunctionTest.totalProtein=(free totalProtein), LiverFunctionTest.albumin=(free albumin), LiverFunctionTest.globulin=(free globulin), LiverFunctionTest.totalBilirubin=(free totalBilirubin), LiverFunctionTest.directBilirubin=(free directBilirubin), LiverFunctionTest.sgotast=(free sgotast), LiverFunctionTest.sgptalt=(free sgptalt), LiverFunctionTest.alkalinePhospates=(free alkalinePhospates), LiverFunctionTest.date=(free now)})
* Effectual method Admin.Admin.updateProfileInfo(java.lang.String)
[DBG] Run class Admin.Admin
-free info String
[DBG] Run path 12220: [OutEdge(next=12134, label=), OutEdge(next=12146, label=), OutEdge(next=12153, label=), OutEdge(next=12160, label=), OutEdge(next=12173, label=), OutEdge(next=12180, label=), OutEdge(next=12187, label=), OutEdge(next=12194, label=), OutEdge(next=12201, label=), OutEdge(next=12196, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[DBG] Var tmplen = (+ (invoke (unknown from tmpData[0]) length []) (data INT 1))
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE person SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = ')) (unknown from this.userID)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v26]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '[[v27|this.userID]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})
* Effectual method Admin.Admin.updateAccountInfo(java.lang.String)
[DBG] Run class Admin.Admin
-free info String
[DBG] Run path 12327: [OutEdge(next=12248, label=), OutEdge(next=12260, label=), OutEdge(next=12267, label=), OutEdge(next=12274, label=), OutEdge(next=12287, label=), OutEdge(next=12294, label=), OutEdge(next=12301, label=), OutEdge(next=12308, label=), OutEdge(next=12303, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE sys_user SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE user_id = ')) (unknown from this.userID)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v28]] WHERE user_id = '[[v29|this.userID]]');, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method Admin.Admin.createNewUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Admin.Admin
-free firstName String
-free lastName String
-free userType String
-free nic String
-free mobile String
-free slmcReg String
[DBG] Run path 12913: [OutEdge(next=12355, label=), OutEdge(next=12367, label=), OutEdge(next=12374, label=), OutEdge(next=12381, label=), OutEdge(next=12388, label=), OutEdge(next=12395, label=), OutEdge(next=12390, label=), OutEdge(next=12414, label=), OutEdge(next=12421, label=), OutEdge(next=12428, label=), OutEdge(next=12435, label=), OutEdge(next=12448, label=), OutEdge(next=12449, label=!(i < personID.length())), OutEdge(next=12450, label=), OutEdge(next=12492, label=), OutEdge(next=12493, label=!(tmpID2.length() < 5)), OutEdge(next=12494, label=), OutEdge(next=12518, label=), OutEdge(next=12525, label=), OutEdge(next=12397, label=), OutEdge(next=12557, label=), OutEdge(next=12564, label=), OutEdge(next=12571, label=), OutEdge(next=12578, label=), OutEdge(next=12591, label=), OutEdge(next=12592, label=!(i < userID.length())), OutEdge(next=12593, label=), OutEdge(next=12635, label=), OutEdge(next=12636, label=!(tmpID2.length() < 4)), OutEdge(next=12637, label=), OutEdge(next=12661, label=), OutEdge(next=12668, label=), OutEdge(next=12675, label=), OutEdge(next=12540, label=), OutEdge(next=12707, label=), OutEdge(next=12714, label=), OutEdge(next=12721, label=), OutEdge(next=12728, label=), OutEdge(next=12741, label=), OutEdge(next=12742, label=!(i < userID.length())), OutEdge(next=12743, label=), OutEdge(next=12785, label=), OutEdge(next=12786, label=!(tmpID2.length() < 3)), OutEdge(next=12787, label=), OutEdge(next=12811, label=), OutEdge(next=12818, label=), OutEdge(next=12825, label=), OutEdge(next=12690, label=), OutEdge(next=12845, label=), OutEdge(next=12852, label=), OutEdge(next=12859, label=), OutEdge(next=12866, label=), OutEdge(next=12873, label=), OutEdge(next=12880, label=), OutEdge(next=12887, label=), OutEdge(next=12894, label=), OutEdge(next=12889, label=)]
[DBG] Var result = (data BOOLEAN false)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new ArrayList<String>()
[DBG] Var data = (unknown from new ArrayList<String>())
[DBG] Var personId = (data java.lang.String )
[DBG] Var userId = (data java.lang.String )
[DBG] Var userName = (data java.lang.String )
[DBG] Var sql0 = (data java.lang.String SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[DBG] Var tmpID = (invoke (db person.person_id {person.person_id=(db person.person_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 12449 at !(i < personID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data INT 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data INT 1)))
[loop] new loop 12493 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var sql0 = (data java.lang.String SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);, values={})
customSelection: (resultset SELECT user_id FROM sys_user WHERE user_id = (SELECT user_id FROM sys_user))
[DBG] Var userID = (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})})
[DBG] Var tmpID = (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 12592 at !(i < userID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) substring [(data INT 3), (- (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) length []) (data INT 1))])) (data INT 1)))
[loop] new loop 12636 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql0 = (data java.lang.String SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);, values={})
customSelection: (resultset SELECT user_name FROM sys_user WHERE user_name = (SELECT user_name FROM sys_user))
[DBG] Var userID = (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})})
[DBG] Var tmpID = (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) toCharArray [])
[DBG] Var i = (data INT 4)
[loop] new loop 12742 at !(i < userID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) substring [(data INT 4), (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) length [])])) (data INT 1)))
[loop] new loop 12786 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[DBG] Var sql1 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES (') (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ',')) (free firstName)) (data java.lang.String ',')) (free lastName)) (data java.lang.String ',')) (free nic)) (data java.lang.String ',')) (free mobile)) (data java.lang.String ');))
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES (') (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ',')) (+ (+ (data java.lang.String hms) (unknown from null)) (data java.lang.String u))) (data java.lang.String ',')) (+ (data java.lang.String user) (unknown from null))) (data java.lang.String ',')) (free userType)) (data java.lang.String ', '1234' );))
[DBG] Var sql3 = (+ (+ (+ (+ (data java.lang.String UPDATE person SET user_id = ') (+ (+ (data java.lang.String hms) (unknown from null)) (data java.lang.String u))) (data java.lang.String ' WHERE person_id = ')) (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ';))
[DBG] Var sql4 = (data java.lang.String )
[DBG] Var doctorID = (data java.lang.String )
[DBG] Var labAssistantID = (data java.lang.String )
[DBG] Var pharmacistID = (data java.lang.String )
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES ('hms[[tmpID2]]','[[firstName]]','[[lastName]]','[[nic]]','[[mobile]]');, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})
[DBG] Run class Admin.Admin
-free firstName String
-free lastName String
-free userType String
-free nic String
-free mobile String
-free slmcReg String
[DBG] Run path 12920: [OutEdge(next=12355, label=), OutEdge(next=12367, label=), OutEdge(next=12374, label=), OutEdge(next=12381, label=), OutEdge(next=12388, label=), OutEdge(next=12395, label=), OutEdge(next=12390, label=), OutEdge(next=12414, label=), OutEdge(next=12421, label=), OutEdge(next=12428, label=), OutEdge(next=12435, label=), OutEdge(next=12448, label=), OutEdge(next=12449, label=!(i < personID.length())), OutEdge(next=12450, label=), OutEdge(next=12492, label=), OutEdge(next=12493, label=!(tmpID2.length() < 5)), OutEdge(next=12494, label=), OutEdge(next=12518, label=), OutEdge(next=12525, label=), OutEdge(next=12397, label=), OutEdge(next=12557, label=), OutEdge(next=12564, label=), OutEdge(next=12571, label=), OutEdge(next=12578, label=), OutEdge(next=12591, label=), OutEdge(next=12592, label=!(i < userID.length())), OutEdge(next=12593, label=), OutEdge(next=12635, label=), OutEdge(next=12636, label=!(tmpID2.length() < 4)), OutEdge(next=12637, label=), OutEdge(next=12661, label=), OutEdge(next=12668, label=), OutEdge(next=12675, label=), OutEdge(next=12540, label=), OutEdge(next=12707, label=), OutEdge(next=12714, label=), OutEdge(next=12721, label=), OutEdge(next=12728, label=), OutEdge(next=12741, label=), OutEdge(next=12742, label=!(i < userID.length())), OutEdge(next=12743, label=), OutEdge(next=12785, label=), OutEdge(next=12786, label=!(tmpID2.length() < 3)), OutEdge(next=12787, label=), OutEdge(next=12811, label=), OutEdge(next=12818, label=), OutEdge(next=12825, label=), OutEdge(next=12690, label=), OutEdge(next=12845, label=), OutEdge(next=12852, label=), OutEdge(next=12859, label=), OutEdge(next=12866, label=), OutEdge(next=12873, label=), OutEdge(next=12880, label=), OutEdge(next=12887, label=), OutEdge(next=12894, label=), OutEdge(next=12889, label=), OutEdge(next=12913, label=)]
[DBG] Var result = (data BOOLEAN false)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new ArrayList<String>()
[DBG] Var data = (unknown from new ArrayList<String>())
[DBG] Var personId = (data java.lang.String )
[DBG] Var userId = (data java.lang.String )
[DBG] Var userName = (data java.lang.String )
[DBG] Var sql0 = (data java.lang.String SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[DBG] Var tmpID = (invoke (db person.person_id {person.person_id=(db person.person_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 12449 at !(i < personID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data INT 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data INT 1)))
[loop] new loop 12493 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var sql0 = (data java.lang.String SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);, values={})
customSelection: (resultset SELECT user_id FROM sys_user WHERE user_id = (SELECT user_id FROM sys_user))
[DBG] Var userID = (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})})
[DBG] Var tmpID = (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 12592 at !(i < userID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) substring [(data INT 3), (- (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) length []) (data INT 1))])) (data INT 1)))
[loop] new loop 12636 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql0 = (data java.lang.String SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);, values={})
customSelection: (resultset SELECT user_name FROM sys_user WHERE user_name = (SELECT user_name FROM sys_user))
[DBG] Var userID = (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})})
[DBG] Var tmpID = (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) toCharArray [])
[DBG] Var i = (data INT 4)
[loop] new loop 12742 at !(i < userID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) substring [(data INT 4), (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) length [])])) (data INT 1)))
[loop] new loop 12786 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[DBG] Var sql1 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES (') (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ',')) (free firstName)) (data java.lang.String ',')) (free lastName)) (data java.lang.String ',')) (free nic)) (data java.lang.String ',')) (free mobile)) (data java.lang.String ');))
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES (') (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ',')) (+ (+ (data java.lang.String hms) (unknown from null)) (data java.lang.String u))) (data java.lang.String ',')) (+ (data java.lang.String user) (unknown from null))) (data java.lang.String ',')) (free userType)) (data java.lang.String ', '1234' );))
[DBG] Var sql3 = (+ (+ (+ (+ (data java.lang.String UPDATE person SET user_id = ') (+ (+ (data java.lang.String hms) (unknown from null)) (data java.lang.String u))) (data java.lang.String ' WHERE person_id = ')) (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ';))
[DBG] Var sql4 = (data java.lang.String )
[DBG] Var doctorID = (data java.lang.String )
[DBG] Var labAssistantID = (data java.lang.String )
[DBG] Var pharmacistID = (data java.lang.String )
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES ('hms[[tmpID2]]','[[firstName]]','[[lastName]]','[[nic]]','[[mobile]]');, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES ('hms[[tmpID2]]','hms[[tmpID2]]u','user[[tmpID2]]','[[userType]]', '1234' );, values={})
[DBG] add atom (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null 1234)})
[DBG] Run class Admin.Admin
-free firstName String
-free lastName String
-free userType String
-free nic String
-free mobile String
-free slmcReg String
[DBG] Run path 12927: [OutEdge(next=12355, label=), OutEdge(next=12367, label=), OutEdge(next=12374, label=), OutEdge(next=12381, label=), OutEdge(next=12388, label=), OutEdge(next=12395, label=), OutEdge(next=12390, label=), OutEdge(next=12414, label=), OutEdge(next=12421, label=), OutEdge(next=12428, label=), OutEdge(next=12435, label=), OutEdge(next=12448, label=), OutEdge(next=12449, label=!(i < personID.length())), OutEdge(next=12450, label=), OutEdge(next=12492, label=), OutEdge(next=12493, label=!(tmpID2.length() < 5)), OutEdge(next=12494, label=), OutEdge(next=12518, label=), OutEdge(next=12525, label=), OutEdge(next=12397, label=), OutEdge(next=12557, label=), OutEdge(next=12564, label=), OutEdge(next=12571, label=), OutEdge(next=12578, label=), OutEdge(next=12591, label=), OutEdge(next=12592, label=!(i < userID.length())), OutEdge(next=12593, label=), OutEdge(next=12635, label=), OutEdge(next=12636, label=!(tmpID2.length() < 4)), OutEdge(next=12637, label=), OutEdge(next=12661, label=), OutEdge(next=12668, label=), OutEdge(next=12675, label=), OutEdge(next=12540, label=), OutEdge(next=12707, label=), OutEdge(next=12714, label=), OutEdge(next=12721, label=), OutEdge(next=12728, label=), OutEdge(next=12741, label=), OutEdge(next=12742, label=!(i < userID.length())), OutEdge(next=12743, label=), OutEdge(next=12785, label=), OutEdge(next=12786, label=!(tmpID2.length() < 3)), OutEdge(next=12787, label=), OutEdge(next=12811, label=), OutEdge(next=12818, label=), OutEdge(next=12825, label=), OutEdge(next=12690, label=), OutEdge(next=12845, label=), OutEdge(next=12852, label=), OutEdge(next=12859, label=), OutEdge(next=12866, label=), OutEdge(next=12873, label=), OutEdge(next=12880, label=), OutEdge(next=12887, label=), OutEdge(next=12894, label=), OutEdge(next=12889, label=), OutEdge(next=12913, label=), OutEdge(next=12920, label=)]
[DBG] Var result = (data BOOLEAN false)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new ArrayList<String>()
[DBG] Var data = (unknown from new ArrayList<String>())
[DBG] Var personId = (data java.lang.String )
[DBG] Var userId = (data java.lang.String )
[DBG] Var userName = (data java.lang.String )
[DBG] Var sql0 = (data java.lang.String SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[DBG] Var tmpID = (invoke (db person.person_id {person.person_id=(db person.person_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 12449 at !(i < personID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data INT 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data INT 1)))
[loop] new loop 12493 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var sql0 = (data java.lang.String SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);, values={})
customSelection: (resultset SELECT user_id FROM sys_user WHERE user_id = (SELECT user_id FROM sys_user))
[DBG] Var userID = (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})})
[DBG] Var tmpID = (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 12592 at !(i < userID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) substring [(data INT 3), (- (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) length []) (data INT 1))])) (data INT 1)))
[loop] new loop 12636 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql0 = (data java.lang.String SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);, values={})
customSelection: (resultset SELECT user_name FROM sys_user WHERE user_name = (SELECT user_name FROM sys_user))
[DBG] Var userID = (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})})
[DBG] Var tmpID = (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) toCharArray [])
[DBG] Var i = (data INT 4)
[loop] new loop 12742 at !(i < userID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) substring [(data INT 4), (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) length [])])) (data INT 1)))
[loop] new loop 12786 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[DBG] Var sql1 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES (') (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ',')) (free firstName)) (data java.lang.String ',')) (free lastName)) (data java.lang.String ',')) (free nic)) (data java.lang.String ',')) (free mobile)) (data java.lang.String ');))
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES (') (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ',')) (+ (+ (data java.lang.String hms) (unknown from null)) (data java.lang.String u))) (data java.lang.String ',')) (+ (data java.lang.String user) (unknown from null))) (data java.lang.String ',')) (free userType)) (data java.lang.String ', '1234' );))
[DBG] Var sql3 = (+ (+ (+ (+ (data java.lang.String UPDATE person SET user_id = ') (+ (+ (data java.lang.String hms) (unknown from null)) (data java.lang.String u))) (data java.lang.String ' WHERE person_id = ')) (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ';))
[DBG] Var sql4 = (data java.lang.String )
[DBG] Var doctorID = (data java.lang.String )
[DBG] Var labAssistantID = (data java.lang.String )
[DBG] Var pharmacistID = (data java.lang.String )
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES ('hms[[tmpID2]]','[[firstName]]','[[lastName]]','[[nic]]','[[mobile]]');, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES ('hms[[tmpID2]]','hms[[tmpID2]]u','user[[tmpID2]]','[[userType]]', '1234' );, values={})
[DBG] add atom (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null 1234)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET user_id = 'hms[[tmpID2]]u' WHERE person_id = 'hms[[tmpID2]]';, values={})
[DBG] add atom (UPDATE person {person.user_id=(free freshTmpID25)} {person.person_id=(free freshTmpID24)})
[DBG] Run class Admin.Admin
-free firstName String
-free lastName String
-free userType String
-free nic String
-free mobile String
-free slmcReg String
[DBG] Run path 12946: [OutEdge(next=12355, label=), OutEdge(next=12367, label=), OutEdge(next=12374, label=), OutEdge(next=12381, label=), OutEdge(next=12388, label=), OutEdge(next=12395, label=), OutEdge(next=12390, label=), OutEdge(next=12414, label=), OutEdge(next=12421, label=), OutEdge(next=12428, label=), OutEdge(next=12435, label=), OutEdge(next=12448, label=), OutEdge(next=12449, label=!(i < personID.length())), OutEdge(next=12450, label=), OutEdge(next=12492, label=), OutEdge(next=12493, label=!(tmpID2.length() < 5)), OutEdge(next=12494, label=), OutEdge(next=12518, label=), OutEdge(next=12525, label=), OutEdge(next=12397, label=), OutEdge(next=12557, label=), OutEdge(next=12564, label=), OutEdge(next=12571, label=), OutEdge(next=12578, label=), OutEdge(next=12591, label=), OutEdge(next=12592, label=!(i < userID.length())), OutEdge(next=12593, label=), OutEdge(next=12635, label=), OutEdge(next=12636, label=!(tmpID2.length() < 4)), OutEdge(next=12637, label=), OutEdge(next=12661, label=), OutEdge(next=12668, label=), OutEdge(next=12675, label=), OutEdge(next=12540, label=), OutEdge(next=12707, label=), OutEdge(next=12714, label=), OutEdge(next=12721, label=), OutEdge(next=12728, label=), OutEdge(next=12741, label=), OutEdge(next=12742, label=!(i < userID.length())), OutEdge(next=12743, label=), OutEdge(next=12785, label=), OutEdge(next=12786, label=!(tmpID2.length() < 3)), OutEdge(next=12787, label=), OutEdge(next=12811, label=), OutEdge(next=12818, label=), OutEdge(next=12825, label=), OutEdge(next=12690, label=), OutEdge(next=12845, label=), OutEdge(next=12852, label=), OutEdge(next=12859, label=), OutEdge(next=12866, label=), OutEdge(next=12873, label=), OutEdge(next=12880, label=), OutEdge(next=12887, label=), OutEdge(next=12894, label=), OutEdge(next=12889, label=), OutEdge(next=12913, label=), OutEdge(next=12920, label=), OutEdge(next=12927, label=), OutEdge(next=12928, label=(userType == \"doctor\") || (userType == \"pharmacist\") || (userType == \"lab_assistant\")), OutEdge(next=12934, label=)]
[DBG] Var result = (data BOOLEAN false)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new ArrayList<String>()
[DBG] Var data = (unknown from new ArrayList<String>())
[DBG] Var personId = (data java.lang.String )
[DBG] Var userId = (data java.lang.String )
[DBG] Var userName = (data java.lang.String )
[DBG] Var sql0 = (data java.lang.String SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[DBG] Var tmpID = (invoke (db person.person_id {person.person_id=(db person.person_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 12449 at !(i < personID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data INT 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data INT 1)))
[loop] new loop 12493 at !(tmpID2.length() < 5)
[loop] modify tmpID2
[DBG] Var sql0 = (data java.lang.String SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_id FROM sys_user WHERE user_id = (SELECT MAX(user_id) FROM sys_user);, values={})
customSelection: (resultset SELECT user_id FROM sys_user WHERE user_id = (SELECT user_id FROM sys_user))
[DBG] Var userID = (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})})
[DBG] Var tmpID = (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 12592 at !(i < userID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) substring [(data INT 3), (- (invoke (db sys_user.user_id {sys_user.user_id=(db sys_user.user_id {})}) length []) (data INT 1))])) (data INT 1)))
[loop] new loop 12636 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var sql0 = (data java.lang.String SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql0).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql0)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT user_name FROM sys_user WHERE user_name = (SELECT MAX(user_name) FROM sys_user);, values={})
customSelection: (resultset SELECT user_name FROM sys_user WHERE user_name = (SELECT user_name FROM sys_user))
[DBG] Var userID = (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})})
[DBG] Var tmpID = (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) toCharArray [])
[DBG] Var i = (data INT 4)
[loop] new loop 12742 at !(i < userID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) substring [(data INT 4), (invoke (db sys_user.user_name {sys_user.user_name=(db sys_user.user_name {})}) length [])])) (data INT 1)))
[loop] new loop 12786 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[DBG] Var sql1 = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES (') (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ',')) (free firstName)) (data java.lang.String ',')) (free lastName)) (data java.lang.String ',')) (free nic)) (data java.lang.String ',')) (free mobile)) (data java.lang.String ');))
[DBG] Var sql2 = (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES (') (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ',')) (+ (+ (data java.lang.String hms) (unknown from null)) (data java.lang.String u))) (data java.lang.String ',')) (+ (data java.lang.String user) (unknown from null))) (data java.lang.String ',')) (free userType)) (data java.lang.String ', '1234' );))
[DBG] Var sql3 = (+ (+ (+ (+ (data java.lang.String UPDATE person SET user_id = ') (+ (+ (data java.lang.String hms) (unknown from null)) (data java.lang.String u))) (data java.lang.String ' WHERE person_id = ')) (+ (data java.lang.String hms) (unknown from null))) (data java.lang.String ';))
[DBG] Var sql4 = (data java.lang.String )
[DBG] Var doctorID = (data java.lang.String )
[DBG] Var labAssistantID = (data java.lang.String )
[DBG] Var pharmacistID = (data java.lang.String )
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person(person_id,first_name,last_name,nic,mobile) VALUES ('hms[[tmpID2]]','[[firstName]]','[[lastName]]','[[nic]]','[[mobile]]');, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) VALUES ('hms[[tmpID2]]','hms[[tmpID2]]u','user[[tmpID2]]','[[userType]]', '1234' );, values={})
[DBG] add atom (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null 1234)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET user_id = 'hms[[tmpID2]]u' WHERE person_id = 'hms[[tmpID2]]';, values={})
[DBG] add atom (UPDATE person {person.user_id=(free freshTmpID25)} {person.person_id=(free freshTmpID24)})
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (userType == "doctor")
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (userType == "pharmacist")
[WARN] Short-circuit semantics may be ignored
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (userType == "lab_assistant")
[WARN] Short-circuit semantics may be ignored
[COND] condition: (userType == "doctor") || (userType == "pharmacist") || (userType == "lab_assistant")
[WARN] scope is complex: super.dbOperator.customInsertion(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO doctor(slmc_reg_no,user_id) VALUES ('[[slmcReg]]','hms[[tmpID2]]u');, values={})
[DBG] add atom (INSERT doctor {doctor.slmc_reg_no=(free slmcReg), doctor.user_id=(free freshTmpID26)})
* Effectual method Admin.Admin.suspendUser(java.lang.String)
[DBG] Run class Admin.Admin
-free userid String
[DBG] Run path 15759: [OutEdge(next=15714, label=), OutEdge(next=15726, label=), OutEdge(next=15733, label=), OutEdge(next=15728, label=), OutEdge(next=15752, label=)]
[DBG] Var sql1 = (data java.lang.String )
[DBG] Var result = (data BOOLEAN true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET suspend = 1 WHERE user_id = '[[userid]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.suspend=(data null 1)} {sys_user.user_id=(free userid)})
* Effectual method Admin.Admin.unsuspendUser(java.lang.String)
[DBG] Run class Admin.Admin
-free userid String
[DBG] Run path 15825: [OutEdge(next=15780, label=), OutEdge(next=15792, label=), OutEdge(next=15799, label=), OutEdge(next=15794, label=), OutEdge(next=15818, label=)]
[DBG] Var sql1 = (data java.lang.String )
[DBG] Var result = (data BOOLEAN true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET suspend = 0 WHERE user_id = '[[userid]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.suspend=(data null 0)} {sys_user.user_id=(free userid)})
* Effectual method Admin.Admin.resetPassword(java.lang.String)
[DBG] Run class Admin.Admin
-free userid String
[DBG] Run path 16110: [OutEdge(next=16072, label=), OutEdge(next=16084, label=), OutEdge(next=16079, label=), OutEdge(next=16103, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql1 = (+ (+ (data java.lang.String UPDATE sys_user SET password='123456' WHERE user_id = ') (free userid)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql1)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET password='123456' WHERE user_id = '[[userid]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.password=(data null 123456)} {sys_user.user_id=(free userid)})
* Effectual method Receptionist.Receptionist.updateProfileInfo(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free info String
[DBG] Run path 16505: [OutEdge(next=16419, label=), OutEdge(next=16431, label=), OutEdge(next=16438, label=), OutEdge(next=16445, label=), OutEdge(next=16458, label=), OutEdge(next=16465, label=), OutEdge(next=16472, label=), OutEdge(next=16479, label=), OutEdge(next=16486, label=), OutEdge(next=16481, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[DBG] Var tmplen = (+ (invoke (unknown from tmpData[0]) length []) (data INT 1))
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE person SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = ')) (unknown from this.userID)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v30]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '[[v31|this.userID]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})
* Effectual method Receptionist.Receptionist.updateAccountInfo(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free info String
[DBG] Run path 16612: [OutEdge(next=16533, label=), OutEdge(next=16545, label=), OutEdge(next=16552, label=), OutEdge(next=16559, label=), OutEdge(next=16572, label=), OutEdge(next=16579, label=), OutEdge(next=16586, label=), OutEdge(next=16593, label=), OutEdge(next=16588, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE sys_user SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE user_id = ')) (unknown from this.userID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v32]] WHERE user_id = '[[v33|this.userID]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
* Effectual method Receptionist.Receptionist.setPatientInfo(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free patientInfo String
[DBG] Run path 17186: [OutEdge(next=16758, label=), OutEdge(next=16770, label=), OutEdge(next=16777, label=), OutEdge(next=16772, label=), OutEdge(next=16796, label=), OutEdge(next=16803, label=), OutEdge(next=16810, label=), OutEdge(next=16817, label=), OutEdge(next=16830, label=), OutEdge(next=16831, label=!(i < patientID.length())), OutEdge(next=16832, label=), OutEdge(next=16874, label=), OutEdge(next=16875, label=!(tmpID2.length() < 4)), OutEdge(next=16876, label=), OutEdge(next=16900, label=), OutEdge(next=16907, label=), OutEdge(next=16914, label=), OutEdge(next=16921, label=), OutEdge(next=16928, label=), OutEdge(next=16941, label=), OutEdge(next=16942, label=!(i < personID.length())), OutEdge(next=16943, label=), OutEdge(next=16985, label=), OutEdge(next=16986, label=!(tmpID3.length() < 5)), OutEdge(next=16987, label=), OutEdge(next=17011, label=), OutEdge(next=17018, label=), OutEdge(next=17025, label=), OutEdge(next=17032, label=), OutEdge(next=17039, label=), OutEdge(next=17046, label=), OutEdge(next=17053, label=!(index > 0)), OutEdge(next=17054, label=), OutEdge(next=17085, label=), OutEdge(next=17086, label=!(index != 2)), OutEdge(next=17087, label=), OutEdge(next=17111, label=), OutEdge(next=17112, label=!(index != 2)), OutEdge(next=17113, label=), OutEdge(next=17137, label=), OutEdge(next=17144, label=), OutEdge(next=17151, label=), OutEdge(next=17158, label=), OutEdge(next=17165, label=), OutEdge(next=17172, label=), OutEdge(next=17179, label=)]
[DBG] Var value = (data java.lang.String )
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql2 = (data java.lang.String SELECT patient_id FROM patient WHERE patient_id = (SELECT MAX(patient_id) FROM patient);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT patient_id FROM patient WHERE patient_id = (SELECT MAX(patient_id) FROM patient);, values={})
customSelection: (resultset SELECT patient_id FROM patient WHERE patient_id = (SELECT patient_id FROM patient))
[DBG] Var patientID = (db patient.patient_id {patient.patient_id=(db patient.patient_id {})})
[DBG] Var tmpID = (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 16831 at !(i < patientID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) substring [(data INT 3), (- (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) length []) (data INT 2))])) (data INT 1)))
[loop] new loop 16875 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[loop] new loop 16942 at !(i < personID.length())
[DBG] Var tmpID3 = (IntToStr (+ (StrToInt (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data INT 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data INT 1)))
[loop] new loop 16986 at !(tmpID3.length() < 5)
[loop] modify tmpID3
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var columnNames2 = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var rowData2 = (data java.lang.String )
[DBG] Var field = (invoke (free patientInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index != 2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index != 2
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data java.lang.String INSERT INTO person () VALUES ();)
[DBG] Var sql3 = (data java.lang.String INSERT INTO patient () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person () VALUES ();, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshInsertValue), person.user_id=(free freshInsertValue1), person.nic=(free freshInsertValue2), person.gender=(free freshInsertValue3), person.date_of_birth=(free freshInsertValue4), person.address=(free freshInsertValue5), person.mobile=(free freshInsertValue6), person.first_name=(free freshInsertValue7), person.last_name=(free freshInsertValue8), person.email=(free freshInsertValue9), person.nationality=(free freshInsertValue10), person.religion=(free freshInsertValue11)})
[DBG] Run class Receptionist.Receptionist
-free patientInfo String
[DBG] Run path 17193: [OutEdge(next=16758, label=), OutEdge(next=16770, label=), OutEdge(next=16777, label=), OutEdge(next=16772, label=), OutEdge(next=16796, label=), OutEdge(next=16803, label=), OutEdge(next=16810, label=), OutEdge(next=16817, label=), OutEdge(next=16830, label=), OutEdge(next=16831, label=!(i < patientID.length())), OutEdge(next=16832, label=), OutEdge(next=16874, label=), OutEdge(next=16875, label=!(tmpID2.length() < 4)), OutEdge(next=16876, label=), OutEdge(next=16900, label=), OutEdge(next=16907, label=), OutEdge(next=16914, label=), OutEdge(next=16921, label=), OutEdge(next=16928, label=), OutEdge(next=16941, label=), OutEdge(next=16942, label=!(i < personID.length())), OutEdge(next=16943, label=), OutEdge(next=16985, label=), OutEdge(next=16986, label=!(tmpID3.length() < 5)), OutEdge(next=16987, label=), OutEdge(next=17011, label=), OutEdge(next=17018, label=), OutEdge(next=17025, label=), OutEdge(next=17032, label=), OutEdge(next=17039, label=), OutEdge(next=17046, label=), OutEdge(next=17053, label=!(index > 0)), OutEdge(next=17054, label=), OutEdge(next=17085, label=), OutEdge(next=17086, label=!(index != 2)), OutEdge(next=17087, label=), OutEdge(next=17111, label=), OutEdge(next=17112, label=!(index != 2)), OutEdge(next=17113, label=), OutEdge(next=17137, label=), OutEdge(next=17144, label=), OutEdge(next=17151, label=), OutEdge(next=17158, label=), OutEdge(next=17165, label=), OutEdge(next=17172, label=), OutEdge(next=17179, label=), OutEdge(next=17186, label=)]
[DBG] Var value = (data java.lang.String )
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql2 = (data java.lang.String SELECT patient_id FROM patient WHERE patient_id = (SELECT MAX(patient_id) FROM patient);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT patient_id FROM patient WHERE patient_id = (SELECT MAX(patient_id) FROM patient);, values={})
customSelection: (resultset SELECT patient_id FROM patient WHERE patient_id = (SELECT patient_id FROM patient))
[DBG] Var patientID = (db patient.patient_id {patient.patient_id=(db patient.patient_id {})})
[DBG] Var tmpID = (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 16831 at !(i < patientID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) substring [(data INT 3), (- (invoke (db patient.patient_id {patient.patient_id=(db patient.patient_id {})}) length []) (data INT 2))])) (data INT 1)))
[loop] new loop 16875 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT person_id FROM person WHERE person_id = (SELECT MAX(person_id) FROM person);, values={})
customSelection: (resultset SELECT person_id FROM person WHERE person_id = (SELECT person_id FROM person))
[DBG] Var personID = (db person.person_id {person.person_id=(db person.person_id {})})
[loop] new loop 16942 at !(i < personID.length())
[DBG] Var tmpID3 = (IntToStr (+ (StrToInt (invoke (db person.person_id {person.person_id=(db person.person_id {})}) substring [(data INT 3), (invoke (db person.person_id {person.person_id=(db person.person_id {})}) length [])])) (data INT 1)))
[loop] new loop 16986 at !(tmpID3.length() < 5)
[loop] modify tmpID3
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var columnNames2 = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var rowData2 = (data java.lang.String )
[DBG] Var field = (invoke (free patientInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index != 2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index != 2
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data java.lang.String INSERT INTO person () VALUES ();)
[DBG] Var sql3 = (data java.lang.String INSERT INTO patient () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO person () VALUES ();, values={})
[DBG] add atom (INSERT person {person.person_id=(free freshInsertValue), person.user_id=(free freshInsertValue1), person.nic=(free freshInsertValue2), person.gender=(free freshInsertValue3), person.date_of_birth=(free freshInsertValue4), person.address=(free freshInsertValue5), person.mobile=(free freshInsertValue6), person.first_name=(free freshInsertValue7), person.last_name=(free freshInsertValue8), person.email=(free freshInsertValue9), person.nationality=(free freshInsertValue10), person.religion=(free freshInsertValue11)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql3)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO patient () VALUES ();, values={})
[DBG] add atom (INSERT patient {patient.patient_id=(free freshInsertValue12), patient.person_id=(free freshInsertValue13), patient.drug_allergies_and_reactions=(free freshInsertValue14)})
* Effectual method Receptionist.Receptionist.updatePatientInfo(java.lang.String, java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free patientID String
-free info String
[DBG] Run path 17259: [OutEdge(next=17221, label=), OutEdge(next=17233, label=), OutEdge(next=17240, label=), OutEdge(next=17235, label=)]
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE person SET ) (free info)) (data java.lang.String  )) (data java.lang.String WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = ')) (free patientID)) (data java.lang.String ');))
[DBG] Var result = (data BOOLEAN true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[info]] WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '[[patientID]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db patient.person_id {patient.patient_id=(free patientID)})})
* Effectual method Receptionist.Receptionist.makeLabAppointment(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free patienID String
-free doctorID String
-free testID String
-free day String
-free timeSlot String
[DBG] Run path 18627: [OutEdge(next=18195, label=), OutEdge(next=18207, label=), OutEdge(next=18214, label=), OutEdge(next=18221, label=), OutEdge(next=18228, label=), OutEdge(next=18252, label=), OutEdge(next=18259, label=), OutEdge(next=18266, label=), OutEdge(next=18273, label=), OutEdge(next=18286, label=), OutEdge(next=18287, label=!(i < appointmentID.length())), OutEdge(next=18288, label=), OutEdge(next=18330, label=), OutEdge(next=18331, label=!(tmpID2.length() < 3)), OutEdge(next=18332, label=), OutEdge(next=18356, label=), OutEdge(next=18363, label=), OutEdge(next=18235, label=), OutEdge(next=18390, label=), OutEdge(next=18397, label=), OutEdge(next=18404, label=), OutEdge(next=18411, label=), OutEdge(next=18406, label=), OutEdge(next=18430, label=), OutEdge(next=18437, label=), OutEdge(next=18438, label=tmpday > today), OutEdge(next=18444, label=), OutEdge(next=18456, label=), OutEdge(next=18439, label=), OutEdge(next=18476, label=), OutEdge(next=18483, label=), OutEdge(next=18490, label=), OutEdge(next=18497, label=), OutEdge(next=18504, label=), OutEdge(next=18511, label=), OutEdge(next=18524, label=), OutEdge(next=18531, label=), OutEdge(next=18538, label=), OutEdge(next=18545, label=), OutEdge(next=18552, label=), OutEdge(next=18559, label=), OutEdge(next=18566, label=), OutEdge(next=18573, label=), OutEdge(next=18580, label=), OutEdge(next=18587, label=), OutEdge(next=18594, label=), OutEdge(next=18589, label=), OutEdge(next=18613, label=), OutEdge(next=18620, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var value = (data java.lang.String false)
[DBG] Var tmpID2 = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data INT 4)
[loop] new loop 18287 at !(i < appointmentID.length())
[loop] new loop 18331 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data INT 0)
[DBG] Var tmpday = (StrToInt (free day))
[DBG] Var appDate = (data java.lang.String )
[DBG] Var calendar = (invoke (unknown from Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[DBG] Var cal = (invoke (unknown from Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))
[DBG] Var columnNames = (data java.lang.String lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String ') (+ (data java.lang.String lapp) (unknown from null))) (data java.lang.String ' , ')) (free testID)) (data java.lang.String ' , ')) (free patienID)) (data java.lang.String ' , ')) (free doctorID)) (data java.lang.String ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))) (data java.lang.String ' , false ))
[DBG] Var sql7 = (+ (+ (data java.lang.String INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String ') (+ (data java.lang.String lapp) (unknown from null))) (data java.lang.String ' , ')) (free testID)) (data java.lang.String ' , ')) (free patienID)) (data java.lang.String ' , ')) (free doctorID)) (data java.lang.String ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))) (data java.lang.String ' , false ))) (data java.lang.String );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data java.lang.String UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data java.lang.String ' AND app_test_id = ')) (free testID)) (data java.lang.String ' AND app_day = ')) (free day)) (data java.lang.String ';))
[DBG] Var sql10 = (+ (+ (data java.lang.String SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var appointmentFee = (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))
[DBG] Var billInfo = (+ (+ (+ (data java.lang.String patient_id ) (free patienID)) (data java.lang.String ,laboratory_fee )) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)})))
[DBG] Var sql4 = (+ (+ (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (+ (+ (data java.lang.String UPDATE tmp_bill SET laboratory_fee = ' ) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))) (data java.lang.String  ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = ' [[?34]] ' WHERE tmp_bill_id = '[[?35]]';, values={34=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)})), 35=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] Run class Receptionist.Receptionist
-free patienID String
-free doctorID String
-free testID String
-free day String
-free timeSlot String
[DBG] Run path 18916: [OutEdge(next=18195, label=), OutEdge(next=18207, label=), OutEdge(next=18214, label=), OutEdge(next=18221, label=), OutEdge(next=18228, label=), OutEdge(next=18252, label=), OutEdge(next=18259, label=), OutEdge(next=18266, label=), OutEdge(next=18273, label=), OutEdge(next=18286, label=), OutEdge(next=18287, label=!(i < appointmentID.length())), OutEdge(next=18288, label=), OutEdge(next=18330, label=), OutEdge(next=18331, label=!(tmpID2.length() < 3)), OutEdge(next=18332, label=), OutEdge(next=18356, label=), OutEdge(next=18363, label=), OutEdge(next=18235, label=), OutEdge(next=18390, label=), OutEdge(next=18397, label=), OutEdge(next=18404, label=), OutEdge(next=18411, label=), OutEdge(next=18406, label=), OutEdge(next=18430, label=), OutEdge(next=18437, label=), OutEdge(next=18438, label=tmpday > today), OutEdge(next=18444, label=), OutEdge(next=18456, label=), OutEdge(next=18439, label=), OutEdge(next=18476, label=), OutEdge(next=18483, label=), OutEdge(next=18490, label=), OutEdge(next=18497, label=), OutEdge(next=18504, label=), OutEdge(next=18511, label=), OutEdge(next=18524, label=), OutEdge(next=18531, label=), OutEdge(next=18538, label=), OutEdge(next=18545, label=), OutEdge(next=18552, label=), OutEdge(next=18559, label=), OutEdge(next=18566, label=), OutEdge(next=18573, label=), OutEdge(next=18580, label=), OutEdge(next=18587, label=), OutEdge(next=18594, label=), OutEdge(next=18589, label=), OutEdge(next=18613, label=), OutEdge(next=18620, label=), OutEdge(next=18627, label=ex(java.lang.ClassNotFoundException result = super.dbOperator.customInsertion(sql5))), OutEdge(next=18604, label=catch(java.lang.Exception e)), OutEdge(next=18628, label=), OutEdge(next=18640, label=), OutEdge(next=18635, label=), OutEdge(next=18659, label=), OutEdge(next=18666, label=), OutEdge(next=18673, label=), OutEdge(next=18686, label=), OutEdge(next=18687, label=!(i < billID.length())), OutEdge(next=18688, label=), OutEdge(next=18730, label=), OutEdge(next=18731, label=!(tmpID2.length() < 4)), OutEdge(next=18732, label=), OutEdge(next=18756, label=), OutEdge(next=18642, label=), OutEdge(next=18776, label=), OutEdge(next=18783, label=), OutEdge(next=18790, label=), OutEdge(next=18797, label=), OutEdge(next=18804, label=!(index > 0)), OutEdge(next=18805, label=), OutEdge(next=18836, label=), OutEdge(next=18837, label=!(index < 3)), OutEdge(next=18838, label=), OutEdge(next=18862, label=), OutEdge(next=18863, label=!(index < 3)), OutEdge(next=18864, label=), OutEdge(next=18888, label=), OutEdge(next=18895, label=), OutEdge(next=18902, label=), OutEdge(next=18909, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var value = (data java.lang.String false)
[DBG] Var tmpID2 = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data INT 4)
[loop] new loop 18287 at !(i < appointmentID.length())
[loop] new loop 18331 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data INT 0)
[DBG] Var tmpday = (StrToInt (free day))
[DBG] Var appDate = (data java.lang.String )
[DBG] Var calendar = (invoke (unknown from Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[DBG] Var cal = (invoke (unknown from Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))
[DBG] Var columnNames = (data java.lang.String lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String ') (+ (data java.lang.String lapp) (unknown from null))) (data java.lang.String ' , ')) (free testID)) (data java.lang.String ' , ')) (free patienID)) (data java.lang.String ' , ')) (free doctorID)) (data java.lang.String ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))) (data java.lang.String ' , false ))
[DBG] Var sql7 = (+ (+ (data java.lang.String INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String ') (+ (data java.lang.String lapp) (unknown from null))) (data java.lang.String ' , ')) (free testID)) (data java.lang.String ' , ')) (free patienID)) (data java.lang.String ' , ')) (free doctorID)) (data java.lang.String ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))) (data java.lang.String ' , false ))) (data java.lang.String );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data java.lang.String UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data java.lang.String ' AND app_test_id = ')) (free testID)) (data java.lang.String ' AND app_day = ')) (free day)) (data java.lang.String ';))
[DBG] Var sql10 = (+ (+ (data java.lang.String SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var appointmentFee = (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))
[DBG] Var billInfo = (+ (+ (+ (data java.lang.String patient_id ) (free patienID)) (data java.lang.String ,laboratory_fee )) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)})))
[DBG] Var sql4 = (+ (+ (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (+ (+ (data java.lang.String UPDATE tmp_bill SET laboratory_fee = ' ) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))) (data java.lang.String  ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = ' [[?36]] ' WHERE tmp_bill_id = '[[?37]]';, values={36=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)})), 37=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] unknown label: ex(java.lang.ClassNotFoundException result = super.dbOperator.customInsertion(sql5)), assuming to be true
[WARN] unknown label: catch(java.lang.Exception e), assuming to be true
[DBG] Var sql2 = (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT MAX(tmp_bill_id) FROM tmp_bill);, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE tmp_bill_id = (SELECT tmp_bill_id FROM tmp_bill))
[DBG] Var billID = (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})})
[DBG] Var tmpID = (invoke (db tmp_bill.tmp_bill_id {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {})}) toCharArray [])
[DBG] Var i = (null from i)
[loop] new loop 18687 at !(i < billID.length())
[loop] new loop 18731 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var field = (invoke (+ (+ (+ (data java.lang.String patient_id ) (free patienID)) (data java.lang.String ,laboratory_fee )) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[DBG] Var sql = (data java.lang.String INSERT INTO tmp_bill () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO tmp_bill () VALUES ();, values={})
[DBG] add atom (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})
[DBG] Run class Receptionist.Receptionist
-free patienID String
-free doctorID String
-free testID String
-free day String
-free timeSlot String
[DBG] Run path 18923: [OutEdge(next=18195, label=), OutEdge(next=18207, label=), OutEdge(next=18214, label=), OutEdge(next=18221, label=), OutEdge(next=18228, label=), OutEdge(next=18252, label=), OutEdge(next=18259, label=), OutEdge(next=18266, label=), OutEdge(next=18273, label=), OutEdge(next=18286, label=), OutEdge(next=18287, label=!(i < appointmentID.length())), OutEdge(next=18288, label=), OutEdge(next=18330, label=), OutEdge(next=18331, label=!(tmpID2.length() < 3)), OutEdge(next=18332, label=), OutEdge(next=18356, label=), OutEdge(next=18363, label=), OutEdge(next=18235, label=), OutEdge(next=18390, label=), OutEdge(next=18397, label=), OutEdge(next=18404, label=), OutEdge(next=18411, label=), OutEdge(next=18406, label=), OutEdge(next=18430, label=), OutEdge(next=18437, label=), OutEdge(next=18438, label=tmpday > today), OutEdge(next=18444, label=), OutEdge(next=18456, label=), OutEdge(next=18439, label=), OutEdge(next=18476, label=), OutEdge(next=18483, label=), OutEdge(next=18490, label=), OutEdge(next=18497, label=), OutEdge(next=18504, label=), OutEdge(next=18511, label=), OutEdge(next=18524, label=), OutEdge(next=18531, label=), OutEdge(next=18538, label=), OutEdge(next=18545, label=), OutEdge(next=18552, label=), OutEdge(next=18559, label=), OutEdge(next=18566, label=), OutEdge(next=18573, label=), OutEdge(next=18580, label=), OutEdge(next=18587, label=), OutEdge(next=18594, label=), OutEdge(next=18589, label=), OutEdge(next=18613, label=), OutEdge(next=18620, label=), OutEdge(next=18627, label=), OutEdge(next=18596, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var value = (data java.lang.String false)
[DBG] Var tmpID2 = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data INT 4)
[loop] new loop 18287 at !(i < appointmentID.length())
[loop] new loop 18331 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data INT 0)
[DBG] Var tmpday = (StrToInt (free day))
[DBG] Var appDate = (data java.lang.String )
[DBG] Var calendar = (invoke (unknown from Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[DBG] Var cal = (invoke (unknown from Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))
[DBG] Var columnNames = (data java.lang.String lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String ') (+ (data java.lang.String lapp) (unknown from null))) (data java.lang.String ' , ')) (free testID)) (data java.lang.String ' , ')) (free patienID)) (data java.lang.String ' , ')) (free doctorID)) (data java.lang.String ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))) (data java.lang.String ' , false ))
[DBG] Var sql7 = (+ (+ (data java.lang.String INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String ') (+ (data java.lang.String lapp) (unknown from null))) (data java.lang.String ' , ')) (free testID)) (data java.lang.String ' , ')) (free patienID)) (data java.lang.String ' , ')) (free doctorID)) (data java.lang.String ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))) (data java.lang.String ' , false ))) (data java.lang.String );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data java.lang.String UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data java.lang.String ' AND app_test_id = ')) (free testID)) (data java.lang.String ' AND app_day = ')) (free day)) (data java.lang.String ';))
[DBG] Var sql10 = (+ (+ (data java.lang.String SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var appointmentFee = (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))
[DBG] Var billInfo = (+ (+ (+ (data java.lang.String patient_id ) (free patienID)) (data java.lang.String ,laboratory_fee )) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)})))
[DBG] Var sql4 = (+ (+ (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (+ (+ (data java.lang.String UPDATE tmp_bill SET laboratory_fee = ' ) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))) (data java.lang.String  ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = ' [[?38]] ' WHERE tmp_bill_id = '[[?39]]';, values={38=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)})), 39=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] scope is complex: super.dbOperator.customInsertion(sql7)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES ('lapp[[tmpID2]]' , '[[testID]]' , '[[patienID]]' , '[[doctorID]]' , '[[v40]] [[v41]]:00' , false );, values={})
[DBG] add atom (INSERT lab_appointment {lab_appointment.lab_appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), lab_appointment.test_id=(free testID), lab_appointment.patient_id=(free patienID), lab_appointment.doctor_id=(free doctorID), lab_appointment.date=(free freshV40), lab_appointment.cancelled=(data null false)})
[DBG] Run class Receptionist.Receptionist
-free patienID String
-free doctorID String
-free testID String
-free day String
-free timeSlot String
[DBG] Run path 18930: [OutEdge(next=18195, label=), OutEdge(next=18207, label=), OutEdge(next=18214, label=), OutEdge(next=18221, label=), OutEdge(next=18228, label=), OutEdge(next=18252, label=), OutEdge(next=18259, label=), OutEdge(next=18266, label=), OutEdge(next=18273, label=), OutEdge(next=18286, label=), OutEdge(next=18287, label=!(i < appointmentID.length())), OutEdge(next=18288, label=), OutEdge(next=18330, label=), OutEdge(next=18331, label=!(tmpID2.length() < 3)), OutEdge(next=18332, label=), OutEdge(next=18356, label=), OutEdge(next=18363, label=), OutEdge(next=18235, label=), OutEdge(next=18390, label=), OutEdge(next=18397, label=), OutEdge(next=18404, label=), OutEdge(next=18411, label=), OutEdge(next=18406, label=), OutEdge(next=18430, label=), OutEdge(next=18437, label=), OutEdge(next=18438, label=tmpday > today), OutEdge(next=18444, label=), OutEdge(next=18456, label=), OutEdge(next=18439, label=), OutEdge(next=18476, label=), OutEdge(next=18483, label=), OutEdge(next=18490, label=), OutEdge(next=18497, label=), OutEdge(next=18504, label=), OutEdge(next=18511, label=), OutEdge(next=18524, label=), OutEdge(next=18531, label=), OutEdge(next=18538, label=), OutEdge(next=18545, label=), OutEdge(next=18552, label=), OutEdge(next=18559, label=), OutEdge(next=18566, label=), OutEdge(next=18573, label=), OutEdge(next=18580, label=), OutEdge(next=18587, label=), OutEdge(next=18594, label=), OutEdge(next=18589, label=), OutEdge(next=18613, label=), OutEdge(next=18620, label=), OutEdge(next=18627, label=), OutEdge(next=18596, label=), OutEdge(next=18923, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var value = (data java.lang.String false)
[DBG] Var tmpID2 = (data java.lang.String )
[DBG] Var sql2 = (data java.lang.String SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT MAX(lab_appointment_id) FROM lab_appointment);, values={})
customSelection: (resultset SELECT lab_appointment_id FROM lab_appointment WHERE lab_appointment_id = (SELECT lab_appointment_id FROM lab_appointment))
[DBG] Var appointmentID = (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})})
[DBG] Var tmpID = (invoke (db lab_appointment.lab_appointment_id {lab_appointment.lab_appointment_id=(db lab_appointment.lab_appointment_id {})}) toCharArray [])
[DBG] Var i = (data INT 4)
[loop] new loop 18287 at !(i < appointmentID.length())
[loop] new loop 18331 at !(tmpID2.length() < 3)
[loop] modify tmpID2
[WARN] unknown class com.github.javaparser.ast.expr.ArrayInitializerExpr: { 1, 2, 3, 4, 5, 6, 7 }
[DBG] Var days = (unknown from { 1, 2, 3, 4, 5, 6, 7 })
[DBG] Var daysToAppointment = (data INT 0)
[DBG] Var tmpday = (StrToInt (free day))
[DBG] Var appDate = (data java.lang.String )
[DBG] Var calendar = (invoke (unknown from Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DAY_OF_WEEK
[DBG] Var today = (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
[COND] condition: tmpday > today
[WARN] unknown class com.github.javaparser.ast.expr.EnclosedExpr: (tmpday - today)
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd")
[DBG] Var dateFormat = (unknown from new SimpleDateFormat("yyyy-MM-dd"))
[DBG] Var cal = (invoke (unknown from Calendar) getInstance [])
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: Calendar.DATE
[WARN] scope is complex: System.out.println(appDate)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[DBG] Var tmpTimeSlot = (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])
[DBG] Var dateTime = (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))
[DBG] Var columnNames = (data java.lang.String lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled)
[DBG] Var rowData = (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String ') (+ (data java.lang.String lapp) (unknown from null))) (data java.lang.String ' , ')) (free testID)) (data java.lang.String ' , ')) (free patienID)) (data java.lang.String ' , ')) (free doctorID)) (data java.lang.String ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))) (data java.lang.String ' , false ))
[DBG] Var sql7 = (+ (+ (data java.lang.String INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES () (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (data java.lang.String ') (+ (data java.lang.String lapp) (unknown from null))) (data java.lang.String ' , ')) (free testID)) (data java.lang.String ' , ')) (free patienID)) (data java.lang.String ' , ')) (free doctorID)) (data java.lang.String ' , ')) (+ (+ (+ (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])]) (data java.lang.String  )) (invoke (free timeSlot) substring [(data INT 0), (data INT 5)])) (data java.lang.String :00))) (data java.lang.String ' , false ))) (data java.lang.String );))
[DBG] Var sql8 = (+ (+ (+ (+ (+ (+ (data java.lang.String UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = ') (free timeSlot)) (data java.lang.String ' AND app_test_id = ')) (free testID)) (data java.lang.String ' AND app_day = ')) (free day)) (data java.lang.String ';))
[DBG] Var sql10 = (+ (+ (data java.lang.String SELECT test_fee FROM lab_test WHERE test_id = ') (free testID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql10)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]';, values={})
customSelection: (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[DBG] Var data = (resultset SELECT test_fee FROM lab_test WHERE test_id = '[[testID]]')
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var appointmentFee = (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))
[DBG] Var billInfo = (+ (+ (+ (data java.lang.String patient_id ) (free patienID)) (data java.lang.String ,laboratory_fee )) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)})))
[DBG] Var sql4 = (+ (+ (data java.lang.String SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = ') (free patienID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql4).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql4)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]';, values={})
customSelection: (resultset SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '[[patienID]]')
[DBG] Var sql5 = (+ (+ (+ (+ (data java.lang.String UPDATE tmp_bill SET laboratory_fee = ' ) (IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))) (data java.lang.String  ' WHERE tmp_bill_id = ')) (db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql5)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE tmp_bill SET laboratory_fee = ' [[?42]] ' WHERE tmp_bill_id = '[[?43]]';, values={42=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)})), 43=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[DBG] add atom (UPDATE tmp_bill {tmp_bill.laboratory_fee=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})
[WARN] scope is complex: super.dbOperator.customInsertion(sql7)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO lab_appointment (lab_appointment_id,test_id,patient_id,doctor_id,date,cancelled) VALUES ('lapp[[tmpID2]]' , '[[testID]]' , '[[patienID]]' , '[[doctorID]]' , '[[v44]] [[v45]]:00' , false );, values={})
[DBG] add atom (INSERT lab_appointment {lab_appointment.lab_appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), lab_appointment.test_id=(free testID), lab_appointment.patient_id=(free patienID), lab_appointment.doctor_id=(free doctorID), lab_appointment.date=(free freshV44), lab_appointment.cancelled=(data null false)})
[WARN] scope is complex: super.dbOperator.customInsertion(sql8)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_appointment_timetable SET current_week_appointments = current_week_appointments + 1 WHERE time_slot = '[[timeSlot]]' AND app_test_id = '[[testID]]' AND app_day = '[[day]]';, values={})
[DBG] add atom (UPDATE lab_appointment_timetable {lab_appointment_timetable.current_week_appointments=(+ (db lab_appointment_timetable.current_week_appointments null) (data null 1))} {lab_appointment_timetable.time_slot=(free timeSlot), lab_appointment_timetable.app_test_id=(free testID), lab_appointment_timetable.app_day=(StrToInt (free day))})
* Effectual method Receptionist.Receptionist.cancelAppointment(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free appointmentID String
[DBG] Run path 20672: [OutEdge(next=20634, label=), OutEdge(next=20646, label=), OutEdge(next=20653, label=), OutEdge(next=20648, label=)]
[DBG] Var result = (data BOOLEAN false)
[DBG] Var sql = (+ (+ (data java.lang.String UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = ') (free appointmentID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)})
[DBG] Run class Receptionist.Receptionist
-free appointmentID String
[DBG] Run path 20790: [OutEdge(next=20634, label=), OutEdge(next=20646, label=), OutEdge(next=20653, label=), OutEdge(next=20648, label=), OutEdge(next=20672, label=), OutEdge(next=20673, label=result == true), OutEdge(next=20679, label=), OutEdge(next=20691, label=), OutEdge(next=20698, label=), OutEdge(next=20693, label=), OutEdge(next=20717, label=), OutEdge(next=20724, label=), OutEdge(next=20725, label=!data.get(1).get(0).equals(\"NULL\")), OutEdge(next=20731, label=), OutEdge(next=20743, label=), OutEdge(next=20750, label=), OutEdge(next=20757, label=), OutEdge(next=20764, label=), OutEdge(next=20771, label=), OutEdge(next=20766, label=)]
[DBG] Var result = (data BOOLEAN false)
[DBG] Var sql = (+ (+ (data java.lang.String UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = ') (free appointmentID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE appointment SET cancelled = true WHERE appointment.appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)})
[COND] condition: result == true
[DBG] Var data = (null from null)
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT appointment.bill_id, bill.total FROM appointment INNER JOIN bill ON appointment.bill_id = bill.bill_id WHERE appointment_id = '[[appointmentID]]', values={})
customSelection: (unknown from null)
[WARN] scope is complex: System.out.println(data)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: data.get(1).get(0).equals("NULL")
[WARN] scope is complex: data.get(1).get(0)
[COND] condition: !data.get(1).get(0).equals("NULL")
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var billID = (unknown from data.get(1).get(0))
[WARN] scope is complex: data.get(1).get(1)
[DBG] Var amount = (unknown from data.get(1).get(1))
[DBG] Var refundInfo = (+ (+ (+ (data java.lang.String bill_id ) (unknown from data.get(1).get(0))) (data java.lang.String ,payment_type docApp,reason no_reason,amount )) (unknown from data.get(1).get(1)))
[ERR] don't know how to handle empty scope for refund(refundInfo)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE bill SET refund = 1 WHERE bill_id = '[[v46|data.get(1).get(0)]]', values={})
[DBG] add atom (UPDATE bill {bill.refund=(data null 1)} {bill.bill_id=(free freshData_get_1__get_0_)})
* Effectual method Receptionist.Receptionist.refund(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free refundInfo String
[DBG] Run path 21178: [OutEdge(next=20889, label=), OutEdge(next=20901, label=), OutEdge(next=20896, label=), OutEdge(next=20920, label=), OutEdge(next=20927, label=), OutEdge(next=20934, label=), OutEdge(next=20941, label=), OutEdge(next=20954, label=), OutEdge(next=20955, label=!(i < refundID.length())), OutEdge(next=20956, label=), OutEdge(next=20998, label=), OutEdge(next=20999, label=!(tmpID2.length() < 4)), OutEdge(next=21000, label=), OutEdge(next=21024, label=), OutEdge(next=21031, label=), OutEdge(next=21038, label=), OutEdge(next=21045, label=), OutEdge(next=21052, label=), OutEdge(next=21059, label=!(index > 0)), OutEdge(next=21060, label=), OutEdge(next=21091, label=), OutEdge(next=21092, label=!(index < 3)), OutEdge(next=21093, label=), OutEdge(next=21117, label=), OutEdge(next=21118, label=!(index < 3)), OutEdge(next=21119, label=), OutEdge(next=21143, label=), OutEdge(next=21150, label=), OutEdge(next=21157, label=), OutEdge(next=21164, label=), OutEdge(next=21171, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql2 = (data java.lang.String SELECT refund_id FROM refund WHERE refund_id = (SELECT MAX(refund_id) FROM bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT refund_id FROM refund WHERE refund_id = (SELECT MAX(refund_id) FROM bill);, values={})
[ERR] select table doesn't have refund_id, this is likely to be a bug in the original project; expr=(SELECT refund_id FROM bill)
customSelection: (resultset SELECT refund_id FROM refund WHERE refund_id = (SELECT refund_id FROM bill))
[DBG] Var refundID = (db refund.refund_id {refund.refund_id=(db refund.refund_id {})})
[DBG] Var tmpID = (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) toCharArray [])
[DBG] Var i = (data INT 1)
[loop] new loop 20955 at !(i < refundID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) substring [(data INT 1), (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) length [])])) (data INT 1)))
[loop] new loop 20999 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var field = (invoke (free refundInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[WARN] scope is complex: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
[WARN] scope is complex: Calendar.getInstance().getTime()
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])])
[DBG] Var sql = (data java.lang.String INSERT INTO refund () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO refund () VALUES ();, values={})
[DBG] add atom (INSERT refund {refund.refund_id=(free freshInsertValue), refund.bill_id=(free freshInsertValue1), refund.payment_type=(free freshInsertValue2), refund.reason=(free freshInsertValue3), refund.amount=(free freshInsertValue4), refund.date=(free freshInsertValue5)})
* Effectual method Receptionist.Receptionist.cancelLabAppointment(java.lang.String)
[DBG] Run class Receptionist.Receptionist
-free appointmentID String
[DBG] Run path 21244: [OutEdge(next=21206, label=), OutEdge(next=21218, label=), OutEdge(next=21225, label=), OutEdge(next=21220, label=)]
[DBG] Var result = (data BOOLEAN false)
[DBG] Var sql = (+ (+ (data java.lang.String UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = ') (free appointmentID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)})
[DBG] Run class Receptionist.Receptionist
-free appointmentID String
[DBG] Run path 21362: [OutEdge(next=21206, label=), OutEdge(next=21218, label=), OutEdge(next=21225, label=), OutEdge(next=21220, label=), OutEdge(next=21244, label=), OutEdge(next=21245, label=result == true), OutEdge(next=21251, label=), OutEdge(next=21263, label=), OutEdge(next=21270, label=), OutEdge(next=21265, label=), OutEdge(next=21289, label=), OutEdge(next=21296, label=), OutEdge(next=21297, label=!data.get(1).get(0).equals(\"NULL\")), OutEdge(next=21303, label=), OutEdge(next=21315, label=), OutEdge(next=21322, label=), OutEdge(next=21329, label=), OutEdge(next=21336, label=), OutEdge(next=21343, label=), OutEdge(next=21338, label=)]
[DBG] Var result = (data BOOLEAN false)
[DBG] Var sql = (+ (+ (data java.lang.String UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = ') (free appointmentID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE lab_appointment SET cancelled = true WHERE lab_appointment.lab_appointment_id = '[[appointmentID]]';, values={})
[DBG] add atom (UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)})
[COND] condition: result == true
[DBG] Var data = (null from null)
[WARN] scope is complex: super.dbOperator.customSelection(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT lab_appointment.bill_id, bill.total FROM lab_appointment INNER JOIN bill ON lab_appointment.bill_id = bill.bill_id WHERE lab_appointment_id = '[[appointmentID]]', values={})
customSelection: (unknown from null)
[WARN] scope is complex: System.out.println(data)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: data.get(1).get(0).equals("NULL")
[WARN] scope is complex: data.get(1).get(0)
[COND] condition: !data.get(1).get(0).equals("NULL")
[WARN] scope is complex: data.get(1).get(0)
[DBG] Var billID = (unknown from data.get(1).get(0))
[WARN] scope is complex: data.get(1).get(1)
[DBG] Var amount = (unknown from data.get(1).get(1))
[DBG] Var refundInfo = (+ (+ (+ (data java.lang.String bill_id ) (unknown from data.get(1).get(0))) (data java.lang.String ,payment_type labApp,reason no_reason,amount )) (unknown from data.get(1).get(1)))
[ERR] don't know how to handle empty scope for refund(refundInfo)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE bill SET refund = 1 WHERE bill_id = '[[v47|data.get(1).get(0)]]', values={})
[DBG] add atom (UPDATE bill {bill.refund=(data null 1)} {bill.bill_id=(free freshData_get_1__get_0_)})
* Effectual method Cashier.Cashier.bill(java.lang.String)
[DBG] Run class Cashier.Cashier
-free billInfo String
[DBG] Run path 22247: [OutEdge(next=21951, label=), OutEdge(next=21963, label=), OutEdge(next=21958, label=), OutEdge(next=21982, label=), OutEdge(next=21989, label=), OutEdge(next=21996, label=), OutEdge(next=22003, label=), OutEdge(next=22016, label=), OutEdge(next=22017, label=!(i < billID.length())), OutEdge(next=22018, label=), OutEdge(next=22060, label=), OutEdge(next=22061, label=!(tmpID2.length() < 4)), OutEdge(next=22062, label=), OutEdge(next=22086, label=), OutEdge(next=22093, label=), OutEdge(next=22100, label=), OutEdge(next=22107, label=), OutEdge(next=22114, label=), OutEdge(next=22121, label=!(index > 0)), OutEdge(next=22122, label=), OutEdge(next=22153, label=), OutEdge(next=22154, label=!(index < 3)), OutEdge(next=22155, label=), OutEdge(next=22179, label=), OutEdge(next=22180, label=!(index < 3)), OutEdge(next=22181, label=), OutEdge(next=22205, label=), OutEdge(next=22212, label=), OutEdge(next=22219, label=), OutEdge(next=22226, label=), OutEdge(next=22233, label=), OutEdge(next=22240, label=)]
[DBG] Var result = (data java.lang.String 0)
[DBG] Var sql2 = (data java.lang.String SELECT bill_id FROM bill WHERE bill_id = (SELECT MAX(bill_id) FROM bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT bill_id FROM bill WHERE bill_id = (SELECT MAX(bill_id) FROM bill);, values={})
customSelection: (resultset SELECT bill_id FROM bill WHERE bill_id = (SELECT bill_id FROM bill))
[DBG] Var billID = (db bill.bill_id {bill.bill_id=(db bill.bill_id {})})
[DBG] Var tmpID = (invoke (db bill.bill_id {bill.bill_id=(db bill.bill_id {})}) toCharArray [])
[DBG] Var i = (data INT 3)
[loop] new loop 22017 at !(i < billID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db bill.bill_id {bill.bill_id=(db bill.bill_id {})}) substring [(data INT 3), (- (invoke (db bill.bill_id {bill.bill_id=(db bill.bill_id {})}) length []) (data INT 1))])) (data INT 1)))
[loop] new loop 22061 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var field = (invoke (free billInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[WARN] scope is complex: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
[WARN] scope is complex: Calendar.getInstance().getTime()
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])])
[DBG] Var sql = (data java.lang.String INSERT INTO bill () VALUES ();)
[WARN] scope is complex: System.out.println(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: System.out
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO bill () VALUES ();, values={})
[DBG] add atom (INSERT bill {bill.bill_id=(free freshInsertValue), bill.bill_date=(free freshInsertValue1), bill.doctor_fee=(free freshInsertValue2), bill.hospital_fee=(free freshInsertValue3), bill.pharmacy_fee=(free freshInsertValue4), bill.laboratory_fee=(free freshInsertValue5), bill.appointment_fee=(free freshInsertValue6), bill.vat=(free freshInsertValue7), bill.discount=(free freshInsertValue8), bill.total=(free freshInsertValue9), bill.payment_method=(free freshInsertValue10), bill.consultant_id=(free freshInsertValue11), bill.patient_id=(free freshInsertValue12), bill.refund=(free freshInsertValue13)})
[DBG] Var res = (data null true)
* Effectual method Cashier.Cashier.removeFromTempBill(java.lang.String)
[DBG] Run class Cashier.Cashier
-free patientID String
[DBG] Run path 22378: [OutEdge(next=22340, label=), OutEdge(next=22352, label=), OutEdge(next=22359, label=), OutEdge(next=22354, label=)]
[DBG] Var result = (data BOOLEAN false)
[DBG] Var sql = (+ (+ (data java.lang.String DELETE FROM tmp_bill WHERE patient_id = ') (free patientID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=DELETE FROM tmp_bill WHERE patient_id = '[[patientID]]';, values={})
[DBG] add atom (DELETE tmp_bill {tmp_bill.patient_id=(free patientID)})
* Effectual method Cashier.Cashier.refund(java.lang.String)
[DBG] Run class Cashier.Cashier
-free refundInfo String
[DBG] Run path 22747: [OutEdge(next=22458, label=), OutEdge(next=22470, label=), OutEdge(next=22465, label=), OutEdge(next=22489, label=), OutEdge(next=22496, label=), OutEdge(next=22503, label=), OutEdge(next=22510, label=), OutEdge(next=22523, label=), OutEdge(next=22524, label=!(i < refundID.length())), OutEdge(next=22525, label=), OutEdge(next=22567, label=), OutEdge(next=22568, label=!(tmpID2.length() < 4)), OutEdge(next=22569, label=), OutEdge(next=22593, label=), OutEdge(next=22600, label=), OutEdge(next=22607, label=), OutEdge(next=22614, label=), OutEdge(next=22621, label=), OutEdge(next=22628, label=!(index > 0)), OutEdge(next=22629, label=), OutEdge(next=22660, label=), OutEdge(next=22661, label=!(index < 3)), OutEdge(next=22662, label=), OutEdge(next=22686, label=), OutEdge(next=22687, label=!(index < 3)), OutEdge(next=22688, label=), OutEdge(next=22712, label=), OutEdge(next=22719, label=), OutEdge(next=22726, label=), OutEdge(next=22733, label=), OutEdge(next=22740, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var sql2 = (data java.lang.String SELECT refund_id FROM refund WHERE refund_id = (SELECT MAX(refund_id) FROM bill);)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1).get(0)
[WARN] scope is complex: super.dbOperator.customSelection(sql2).get(1)
[WARN] scope is complex: super.dbOperator.customSelection(sql2)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Selection Approx = SqlApprox(template=SELECT refund_id FROM refund WHERE refund_id = (SELECT MAX(refund_id) FROM bill);, values={})
[ERR] select table doesn't have refund_id, this is likely to be a bug in the original project; expr=(SELECT refund_id FROM bill)
customSelection: (resultset SELECT refund_id FROM refund WHERE refund_id = (SELECT refund_id FROM bill))
[DBG] Var refundID = (db refund.refund_id {refund.refund_id=(db refund.refund_id {})})
[DBG] Var tmpID = (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) toCharArray [])
[DBG] Var i = (data INT 1)
[loop] new loop 22524 at !(i < refundID.length())
[DBG] Var tmpID2 = (IntToStr (+ (StrToInt (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) substring [(data INT 1), (invoke (db refund.refund_id {refund.refund_id=(db refund.refund_id {})}) length [])])) (data INT 1)))
[loop] new loop 22568 at !(tmpID2.length() < 4)
[loop] modify tmpID2
[DBG] Var columnNames = (data java.lang.String )
[DBG] Var rowData = (data java.lang.String )
[DBG] Var field = (invoke (free refundInfo) split [(data java.lang.String ,)])
[DBG] Var index = (data INT 0)
[COND] condition: index > 0
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[0]
[COND] condition: index < 3
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: val.split(" ")[1]
[COND] condition: index < 3
[WARN] unary operator POSTFIX_INCREMENT unsupported
[WARN] scope is complex: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime())
[WARN] unknown class com.github.javaparser.ast.expr.ObjectCreationExpr: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
[WARN] scope is complex: Calendar.getInstance().getTime()
[DBG] Var date = (invoke (unknown from new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")) format [(invoke (invoke (unknown from Calendar) getInstance []) getTime [])])
[DBG] Var sql = (data java.lang.String INSERT INTO refund () VALUES ();)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=INSERT INTO refund () VALUES ();, values={})
[DBG] add atom (INSERT refund {refund.refund_id=(free freshInsertValue), refund.bill_id=(free freshInsertValue1), refund.payment_type=(free freshInsertValue2), refund.reason=(free freshInsertValue3), refund.amount=(free freshInsertValue4), refund.date=(free freshInsertValue5)})
* Effectual method Cashier.Cashier.makeRefund(java.lang.String)
[DBG] Run class Cashier.Cashier
-free id String
[DBG] Run path 22872: [OutEdge(next=22834, label=), OutEdge(next=22846, label=), OutEdge(next=22853, label=), OutEdge(next=22848, label=)]
[DBG] Var sql = (+ (+ (data java.lang.String DELETE FROM refund WHERE refund_id = ') (free id)) (data java.lang.String '))
[DBG] Var result = (data BOOLEAN true)
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=DELETE FROM refund WHERE refund_id = '[[id]]', values={})
[DBG] add atom (DELETE refund {refund.refund_id=(free id)})
* Effectual method Cashier.Cashier.updateProfileInfo(java.lang.String)
[DBG] Run class Cashier.Cashier
-free info String
[DBG] Run path 23097: [OutEdge(next=23011, label=), OutEdge(next=23023, label=), OutEdge(next=23030, label=), OutEdge(next=23037, label=), OutEdge(next=23050, label=), OutEdge(next=23057, label=), OutEdge(next=23064, label=), OutEdge(next=23071, label=), OutEdge(next=23078, label=), OutEdge(next=23073, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[DBG] Var tmplen = (+ (invoke (unknown from tmpData[0]) length []) (data INT 1))
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE person SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = ')) (unknown from this.userID)) (data java.lang.String ');))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE person SET [[v48]] WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '[[v49|this.userID]]');, values={})
[DBG] add atom (UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})
* Effectual method Cashier.Cashier.updateAccountInfo(java.lang.String)
[DBG] Run class Cashier.Cashier
-free info String
[DBG] Run path 23204: [OutEdge(next=23125, label=), OutEdge(next=23137, label=), OutEdge(next=23144, label=), OutEdge(next=23151, label=), OutEdge(next=23164, label=), OutEdge(next=23171, label=), OutEdge(next=23178, label=), OutEdge(next=23185, label=), OutEdge(next=23180, label=)]
[DBG] Var result = (data BOOLEAN true)
[DBG] Var column_data = (data java.lang.String )
[DBG] Var tmpInfo = (invoke (free info) split [(data java.lang.String #)])
[DBG] Var tmpData = (invoke (unknown from s) split [(data java.lang.String  )])
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] scope is complex: tmpData[0].length()
[WARN] unknown class com.github.javaparser.ast.expr.ArrayAccessExpr: tmpData[0]
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: this.userID
[DBG] Var sql = (+ (+ (+ (+ (+ (data java.lang.String UPDATE sys_user SET ) (invoke (data java.lang.String ) substring [(data INT 0), (- (invoke (data java.lang.String ) length []) (data INT 1))])) (data java.lang.String  )) (data java.lang.String WHERE user_id = ')) (unknown from this.userID)) (data java.lang.String ';))
[WARN] scope is complex: super.dbOperator.customInsertion(sql)
[WARN] unknown class com.github.javaparser.ast.expr.FieldAccessExpr: super.dbOperator
Insertion Approx = SqlApprox(template=UPDATE sys_user SET [[v50]] WHERE user_id = '[[v51|this.userID]]';, values={})
[DBG] add atom (UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})
[RIGI] Op_Doctor_Doctor_updateProfileInfo_23656
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(db doctor.user_id {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})})})]
[RIGI] Op_Doctor_Doctor_updateDoctorInfo_23657
    [COND] []
    [SOP]  [(UPDATE doctor {doctor.education=(free freshEducation), doctor.training=(free freshTraining), doctor.experienced_areas=(free freshExperienced_areas), doctor.experience=(free freshExperience), doctor.achievements=(free freshAchievements), doctor.channelling_fee=(free freshChannelling_fee)} {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})]
[RIGI] Op_Doctor_Doctor_updateAccountInfo_23658
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(db doctor.user_id {doctor.slmc_reg_no=(free freshThis_slmcRegNo)})})]
[RIGI] Op_Doctor_Doctor_diagnose_23659
    [COND] []
    [SOP]  [(INSERT medical_history {medical_history.history_id=(free freshTmpID2), medical_history.patient_id=(free patientID), medical_history.doctor_id=(free freshThis_slmcRegNo), medical_history.date=(free freshV8), medical_history.history=(free diagnostic)})]
[RIGI] Op_Doctor_Doctor_bill_23660
    [COND] []
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(StrToInt (free labFee))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})]
    [COND] [(> (data INT 0) (data INT 0)), (< (data INT 0) (data INT 3)), (< (data INT 0) (data INT 3))]
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(StrToInt (free labFee))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})}), (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})]
[RIGI] Op_Doctor_Doctor_allergies_23661
    [COND] []
    [SOP]  [(UPDATE patient {patient.drug_allergies_and_reactions=(db patient.drug_allergies_and_reactions {patient.patient_id=(free patientID)})} {patient.patient_id=(free patientID)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewDrug_23662
    [COND] [(> (data INT 0) (data INT 0)), (< (data INT 0) (data INT 3)), (< (data INT 0) (data INT 3))]
    [SOP]  [(INSERT drug {drug.drug_id=(free freshInsertValue), drug.drug_name=(free freshInsertValue1), drug.dangerous_drug=(free freshInsertValue2)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewStock_23663
    [COND] [(> (data INT 0) (data INT 0)), (unknown from (index == 2) || (index == 5) || (index == 6)), (unknown from (index == 2) || (index == 5) || (index == 6))]
[ERR] unknown cond (unknown from (index == 2) || (index == 5) || (index == 6))
[ERR] unknown cond (unknown from (index == 2) || (index == 5) || (index == 6))
    [SOP]  [(INSERT pharmacy_stock {pharmacy_stock.stock_id=(free freshInsertValue), pharmacy_stock.drug_id=(free freshInsertValue1), pharmacy_stock.brand_id=(free freshInsertValue2), pharmacy_stock.stock=(free freshInsertValue3), pharmacy_stock.remaining_quantity=(free freshInsertValue4), pharmacy_stock.manufac_date=(free freshInsertValue5), pharmacy_stock.exp_date=(free freshInsertValue6), pharmacy_stock.supplier_id=(free freshInsertValue7), pharmacy_stock.date=(free freshInsertValue8)})]
[RIGI] Op_Pharmacist_Pharmacist_reduceStock_23664
    [COND] [(>= (StrToInt (IntToStr (db pharmacy_stock.remaining_quantity {pharmacy_stock.stock_id=(free stkID)}))) (free qt))]
    [SOP]  [(UPDATE pharmacy_stock {pharmacy_stock.remaining_quantity=(- (db pharmacy_stock.remaining_quantity null) (free qt))} {pharmacy_stock.stock_id=(free stkID)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewDrug2_23665
    [COND] []
    [SOP]  [(INSERT drug {drug.drug_id=(free freshTmpID2), drug.drug_name=(free genName), drug.dangerous_drug=(data null 0)})]
[RIGI] Op_Pharmacist_Pharmacist_addNewBrand_23666
    [COND] []
    [SOP]  [(INSERT drug_brand_names {drug_brand_names.brand_id=(free freshTmpID2), drug_brand_names.brand_name=(free brandName), drug_brand_names.generic_name=(free genName), drug_brand_names.drug_type=(free type), drug_brand_names.drug_unit=(free unit), drug_brand_names.unit_price=(StrToInt (free price))})]
[RIGI] Op_Pharmacist_Pharmacist_addNewSupplier_23667
    [COND] []
    [SOP]  [(INSERT suppliers {suppliers.supplier_id=(free freshTmpID2), suppliers.supplier_name=(free suppName)})]
[RIGI] Op_Pharmacist_Pharmacist_updateStock_23668
    [COND] []
    [SOP]  [(INSERT pharmacy_stock {pharmacy_stock.stock_id=(free freshTmpID2), pharmacy_stock.drug_id=(free drugID), pharmacy_stock.brand_id=(free brandID), pharmacy_stock.stock=(StrToInt (free stock)), pharmacy_stock.remaining_quantity=(StrToInt (free stock)), pharmacy_stock.manufac_date=(StrToInt (free manuDate)), pharmacy_stock.exp_date=(StrToInt (free expDate)), pharmacy_stock.supplier_id=(free suppID), pharmacy_stock.date=(StrToInt (free date))})]
[RIGI] Op_Pharmacist_Pharmacist_updateProfileInfo_23669
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_name=(free freshSuper_username)})})]
[RIGI] Op_Pharmacist_Pharmacist_updatePharmacistInfo_23670
    [COND] []
    [SOP]  [(UPDATE pharmacist {pharmacist.education=(free freshEducation), pharmacist.training=(free freshTraining), pharmacist.experience=(free freshExperience), pharmacist.achievements=(free freshAchievements)} {pharmacist.pharmacist_id=(free freshThis_pharmacistID)})]
[RIGI] Op_Pharmacist_Pharmacist_updateAccountInfo_23671
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
[RIGI] Op_Pharmacist_Pharmacist_bill_23672
    [COND] []
    [SOP]  [(UPDATE tmp_bill {tmp_bill.pharmacy_fee=(StrToInt (free pharmacyFee))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})})]
    [COND] [(> (data INT 0) (data INT 0)), (< (data INT 0) (data INT 3)), (< (data INT 0) (data INT 3))]
    [SOP]  [(UPDATE tmp_bill {tmp_bill.pharmacy_fee=(StrToInt (free pharmacyFee))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patientID)})}), (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})]
[RIGI] Op_LabAssistant_LabAssistant_updateProfileInfo_23673
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_name=(free freshSuper_username)})})]
[RIGI] Op_LabAssistant_LabAssistant_updateLabAssistantInfo_23674
    [COND] []
    [SOP]  [(UPDATE lab_assistant {lab_assistant.education=(free freshEducation), lab_assistant.training=(free freshTraining), lab_assistant.experience=(free freshExperience), lab_assistant.achievements=(free freshAchievements)} {lab_assistant.lab_assistant_id=(free freshThis_labAssistantID)})]
[RIGI] Op_LabAssistant_LabAssistant_updateAccountInfo_23675
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
[RIGI] Op_LabAssistant_LabAssistant_UrineFullReport_23676
    [COND] []
    [SOP]  [(INSERT UrineFullReport {UrineFullReport.tst_ur_id=(free freshTmpID2), UrineFullReport.appointment_id=(free appointment_id), UrineFullReport.appearance=(free appearance), UrineFullReport.sgRefractometer=(free sgRefractometer), UrineFullReport.ph=(free ph), UrineFullReport.protein=(free protein), UrineFullReport.glucose=(free glucose), UrineFullReport.ketoneBodies=(free ketoneBodies), UrineFullReport.bilirubin=(free bilirubin), UrineFullReport.urobilirubin=(free urobilirubin), UrineFullReport.contrifugedDepositsphaseContrastMicroscopy=(free contrifugedDepositsphaseContrastMicroscopy), UrineFullReport.pusCells=(free pusCells), UrineFullReport.redCells=(free redCells), UrineFullReport.epithelialCells=(free epithelialCells), UrineFullReport.casts=(free casts), UrineFullReport.cristals=(free cristals), UrineFullReport.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_LipidTest_23677
    [COND] []
    [SOP]  [(INSERT LipidTest {LipidTest.tst_li_id=(free freshTmpID2), LipidTest.appointment_id=(free appointment_id), LipidTest.cholestrolHDL=(free cholestrolHDL), LipidTest.cholestrolLDL=(free cholestrolLDL), LipidTest.triglycerides=(free triglycerides), LipidTest.totalCholestrolLDLHDLratio=(free totalCholestrolLDLHDLratio), LipidTest.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_BloodGroupingTest_23678
    [COND] []
    [SOP]  [(INSERT BloodGroupingRh {BloodGroupingRh.tst_bloodG_id=(free freshTmpID2), BloodGroupingRh.appointment_id=(free app_id), BloodGroupingRh.bloodGroup=(free bloodG), BloodGroupingRh.rhesusD=(free rhD), BloodGroupingRh.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_completeBloodCount_23679
    [COND] []
    [SOP]  [(INSERT completeBloodCount {completeBloodCount.tst_CBC_id=(free freshTmpID2), completeBloodCount.appointment_id=(free appointment_id), completeBloodCount.totalWhiteCellCount=(StrToInt (free totalWhiteCellCount)), completeBloodCount.differentialCount=(StrToInt (free differentialCount)), completeBloodCount.neutrophils=(StrToInt (free neutrophils)), completeBloodCount.lymphocytes=(StrToInt (free lymphocytes)), completeBloodCount.monocytes=(StrToInt (free monocytes)), completeBloodCount.eosonophils=(StrToInt (free eosonophils)), completeBloodCount.basophils=(StrToInt (free basophils)), completeBloodCount.haemoglobin=(free haemoglobin), completeBloodCount.redBloodCells=(free redBloodCells), completeBloodCount.meanCellVolume=(free meanCellVolume), completeBloodCount.haematocrit=(free haematocrit), completeBloodCount.meanCellHaemoglobin=(free meanCellHaemoglobin), completeBloodCount.mchConcentration=(free mchConcentration), completeBloodCount.redCellsDistributionWidth=(free redCellsDistributionWidth), completeBloodCount.plateletCount=(StrToInt (free plateletCount)), completeBloodCount.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_RenalFunctionTest_23680
    [COND] []
    [SOP]  [(INSERT RenalFunctionTest {RenalFunctionTest.tst_renal_id=(free freshTmpID2), RenalFunctionTest.appointment_id=(free appointment_id), RenalFunctionTest.creatinine=(free creatinine), RenalFunctionTest.urea=(free urea), RenalFunctionTest.totalBilirubin=(free totalBilirubin), RenalFunctionTest.directBilirubin=(free directBilirubin), RenalFunctionTest.sgotast=(free sgotast), RenalFunctionTest.sgptalt=(free sgptalt), RenalFunctionTest.alkalinePhospates=(free alkalinePhospates), RenalFunctionTest.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_SeriumCreatinePhosphokinaseTotal_23681
    [COND] []
    [SOP]  [(INSERT SeriumCreatinePhosphokinaseTotal {SeriumCreatinePhosphokinaseTotal.tst_SCPT_id=(free freshTmpID2), SeriumCreatinePhosphokinaseTotal.appointment_id=(free appointment_id), SeriumCreatinePhosphokinaseTotal.cpkTotal=(StrToInt (free cpkTotal)), SeriumCreatinePhosphokinaseTotal.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_SeriumCreatinePhosphokinase_23682
    [COND] []
    [SOP]  [(INSERT SeriumCreatinePhosphokinase {SeriumCreatinePhosphokinase.tst_SCP_id=(free freshTmpID2), SeriumCreatinePhosphokinase.appointment_id=(free appointment_id), SeriumCreatinePhosphokinase.hiv12ELISA=(free hiv12ELISA), SeriumCreatinePhosphokinase.date=(free now)})]
[RIGI] Op_LabAssistant_LabAssistant_liverFunctionTest_23683
    [COND] []
    [SOP]  [(INSERT LiverFunctionTest {LiverFunctionTest.tst_liver_id=(free freshTmpID2), LiverFunctionTest.appointment_id=(free appointment_id), LiverFunctionTest.totalProtein=(free totalProtein), LiverFunctionTest.albumin=(free albumin), LiverFunctionTest.globulin=(free globulin), LiverFunctionTest.totalBilirubin=(free totalBilirubin), LiverFunctionTest.directBilirubin=(free directBilirubin), LiverFunctionTest.sgotast=(free sgotast), LiverFunctionTest.sgptalt=(free sgptalt), LiverFunctionTest.alkalinePhospates=(free alkalinePhospates), LiverFunctionTest.date=(free now)})]
[RIGI] Op_Admin_Admin_updateProfileInfo_23684
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})]
[RIGI] Op_Admin_Admin_updateAccountInfo_23685
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
[RIGI] Op_Admin_Admin_createNewUser_23686
    [COND] []
    [SOP]  [(INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)})]
    [COND] []
    [SOP]  [(INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)}), (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null 1234)})]
    [COND] []
    [SOP]  [(INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)}), (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null 1234)}), (UPDATE person {person.user_id=(free freshTmpID25)} {person.person_id=(free freshTmpID24)})]
    [COND] [(unknown from (userType == "doctor") || (userType == "pharmacist") || (userType == "lab_assistant"))]
[ERR] unknown cond (unknown from (userType == "doctor") || (userType == "pharmacist") || (userType == "lab_assistant"))
    [SOP]  [(INSERT person {person.person_id=(free freshTmpID2), person.first_name=(free firstName), person.last_name=(free lastName), person.nic=(free nic), person.mobile=(free mobile)}), (INSERT sys_user {sys_user.person_id=(free freshTmpID21), sys_user.user_id=(free freshTmpID22), sys_user.user_name=(free freshTmpID23), sys_user.user_type=(free userType), sys_user.password=(data null 1234)}), (UPDATE person {person.user_id=(free freshTmpID25)} {person.person_id=(free freshTmpID24)}), (INSERT doctor {doctor.slmc_reg_no=(free slmcReg), doctor.user_id=(free freshTmpID26)})]
[RIGI] Op_Admin_Admin_suspendUser_23687
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.suspend=(data null 1)} {sys_user.user_id=(free userid)})]
[RIGI] Op_Admin_Admin_unsuspendUser_23688
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.suspend=(data null 0)} {sys_user.user_id=(free userid)})]
[RIGI] Op_Admin_Admin_resetPassword_23689
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.password=(data null 123456)} {sys_user.user_id=(free userid)})]
[RIGI] Op_Receptionist_Receptionist_updateProfileInfo_23690
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})]
[RIGI] Op_Receptionist_Receptionist_updateAccountInfo_23691
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
[RIGI] Op_Receptionist_Receptionist_setPatientInfo_23692
    [COND] [(> (data INT 0) (data INT 0)), (!= (data INT 0) (data INT 2)), (!= (data INT 0) (data INT 2))]
    [SOP]  [(INSERT person {person.person_id=(free freshInsertValue), person.user_id=(free freshInsertValue1), person.nic=(free freshInsertValue2), person.gender=(free freshInsertValue3), person.date_of_birth=(free freshInsertValue4), person.address=(free freshInsertValue5), person.mobile=(free freshInsertValue6), person.first_name=(free freshInsertValue7), person.last_name=(free freshInsertValue8), person.email=(free freshInsertValue9), person.nationality=(free freshInsertValue10), person.religion=(free freshInsertValue11)})]
    [COND] [(> (data INT 0) (data INT 0)), (!= (data INT 0) (data INT 2)), (!= (data INT 0) (data INT 2))]
    [SOP]  [(INSERT person {person.person_id=(free freshInsertValue), person.user_id=(free freshInsertValue1), person.nic=(free freshInsertValue2), person.gender=(free freshInsertValue3), person.date_of_birth=(free freshInsertValue4), person.address=(free freshInsertValue5), person.mobile=(free freshInsertValue6), person.first_name=(free freshInsertValue7), person.last_name=(free freshInsertValue8), person.email=(free freshInsertValue9), person.nationality=(free freshInsertValue10), person.religion=(free freshInsertValue11)}), (INSERT patient {patient.patient_id=(free freshInsertValue12), patient.person_id=(free freshInsertValue13), patient.drug_allergies_and_reactions=(free freshInsertValue14)})]
[RIGI] Op_Receptionist_Receptionist_updatePatientInfo_23693
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db patient.person_id {patient.patient_id=(free patientID)})})]
[RIGI] Op_Receptionist_Receptionist_makeLabAppointment_23694
    [COND] [(> (StrToInt (free day)) (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)]))]
[ERR] Call.toRigi: (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})})]
    [COND] [(> (StrToInt (free day)) (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])), (> (data INT 0) (data INT 0)), (< (data INT 0) (data INT 3)), (< (data INT 0) (data INT 3))]
[ERR] Call.toRigi: (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT tmp_bill {tmp_bill.tmp_bill_id=(free freshInsertValue), tmp_bill.doctor_fee=(free freshInsertValue1), tmp_bill.hospital_fee=(free freshInsertValue2), tmp_bill.pharmacy_fee=(free freshInsertValue3), tmp_bill.laboratory_fee=(free freshInsertValue4), tmp_bill.appointment_fee=(free freshInsertValue5), tmp_bill.vat=(free freshInsertValue6), tmp_bill.discount=(free freshInsertValue7), tmp_bill.consultant_id=(free freshInsertValue8), tmp_bill.patient_id=(free freshInsertValue9)})]
    [COND] [(> (StrToInt (free day)) (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)]))]
[ERR] Call.toRigi: (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT lab_appointment {lab_appointment.lab_appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), lab_appointment.test_id=(free testID), lab_appointment.patient_id=(free patienID), lab_appointment.doctor_id=(free doctorID), lab_appointment.date=(free freshV40), lab_appointment.cancelled=(data null false)})]
    [COND] [(> (StrToInt (free day)) (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)]))]
[ERR] Call.toRigi: (invoke (invoke (unknown from Calendar) getInstance []) get [(unknown from Calendar.DAY_OF_WEEK)])
    [SOP]  [(UPDATE tmp_bill {tmp_bill.laboratory_fee=(IntToStr (db lab_test.test_fee {lab_test.test_id=(free testID)}))} {tmp_bill.tmp_bill_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)})}), (INSERT lab_appointment {lab_appointment.lab_appointment_id=(db tmp_bill.tmp_bill_id {tmp_bill.patient_id=(free patienID)}), lab_appointment.test_id=(free testID), lab_appointment.patient_id=(free patienID), lab_appointment.doctor_id=(free doctorID), lab_appointment.date=(free freshV44), lab_appointment.cancelled=(data null false)}), (UPDATE lab_appointment_timetable {lab_appointment_timetable.current_week_appointments=(+ (db lab_appointment_timetable.current_week_appointments null) (data null 1))} {lab_appointment_timetable.time_slot=(free timeSlot), lab_appointment_timetable.app_test_id=(free testID), lab_appointment_timetable.app_day=(StrToInt (free day))})]
[RIGI] Op_Receptionist_Receptionist_cancelAppointment_23695
    [COND] []
    [SOP]  [(UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)})]
    [COND] [(== (data null true) (data BOOLEAN true)), (! (invoke (unknown from data.get(1).get(0)) equals [(data java.lang.String NULL)]))]
[ERR] unknown cond (! (invoke (unknown from data.get(1).get(0)) equals [(data java.lang.String NULL)]))
    [SOP]  [(UPDATE appointment {appointment.cancelled=(data null false)} {appointment.appointment_id=(free appointmentID)}), (UPDATE bill {bill.refund=(data null 1)} {bill.bill_id=(free freshData_get_1__get_0_)})]
[RIGI] Op_Receptionist_Receptionist_refund_23696
    [COND] [(> (data INT 0) (data INT 0)), (< (data INT 0) (data INT 3)), (< (data INT 0) (data INT 3))]
    [SOP]  [(INSERT refund {refund.refund_id=(free freshInsertValue), refund.bill_id=(free freshInsertValue1), refund.payment_type=(free freshInsertValue2), refund.reason=(free freshInsertValue3), refund.amount=(free freshInsertValue4), refund.date=(free freshInsertValue5)})]
[RIGI] Op_Receptionist_Receptionist_cancelLabAppointment_23697
    [COND] []
    [SOP]  [(UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)})]
    [COND] [(== (data null true) (data BOOLEAN true)), (! (invoke (unknown from data.get(1).get(0)) equals [(data java.lang.String NULL)]))]
[ERR] unknown cond (! (invoke (unknown from data.get(1).get(0)) equals [(data java.lang.String NULL)]))
    [SOP]  [(UPDATE lab_appointment {lab_appointment.cancelled=(data null false)} {lab_appointment.lab_appointment_id=(free appointmentID)}), (UPDATE bill {bill.refund=(data null 1)} {bill.bill_id=(free freshData_get_1__get_0_)})]
[RIGI] Op_Cashier_Cashier_bill_23698
    [COND] [(> (data INT 0) (data INT 0)), (< (data INT 0) (data INT 3)), (< (data INT 0) (data INT 3))]
    [SOP]  [(INSERT bill {bill.bill_id=(free freshInsertValue), bill.bill_date=(free freshInsertValue1), bill.doctor_fee=(free freshInsertValue2), bill.hospital_fee=(free freshInsertValue3), bill.pharmacy_fee=(free freshInsertValue4), bill.laboratory_fee=(free freshInsertValue5), bill.appointment_fee=(free freshInsertValue6), bill.vat=(free freshInsertValue7), bill.discount=(free freshInsertValue8), bill.total=(free freshInsertValue9), bill.payment_method=(free freshInsertValue10), bill.consultant_id=(free freshInsertValue11), bill.patient_id=(free freshInsertValue12), bill.refund=(free freshInsertValue13)})]
[RIGI] Op_Cashier_Cashier_removeFromTempBill_23699
    [COND] []
    [SOP]  [(DELETE tmp_bill {tmp_bill.patient_id=(free patientID)})]
[RIGI] Op_Cashier_Cashier_refund_23700
    [COND] [(> (data INT 0) (data INT 0)), (< (data INT 0) (data INT 3)), (< (data INT 0) (data INT 3))]
    [SOP]  [(INSERT refund {refund.refund_id=(free freshInsertValue), refund.bill_id=(free freshInsertValue1), refund.payment_type=(free freshInsertValue2), refund.reason=(free freshInsertValue3), refund.amount=(free freshInsertValue4), refund.date=(free freshInsertValue5)})]
[RIGI] Op_Cashier_Cashier_makeRefund_23701
    [COND] []
    [SOP]  [(DELETE refund {refund.refund_id=(free id)})]
[RIGI] Op_Cashier_Cashier_updateProfileInfo_23702
    [COND] []
    [SOP]  [(UPDATE person {person.nic=(free freshNic), person.gender=(free freshGender), person.date_of_birth=(free freshDate_of_birth), person.address=(free freshAddress), person.mobile=(free freshMobile), person.first_name=(free freshFirst_name), person.last_name=(free freshLast_name), person.email=(free freshEmail), person.nationality=(free freshNationality), person.religion=(free freshReligion)} {person.person_id=(db sys_user.person_id {sys_user.user_id=(free freshThis_userID)})})]
[RIGI] Op_Cashier_Cashier_updateAccountInfo_23703
    [COND] []
    [SOP]  [(UPDATE sys_user {sys_user.user_name=(free freshUser_name), sys_user.user_type=(free freshUser_type), sys_user.other_info=(free freshOther_info), sys_user.password=(free freshPassword), sys_user.online=(free freshOnline), sys_user.login=(free freshLogin), sys_user.logout=(free freshLogout), sys_user.profile_pic=(free freshProfile_pic), sys_user.suspend=(free freshSuspend)} {sys_user.user_id=(free freshThis_userID)})]
